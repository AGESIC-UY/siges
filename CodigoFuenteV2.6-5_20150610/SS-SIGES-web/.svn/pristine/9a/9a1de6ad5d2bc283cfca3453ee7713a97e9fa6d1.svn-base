package com.sofis.web.mb;

import com.sofis.entities.comparators.EntregablesComparator;
import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.data.Entregables;
import com.sofis.entities.data.Proyectos;
import com.sofis.entities.data.RegistrosHoras;
import com.sofis.entities.data.SsUsuario;
import com.sofis.exceptions.BusinessException;
import com.sofis.web.delegates.ParticipantesDelegate;
import com.sofis.web.delegates.ProyectosDelegate;
import com.sofis.web.delegates.RegistrosHorasDelegate;
import com.sofis.web.utils.JSFUtils;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.event.ValueChangeEvent;
import javax.inject.Inject;

/**
 *
 * @author Usuario
 */
@ManagedBean(name = "registroHorasMB")
@ViewScoped
public class RegistroHorasMB implements Serializable {

    private static final long serialVersionUID = 1L;
    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);
    private static final String REGISTRO_FORM_MSG = "registroFormMsg";
    
    @ManagedProperty("#{inicioMB}")
    InicioMB inicioMB;
    @Inject
    ProyectosDelegate proyectoDelegate;
    @Inject
    RegistrosHorasDelegate registrosHorasDelegate;
    @Inject
    ParticipantesDelegate participantesDelegate;
    //Atributos
    private int cantElementosPorPagina = 25;
    private RegistrosHoras registroHoras;
    private List<Proyectos> listaProyectos;
    private List<Entregables> listaEntregables;
    private List<RegistrosHoras> registroHorasListado;
    //Para el filtro
    private Integer filtroProyPk;
    private Integer filtroEntPk;
    private Date filtroFechaDesde;
    private Date filtroFechaHasta;
    private List<Proyectos> listaProyectosFiltro;
    private List<Entregables> listaEntregablesFiltro;

    public RegistroHorasMB() {
    }

    public int getCantElementosPorPagina() {
        return cantElementosPorPagina;
    }

    public void setCantElementosPorPagina(int cantElementosPorPagina) {
        this.cantElementosPorPagina = cantElementosPorPagina;
    }

    public RegistrosHoras getRegistroHoras() {
        return registroHoras;
    }

    public List<Entregables> getListaEntregables() {
        return listaEntregables;
    }

    public List<Proyectos> getListaProyectos() {
        return listaProyectos;
    }

    public List<RegistrosHoras> getRegistroHorasListado() {
        return registroHorasListado;
    }

    public Integer getFiltroProyPk() {
        return filtroProyPk;
    }

    public void setFiltroProyPk(Integer filtroProyPk) {
        this.filtroProyPk = filtroProyPk;
    }

    public Integer getFiltroEntPk() {
        return filtroEntPk;
    }

    public void setFiltroEntPk(Integer filtroEntPk) {
        this.filtroEntPk = filtroEntPk;
    }

    public Date getFiltroFechaDesde() {
        return filtroFechaDesde;
    }

    public void setFiltroFechaDesde(Date filtroFechaDesde) {
        this.filtroFechaDesde = filtroFechaDesde;
    }

    public Date getFiltroFechaHasta() {
        return filtroFechaHasta;
    }

    public void setFiltroFechaHasta(Date filtroFechaHasta) {
        this.filtroFechaHasta = filtroFechaHasta;
    }

    public List<Proyectos> getListaProyectosFiltro() {
        return listaProyectosFiltro;
    }

    public List<Entregables> getListaEntregablesFiltro() {
        return listaEntregablesFiltro;
    }

    public void setInicioMB(InicioMB inicioMB) {
        this.inicioMB = inicioMB;
    }

    public void setProyectoDelegate(ProyectosDelegate proyectoDelegate) {
        this.proyectoDelegate = proyectoDelegate;
    }

    public void setRegistrosHorasDelegate(RegistrosHorasDelegate registrosHorasDelegate) {
        this.registrosHorasDelegate = registrosHorasDelegate;
    }

    @PostConstruct
    public void init() {
        inicioMB.cargarOrganismoSeleccionado();
        
        inicializarRegistroHoras();
        inicializarFiltro();
        buscarSinFiltro();
    }

    private void inicializarRegistroHoras() {

        //Obtener el usuario logueado
        SsUsuario usuario = inicioMB.getUsuario();
        //Determinar los proyectos en los que participa
        listaProyectos = participantesDelegate.obtenerProyectosPorUsuarioParticipante(usuario.getUsuId());
        //Cargar los entregables del primer proyecto
        Integer proyId = null;
        if (listaProyectos != null && !listaProyectos.isEmpty()) {
            proyId = listaProyectos.get(0).getProyPk();
        }
        
        //Crear una nueva instancia de RegistroHoras
        registroHoras = new RegistrosHoras();
        registroHoras.setRhFecha(new Date());
        registroHoras.setRhUsuarioFk(usuario);
        registroHoras.setRhProyectoFk(new Proyectos(0));
        registroHoras.setRhEntregableFk(new Entregables(0));
        
        cargarEntregablesProyecto(proyId);
    }

    public void cambiarProyecto(ValueChangeEvent evt) {
        Integer proyId = (Integer) evt.getNewValue();
        cargarEntregablesProyecto(proyId);
    }

    private void cargarEntregablesProyecto(Integer proyId) {
        listaEntregables = new LinkedList();
        if (proyId != null && proyId.intValue() > 0) {
            Proyectos proy = proyectoDelegate.obtenerProyPorId(proyId);
            if (proy != null && proy.getProyCroFk() != null && proy.getProyCroFk().getEntregablesSet() != null) {
                listaEntregables.addAll(proy.getProyCroFk().getEntregablesSet());
            }
        }
        if (listaEntregables.isEmpty()) {
            registroHoras.getRhEntregableFk().setEntPk(0);
        } else {
            Collections.sort(listaEntregables, new EntregablesComparator());
        }
    }

    public String registrarHoras() {
        try {
            registroHoras = registrosHorasDelegate.registrarHoras(registroHoras);
            buscarConFiltro();
            inicializarRegistroHoras();
        } catch (BusinessException ex) {
            logger.log(Level.SEVERE, ex.getMessage());
            JSFUtils.agregarMsgs(REGISTRO_FORM_MSG, ex.getErrores());
        }
        return null;
    }

    private void inicializarFiltro() {
        filtroFechaDesde = null;
        filtroFechaHasta = null;
        inicializarFiltroProyectos();
    }

    private void inicializarFiltroProyectos() {
        listaProyectosFiltro = new LinkedList();
        listaProyectosFiltro.addAll(listaProyectos);
        listaProyectosFiltro.add(0, new Proyectos(0, " Todos "));
        cargarEntregablesProyectoFiltro(0);
    }

    private void cargarEntregablesProyectoFiltro(Integer proyId) {
        listaEntregablesFiltro = new LinkedList();
        if (proyId != null && proyId.intValue() > 0) {
            Proyectos proy = proyectoDelegate.obtenerProyPorId(proyId);
            if (proy != null && proy.getProyCroFk() != null && proy.getProyCroFk().getEntregablesSet() != null) {
                listaEntregablesFiltro.addAll(proy.getProyCroFk().getEntregablesSet());
            }
        }
        listaEntregablesFiltro.add(0, new Entregables(0, 0, " Todos ", 0));
        Collections.sort(listaEntregablesFiltro, new EntregablesComparator());
    }

    public void cambiarProyectoFiltro(ValueChangeEvent event) {
        Integer proyId = (Integer) event.getNewValue();
        cargarEntregablesProyectoFiltro(proyId);
    }

    public String buscarConFiltro() {
        SsUsuario usuario = inicioMB.getUsuario();
        registroHorasListado = registrosHorasDelegate.obtenerRegistrosHoras(usuario.getUsuId(),
                (filtroProyPk != null && filtroProyPk.intValue() > 0 ? filtroProyPk : null),
                (filtroEntPk != null && filtroEntPk.intValue() > 0 ? filtroEntPk : null),
                filtroFechaDesde, filtroFechaHasta, null, null);
//        Collections.sort(registroHorasListado);
        return null;
    }

    public String buscarSinFiltro() {
        filtroProyPk = null;
        filtroEntPk = null;
        filtroFechaDesde = null;
        filtroFechaHasta = null;
        return buscarConFiltro();
    }

    public void limpiarFiltro() {
    }
    
}