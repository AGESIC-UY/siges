package com.sofis.web.mb;

import com.icesoft.faces.context.effects.JavascriptContext;
import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.constantes.ConstantesEstandares;
import com.sofis.entities.constantes.MensajesNegocio;
import com.sofis.entities.data.Areas;
import com.sofis.entities.data.Estados;
import com.sofis.entities.data.EstadosEditor;
import com.sofis.entities.data.Organismos;
import com.sofis.entities.data.ProgEditorEstado;
import com.sofis.entities.data.ProyEditorEstado;
import com.sofis.entities.data.SsUsuario;
import com.sofis.entities.tipos.FichaTO;
import com.sofis.entities.tipos.FiltroInicioItem;
import com.sofis.entities.tipos.FiltroInicioTO;
import com.sofis.entities.utils.SsUsuariosUtils;
import com.sofis.exceptions.GeneralException;
import com.sofis.generico.utils.generalutils.DatesUtils;
import com.sofis.generico.utils.generalutils.StringsUtils;
import com.sofis.web.delegates.AreasDelegate;
import com.sofis.web.delegates.EditorEstadoDelegate;
import com.sofis.web.delegates.EstadosDelegate;
import com.sofis.web.delegates.EstadosEditorDelegate;
import com.sofis.web.delegates.ProgramasProyectosDelegate;
import com.sofis.web.delegates.ProySitActHistoricoDelegate;
import com.sofis.web.delegates.SsUsuarioDelegate;
import com.sofis.web.enums.FieldAttributeEnum;
import com.sofis.web.genericos.constantes.ConstantesNavegacion;
import com.sofis.web.genericos.constantes.ConstantesPresentacion;
import com.sofis.web.properties.Labels;
import com.sofis.web.utils.JSFUtils;
import com.sofis.web.utils.SofisComboG;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.swing.tree.MutableTreeNode;

/**
 *
 * @author Usuario
 */
@ManagedBean(name = "reportePublicacionWebMB")
@ViewScoped
public class ReportePublicacionWebMB implements Serializable {

    private static final long serialVersionUID = 1L;
    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);

    //Inject
    @ManagedProperty("#{inicioMB}")
    private InicioMB inicioMB;
    @Inject
    private EstadosDelegate estadosDelegate;
    @Inject
    private AreasDelegate areasDelegate;
    @Inject
    private ProgramasProyectosDelegate programasProyectosDelegate;
    @Inject
    private SsUsuarioDelegate ssUsuarioDelegate;
    @Inject
    private ProySitActHistoricoDelegate proySitActHistoricoDelegate;
    @Inject
    private EstadosEditorDelegate estadosEditorDelegate;
    @Inject
    private EditorEstadoDelegate editorEstadoDelegate;
    //Variables
    private List<FichaTO> resultado = new ArrayList<>();
    private String cantElementosPorPagina = "25";
    //Filtro
    private FiltroInicioTO filtro = new FiltroInicioTO();
    private Boolean filtroRender;
    private List<MutableTreeNode> listaAreasTagsTreeNode = new ArrayList<>();
    private List<SelectItem> listaEstadosItem = new ArrayList<>();
    //Filtro Combos
    private SofisComboG<EstadosEditor> listaEstadoPublicacionCombo = new SofisComboG<>();
    private SofisComboG<Areas> listaAreasOrganismoCombo = new SofisComboG<>();
    private SofisComboG<SsUsuario> listaAdjuntoCombo = new SofisComboG<>();
    private SofisComboG<SsUsuario> listaGerenteCombo = new SofisComboG<>();
    private SofisComboG<SsUsuario> listaPublicadorCombo = new SofisComboG<>();
    private SofisComboG<SsUsuario> listaEditorCombo = new SofisComboG<>();

    public ReportePublicacionWebMB() {
    }

    // <editor-fold defaultstate="collapsed" desc="getter-setter">
    public void setInicioMB(InicioMB inicioMB) {
        this.inicioMB = inicioMB;
    }

    public Boolean getFiltroRender() {
        return filtroRender;
    }

    public void setFiltroRender(Boolean filtroRender) {
        this.filtroRender = filtroRender;
    }

    public String getCantElementosPorPagina() {
        return cantElementosPorPagina;
    }

    public void setCantElementosPorPagina(String cantElementosPorPagina) {
        this.cantElementosPorPagina = cantElementosPorPagina;
    }

    public FiltroInicioTO getFiltro() {
        return filtro;
    }

    public void setFiltro(FiltroInicioTO filtro) {
        this.filtro = filtro;
    }

    public List<MutableTreeNode> getListaAreasTagsTreeNode() {
        return listaAreasTagsTreeNode;
    }

    public void setListaAreasTagsTreeNode(List<MutableTreeNode> listaAreasTagsTreeNode) {
        this.listaAreasTagsTreeNode = listaAreasTagsTreeNode;
    }

    public SofisComboG<Areas> getListaAreasOrganismoCombo() {
        return listaAreasOrganismoCombo;
    }

    public void setListaAreasOrganismoCombo(SofisComboG<Areas> listaAreasOrganismoCombo) {
        this.listaAreasOrganismoCombo = listaAreasOrganismoCombo;
    }

    public SofisComboG<SsUsuario> getListaAdjuntoCombo() {
        return listaAdjuntoCombo;
    }

    public void setListaAdjuntoCombo(SofisComboG<SsUsuario> listaAdjuntoCombo) {
        this.listaAdjuntoCombo = listaAdjuntoCombo;
    }

    public SofisComboG<SsUsuario> getListaGerenteCombo() {
        return listaGerenteCombo;
    }

    public void setListaGerenteCombo(SofisComboG<SsUsuario> listaGerenteCombo) {
        this.listaGerenteCombo = listaGerenteCombo;
    }

    public SofisComboG<EstadosEditor> getListaEstadoPublicacionCombo() {
        return listaEstadoPublicacionCombo;
    }

    public void setListaEstadoPublicacionCombo(SofisComboG<EstadosEditor> listaEstadoPublicacionCombo) {
        this.listaEstadoPublicacionCombo = listaEstadoPublicacionCombo;
    }

    public SofisComboG<SsUsuario> getListaPublicadorCombo() {
        return listaPublicadorCombo;
    }

    public void setListaPublicadorCombo(SofisComboG<SsUsuario> listaPublicadorCombo) {
        this.listaPublicadorCombo = listaPublicadorCombo;
    }

    public SofisComboG<SsUsuario> getListaEditorCombo() {
        return listaEditorCombo;
    }

    public void setListaEditorCombo(SofisComboG<SsUsuario> listaEditorCombo) {
        this.listaEditorCombo = listaEditorCombo;
    }

    public SofisComboG<SsUsuario> getListaPmoFederadaCombo() {
        return listaPublicadorCombo;
    }

    public void setListaPmoFederadaCombo(SofisComboG<SsUsuario> listaPmoFederadaCombo) {
        this.listaPublicadorCombo = listaPmoFederadaCombo;
    }

    public List<SelectItem> getListaEstadosItem() {
        return listaEstadosItem;
    }

    public void setListaEstadosItem(List<SelectItem> listaEstadosItem) {
        this.listaEstadosItem = listaEstadosItem;
    }

    public List<FichaTO> getResultado() {
        return resultado;
    }

    public void setResultado(List<FichaTO> resultado) {
        this.resultado = resultado;
    }

    //</editor-fold>
    @PostConstruct
    public void init() {
        cargarCombosFiltro();
        buscarAction();
    }

    public void buscarAction() {
        if (inicioMB.getOrganismo() != null) {
            resultado.clear();

            obtenerCombosSeleccionados();

            final Integer orgPk = inicioMB.getOrganismo().getOrgPk();
            final SsUsuario usuario = inicioMB.getUsuario();

            if (usuario == null) {
                return;
            }
            //para cada area comienzo a cargar los datos
            //si el filtro tiene una area seteada entonces solo es para esa area
            //si el filtro no tiene area seteada es para todas las areas
            Integer areaOrganizacion = filtro.getAreasOrganizacion() != null ? filtro.getAreasOrganizacion().getAreaPk() : null;
            final List<Areas> areas;
            if (areaOrganizacion == null || areaOrganizacion.equals(-1)) {
                areas = areasDelegate.obtenerAreasPorOrganismo(orgPk);
            } else {
                areas = new ArrayList();
                areas.add(new Areas(areaOrganizacion));
            }

            resultado = programasProyectosDelegate.obtenerSeguimientoPublicacion(filtro, orgPk);
        }
    }

    private void cargarCombosFiltro() {
        Organismos org = inicioMB.getOrganismo();
        List<Areas> listaAreas = areasDelegate.obtenerAreasPorOrganismo(org.getOrgPk());
        if (listaAreas != null) {
            listaAreasOrganismoCombo = new SofisComboG(listaAreas, "areaNombre");
            listaAreasOrganismoCombo.addEmptyItem(Labels.getValue("comboTodas"));
        }

        //la lista de usuarios con rol Director son los que se pueden seleccionar como sponsor.
        List<EstadosEditor> listaEstadosEditor = estadosEditorDelegate.obtenerTodos();
        if (listaEstadosEditor != null) {
            listaEstadoPublicacionCombo = new SofisComboG(listaEstadosEditor, "estediDesc");
            listaEstadoPublicacionCombo.addEmptyItem(Labels.getValue("comboTodos"));
        }

        //la lista de usuarios de la organizacion son los que se puede selecionar como adjunto.
        List<SsUsuario> listaAdjunto = ssUsuarioDelegate.obtenerTodosPorOrganismo(org.getOrgPk());
        if (listaAdjunto != null) {
            listaAdjuntoCombo = new SofisComboG(listaAdjunto, "usuNombreApellido");
            listaAdjuntoCombo.addEmptyItem(Labels.getValue("comboTodos"));
        }

        //la lista de los usuarios de la organizacion, son los que se pueden seleccionar como gerente
        List<SsUsuario> listaGerente = ssUsuarioDelegate.obtenerTodosPorOrganismo(org.getOrgPk());
        if (listaGerente != null) {
            listaGerenteCombo = new SofisComboG(listaGerente, "usuNombreApellido");
            listaGerenteCombo.addEmptyItem(Labels.getValue("comboTodos"));
        }

        //la lista de usuarios para seleccionar como editor
        List<SsUsuario> listaTodosPorOrg = ssUsuarioDelegate.obtenerTodosPorOrganismo(inicioMB.getOrganismo().getOrgPk());
        if (listaTodosPorOrg != null) {
            listaEditorCombo = new SofisComboG(listaTodosPorOrg, "usuNombreApellido");
            listaEditorCombo.addEmptyItem(Labels.getValue("comboTodos"));

            listaPublicadorCombo = new SofisComboG(listaTodosPorOrg, "usuNombreApellido");
            listaPublicadorCombo.addEmptyItem(Labels.getValue("comboTodos"));
        }

        listaEstadosItem = new ArrayList<>();
        listaEstadosItem.add(new SelectItem(Estados.ESTADOS.INICIO.estado_id, Labels.getValue("estado_Inicio")));
        listaEstadosItem.add(new SelectItem(Estados.ESTADOS.PLANIFICACION.estado_id, Labels.getValue("estado_Planificacion")));
        listaEstadosItem.add(new SelectItem(Estados.ESTADOS.EJECUCION.estado_id, Labels.getValue("estado_Ejecucion")));
        listaEstadosItem.add(new SelectItem(Estados.ESTADOS.FINALIZADO.estado_id, Labels.getValue("estado_Finalizado")));
    }

    public void renderizarFiltro() {
        if (filtroRender == null || filtroRender == false) {
            filtroRender = true;
        } else {
            filtroRender = false;
        }
    }

    public void limpiarFiltro() {
        filtroPorDefecto();
    }

    public void filtroPorDefecto() {
        filtro = new FiltroInicioTO();
        //el usuario no tiene salvado el filtro, 
        //se inicializa con los valores por defecto
        List<Object> estadosDefecto = new ArrayList<>();
        estadosDefecto.add(Estados.ESTADOS.INICIO.estado_id);
        estadosDefecto.add(Estados.ESTADOS.PLANIFICACION.estado_id);
        estadosDefecto.add(Estados.ESTADOS.EJECUCION.estado_id);
        estadosDefecto.add(-100);
        filtro.setEstados(estadosDefecto);

        listaPublicadorCombo.setSelected(-1);
        listaEstadoPublicacionCombo.setSelected(-1);
        listaAreasOrganismoCombo.setSelected(-1);
        listaGerenteCombo.setSelected(-1);
        listaEditorCombo.setSelected(-1);
        listaPublicadorCombo.setSelected(-1);
        listaEstadoPublicacionCombo.setSelected(-1);
    }

    public String guardarFichaAction(FiltroInicioItem item) {
        try {
            Object obj = programasProyectosDelegate.guardarFiltroInicioItem(item, inicioMB.getUsuario(), inicioMB.getOrganismo().getOrgPk());
            if (obj != null) {
                JSFUtils.agregarMsgInfo(String.format(Labels.getValue(MensajesNegocio.INFO_PUB_WEB_GUARDADO_ITEM), item.getNombre()));
                inicioMB.setRenderPopupMensajes(true);
            }
        } catch (GeneralException ge) {
            logger.log(Level.SEVERE, null, ge);
            JSFUtils.agregarMsgError(String.format(Labels.getValue(MensajesNegocio.ERROR_PUB_WEB_GUARDAR_ITEM), item.getNombre()));
            inicioMB.setRenderPopupMensajes(true);
        }
        return null;
    }

    public String guardarAprobarFichaAction(FiltroInicioItem item) {
        item.setAprobarEditar(true);

        guardarFichaAction(item);

        return null;
    }

    public String fechaSitActual(FiltroInicioItem item) {
        if (item != null) {
            return DatesUtils.toStringFormat(proySitActHistoricoDelegate.obtenerUltimaFechaSitAct(item.getFichaFk()), ConstantesEstandares.CALENDAR_PATTERN);
        }
        return "";
    }

    public String estadoLabel(FiltroInicioItem item) {
        if (item != null && item.getEstado() != null) {
            return estadosDelegate.estadoStr(item.getEstado().getEstPk());
        }
        return "";
    }

    public String estadoEdicionFechaLabel(FiltroInicioItem item) {
        if (item != null && item.getEstado() != null) {
            Date fecha = null;
            if (item.isPrograma()
                    && item.getProgEditorEstado() != null) {
                fecha = item.getProgEditorEstado().getProgediestFecha();
            } else if (item.isProyecto()
                    && item.getProyEditorEstado() != null) {
                fecha = item.getProyEditorEstado().getProyediestFecha();
            }
            return DatesUtils.toStringFormat(fecha, ConstantesEstandares.CALENDAR_PATTERN);
        }
        return "";
    }

    public String estadoEdicionLabel(FiltroInicioItem item) {
        if (item != null && item.getEstado() != null) {
            String label = "";
            if (item.isPrograma()
                    && item.getProgEditorEstado() != null) {
                label = item.getProgEditorEstado().getProgediestEstediFk().getEstediLabel();
            } else if (item.isProyecto()
                    && item.getProyEditorEstado() != null) {
                label = item.getProyEditorEstado().getProyediestEstediFk().getEstediLabel();
            }
            return Labels.getValue(label);
        }
        return "";
    }

    public void obtenerCombosSeleccionados() {
        if (filtro != null) {
            filtro.setAreasOrganizacion((Areas) listaAreasOrganismoCombo.getSelectedT());

            if (listaEstadoPublicacionCombo.getSelectedT() != null) {
                filtro.setEstadosEditor(listaEstadoPublicacionCombo.getSelectedT());
//                filtro.setEstadosEditorPk(listaEstadoPublicacionCombo.getSelectedT().getEstediPk());
            } else {
                filtro.setEstadosEditor(null);
            }

            if (listaGerenteCombo.getSelectedT() != null) {
                filtro.setGerenteOAdjunto((listaGerenteCombo.getSelectedT()).getUsuId());
            } else {
                filtro.setGerenteOAdjunto(null);
            }

            if (listaPublicadorCombo.getSelectedT() != null) {
                filtro.setPublicador((listaPublicadorCombo.getSelectedT()).getUsuId());
            } else {
                filtro.setPublicador(null);
            }

            if (listaEditorCombo.getSelectedT() != null) {
                filtro.setEditor((listaEditorCombo.getSelectedT()).getUsuId());
            } else {
                filtro.setEditor(null);
            }
        }
    }

    public String histEditarTxt(FichaTO fichaTO) {
        StringBuilder sb = new StringBuilder();
        if (fichaTO.isPrograma()) {
            List<ProgEditorEstado> listEE;
            if (fichaTO.getProgEstEdiFk() != null) {
                listEE = new ArrayList<>(fichaTO.getProgEstEdiFk());
            } else {
                listEE = editorEstadoDelegate.obtenerProgHistorico(fichaTO.getFichaFk());
            }
            for (ProgEditorEstado est : listEE) {
                sb.append(DatesUtils.toStringFormat(est.getProgediestFecha(), ConstantesEstandares.CALENDAR_PATTERN))
                        .append(" ")
                        .append(Labels.getValue(est.getProgediestEstediFk().getEstediLabel()))
                        .append("<br/>");
            }
        } else if (fichaTO.isProyecto()) {
            List<ProyEditorEstado> listEE;
            if (fichaTO.getProgEstEdiFk() != null) {
                listEE = new ArrayList<>(fichaTO.getProyEstEdiFk());
            } else {
                listEE = editorEstadoDelegate.obtenerProyHistorico(fichaTO.getFichaFk());
            }

            for (ProyEditorEstado est : listEE) {
                sb.append(DatesUtils.toStringFormat(est.getProyediestFecha(), ConstantesEstandares.CALENDAR_PATTERN))
                        .append(" ")
                        .append(Labels.getValue(est.getProyediestEstediFk().getEstediLabel()))
                        .append("<br/>");
            }
        }

        return sb.toString();
    }

    public String irReporteEdicion(String clave, boolean nuevaVentana) {
        if (nuevaVentana) {
            HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
            request.getSession().setAttribute(ConstantesPresentacion.PROG_PROY_ID, clave);
            String url = StringsUtils.concat("window.open('", request.getContextPath(), "/paginasPrivadas/publicacionWeb.xhtml", "','');");
            JavascriptContext.addJavascriptCall(FacesContext.getCurrentInstance(), url);
            return null;
        } else {
            FacesContext.getCurrentInstance().getExternalContext().getFlash().put(ConstantesPresentacion.PROG_PROY_ID, clave);
            return ConstantesNavegacion.IR_A_PUBLICACION_WEB_REPORTE;
        }
    }

    public String irFicha(String clave, boolean nuevaVentana) {
        if (nuevaVentana) {
            HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
            request.getSession().setAttribute(ConstantesPresentacion.PROG_PROY_ID, clave);
            String url = StringsUtils.concat("window.open('", request.getContextPath(), "/paginasPrivadas/ficha.xhtml", "','');");
            JavascriptContext.addJavascriptCall(FacesContext.getCurrentInstance(), url);
            return null;
        } else {
            FacesContext.getCurrentInstance().getExternalContext().getFlash().put(ConstantesPresentacion.PROG_PROY_ID, clave);
            return ConstantesNavegacion.IR_A_EDITAR_FICHA;
        }
    }

    // <editor-fold defaultstate="collapsed" desc="fieldAttribute - metodos de visualizaciÃ³n">
    /**
     * Retorna un booolean si el fieldName aportado debe estar deshabilitado
     * para usar.
     *
     * @param fieldName
     * @return
     */
    public boolean fieldDisabled(String fieldName) {
        //dependiendo del usuario, estado etc es si esta habilitado o no
        return fieldAttribute(fieldName, FieldAttributeEnum.DISABLED);
    }

    public boolean fieldDisabled(String fieldName, Object param) {
        //dependiendo del usuario, estado etc es si esta habilitado o no
        return fieldAttribute(fieldName, FieldAttributeEnum.DISABLED, param);
    }

    /**
     * Retorna un booolean si el fieldName aportado debe ser desplegado en
     * pantalla.
     *
     * @param fieldName
     * @return
     */
    public boolean fieldRendered(String fieldName) {
        //dependiendo del usuario, estado etc es si esta habilitado o no
        return fieldAttribute(fieldName, FieldAttributeEnum.RENDERED);
    }

    public boolean fieldRendered(String fieldName, Object param) {
        //dependiendo del usuario, estado etc es si esta habilitado o no
        return fieldAttribute(fieldName, FieldAttributeEnum.RENDERED, param);
    }

    private boolean fieldAttribute(String fieldName, FieldAttributeEnum field) {
        return fieldAttribute(fieldName, field, null);
    }

    private boolean fieldAttribute(String fieldName, FieldAttributeEnum field, Object param) {

        boolean checkDisabled = field == FieldAttributeEnum.DISABLED;
        boolean checkRendered = field == FieldAttributeEnum.RENDERED;

        boolean disabled = false;
        boolean rendered = true;

        FiltroInicioItem item = param != null && param instanceof FiltroInicioItem ? (FiltroInicioItem) param : null;

        boolean isGerente = SsUsuariosUtils.isUsuarioGerenteOAdjuntoFicha(item, inicioMB.getUsuario());
        boolean isPMOT = inicioMB.isUsuarioOrgaPMOT();
        boolean isPMOF = SsUsuariosUtils.isUsuarioPMOF(item, inicioMB.getUsuario(), inicioMB.getOrganismo().getOrgPk());
        boolean isEditor = SsUsuariosUtils.isUsuarioEditor(item, inicioMB.getUsuario());
//        boolean isPublicador = SsUsuariosUtils.isUsuarioPublicador(item, inicioMB.getUsuario());
        boolean isEditorGral = SsUsuariosUtils.isUsuarioEditorGral(inicioMB.getUsuario(), inicioMB.getOrganismo().getOrgPk());
        boolean isProg = item != null && item.isPrograma();
//        boolean isProy = item != null && item.isProyecto();

        boolean hasEstado = item != null && item.getEstado() != null;
        boolean isAlta = !hasEstado;

        boolean isEstadoPendientes = hasEstado && item != null && item.getEstado().isPendientes();
//        boolean isEstadoPendientePMOF = hasEstado && item != null && item.getEstado().isEstado(Estados.ESTADOS.PENDIENTE_PMOF.estado_id);
//        boolean isEstadoPendientePMOT = hasEstado && item != null && item.getEstado().isEstado(Estados.ESTADOS.PENDIENTE_PMOT.estado_id);
        boolean isEstadoInicio = item != null && item.getEstado().isEstado(Estados.ESTADOS.INICIO.estado_id);
        boolean isEstadoPlanificacion = item != null && item.getEstado().isEstado(Estados.ESTADOS.PLANIFICACION.estado_id);
//        boolean isEstadoEjecucion = item != null && item.getEstado().isEstado(Estados.ESTADOS.EJECUCION.estado_id);
        boolean isEstadoFinalizado = item != null && item.getEstado().isEstado(Estados.ESTADOS.FINALIZADO.estado_id);
//        boolean isEstadoPendCerrar = item != null && item.getEstadoPendiente() != null && item.getEstadoPendiente().isEstado(Estados.ESTADOS.SOLICITUD_CANCELAR_PMOT.estado_id);

        boolean isActivo = item != null && item.isActivo();

        boolean deshabilitar = !isActivo
                || (isEstadoPendientes)
                || (!isAlta && (((isGerente && !(isEditor || isEditorGral)) && !(isEstadoInicio || isEstadoPlanificacion)) || !(isEditor || isEditorGral || isGerente)));
        boolean deshabilitarFinalizado = deshabilitar || isEstadoFinalizado;

//        boolean isProgPaso1_1 = isProg && isAlta;
//        boolean isProyPaso1_1 = isProy && isAlta;
//        boolean isSolAprobacion = item != null && item.getEstadoPendiente() != null
//                && estadosDelegate.isOrdenProcesoMenor(item.getEstado(), item.getEstadoPendiente());
        if (fieldName.equalsIgnoreCase("GuardarFicha")) {
            if (deshabilitarFinalizado) {
                rendered = false;
            }
        }

        if (fieldName.equalsIgnoreCase("AprobarGuardarFicha")) {
            if (deshabilitarFinalizado) {
                rendered = false;
            }
        }

        if (fieldName.equalsIgnoreCase("Objetivo")
                || fieldName.equalsIgnoreCase("PubObjetivo")) {
            if (deshabilitarFinalizado) {
                rendered = false;
            }
        }

        if (fieldName.equalsIgnoreCase("SitActual")) {
            if (isProg) {
                //el programa no tiene este dato por lo tanto no se renderiza
                rendered = false;
            } else {
                if (deshabilitarFinalizado) {
                    disabled = true;
                    rendered = false;
                }
            }
        }

        if (fieldName.equalsIgnoreCase("pubweb_descripcion")
                || fieldName.equalsIgnoreCase("pubweb_alcance")
                || fieldName.equalsIgnoreCase("pubweb_beneficios")
                || fieldName.equalsIgnoreCase("pubweb_integrantes")
                || fieldName.equalsIgnoreCase("pubweb_rol_organismo")) {
            if (deshabilitarFinalizado) {
                disabled = true;
                rendered = false;
            }
        }

        if (fieldName.equalsIgnoreCase("Observaciones")) {
            if (deshabilitarFinalizado || !(isPMOF || isPMOT || isEditor || isEditorGral)) {
                disabled = true;
                rendered = false;
            }
        }

        if (deshabilitarFinalizado) {
            disabled = true;
        }

        if (checkDisabled) {
            return disabled;
        } else if (checkRendered) {
            return rendered;
        } else {
            return false;
        }
    }
    // </editor-fold>
}
