package com.sofis.web.mb;

import com.sofis.business.constantes.ConfiguracionConstantes;
import com.sofis.business.utils.EntregablesUtils;
import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.constantes.ConstantesEstandares;
import com.sofis.entities.data.Adquisicion;
import com.sofis.entities.data.Devengado;
import com.sofis.entities.data.EntHistLineaBase;
import com.sofis.entities.data.Entregables;
import com.sofis.entities.data.Estados;
import com.sofis.entities.data.Moneda;
import com.sofis.entities.data.Presupuesto;
import com.sofis.entities.data.ProdMes;
import com.sofis.entities.data.Productos;
import com.sofis.entities.data.ProyReplanificacion;
import com.sofis.entities.data.Proyectos;
import com.sofis.entities.tipos.FichaTO;
import com.sofis.entities.tipos.ReporteAcumuladoMesTO;
import com.sofis.entities.tipos.ReporteAcumuladoTO;
import com.sofis.generico.utils.generalutils.CollectionsUtils;
import com.sofis.generico.utils.generalutils.DatesUtils;
import com.sofis.generico.utils.generalutils.StringsUtils;
import com.sofis.web.delegates.AdquisicionDelegate;
import com.sofis.web.delegates.ConfiguracionDelegate;
import com.sofis.web.delegates.DevengadoDelegate;
import com.sofis.web.delegates.EntHistLineaBaseDelegate;
import com.sofis.web.delegates.EstadosDelegate;
import com.sofis.web.delegates.GastosDelegate;
import com.sofis.web.delegates.MonedaDelegate;
import com.sofis.web.delegates.PresupuestoDelegate;
import com.sofis.web.delegates.ProductosDelegate;
import com.sofis.web.delegates.ProyReplanificacionDelegate;
import com.sofis.web.delegates.ProyectosDelegate;
import com.sofis.web.delegates.RegistrosHorasDelegate;
import com.sofis.web.properties.Labels;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

/**
 *
 * @author Usuario
 */
@ManagedBean(name = "reporteProyectoMB")
@ViewScoped
public class ReporteProyectoMB implements Serializable {

    private static final long serialVersionUID = 1L;
    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);
    private static final String REPORTE_PROY_PK = "reporteProyPk";
    private static final String REPORTE_TIPO = "reporteTipo";
    private static final int INICIO_REPORTE_GANTT = 5;
    private static final int FIN_REPORTE_GANTT = 665;
    @ManagedProperty("#{inicioMB}")
    InicioMB inicioMB;
    @ManagedProperty("#{fichaMB}")
    FichaMB fichaMB;
    @Inject
    ProyectosDelegate proyectoDelegate;
    @Inject
    ProductosDelegate productosDelegate;
    @Inject
    PresupuestoDelegate presupuestoDelegate;
    @Inject
    ConfiguracionDelegate configuracionDelegate;
    @Inject
    EntHistLineaBaseDelegate entHistLineaBaseDelegate;
    @Inject
    ProyReplanificacionDelegate proyReplanificacionDelegate;
    @Inject
    AdquisicionDelegate adquisicionDelegate;
    @Inject
    EstadosDelegate estadosDelegate;
    @Inject
    RegistrosHorasDelegate registrosHorasDelegate;
    @Inject
    MonedaDelegate monedaDelegate;
    @Inject
    GastosDelegate gastosDelegate;
    @Inject
    DevengadoDelegate devengadoDelegate;
    // Variables
    private List<Entregables> listaEntregables;
    private List<ReporteAcumuladoTO> listaAcumuladosProductos;
    private List<ReporteAcumuladoTO> listaAcumuladosPresupuesto;
    private Integer anio;
    private boolean apaisado = false;
    private Presupuesto presupuesto;
    private List<ProyReplanificacion> histReplanificacion;
    private Integer tipoPre;

    public ReporteProyectoMB() {
        this.listaAcumuladosProductos = new ArrayList<>();
        this.listaAcumuladosPresupuesto = new ArrayList<>();
    }

    public void setInicioMB(InicioMB inicioMB) {
        this.inicioMB = inicioMB;
    }

    public InicioMB getInicioMB() {
        return inicioMB;
    }

    public FichaMB getFichaMB() {
        return fichaMB;
    }

    public void setFichaMB(FichaMB fichaMB) {
        this.fichaMB = fichaMB;
    }

    public FichaTO getFichaTO() {
        return this.fichaMB.getFichaTO();
    }

    public List<Entregables> getListaEntregables() {
        return listaEntregables;
    }

    public void setListaEntregables(List<Entregables> listaEntregables) {
        this.listaEntregables = listaEntregables;
    }

    public List<ReporteAcumuladoTO> getListaAcumuladosProductos() {
        return listaAcumuladosProductos;
    }

    public void setListaAcumuladosProductos(List<ReporteAcumuladoTO> listaAcumuladosProductos) {
        this.listaAcumuladosProductos = listaAcumuladosProductos;
    }

    public List<ReporteAcumuladoTO> getListaAcumuladosPresupuesto() {
        return listaAcumuladosPresupuesto;
    }

    public void setListaAcumuladosPresupuesto(List<ReporteAcumuladoTO> listaAcumuladosPresupuesto) {
        this.listaAcumuladosPresupuesto = listaAcumuladosPresupuesto;
    }

    public Integer getAnio() {
        return anio;
    }

    public void setAnio(Integer anio) {
        this.anio = anio;
    }

    public boolean isApaisado() {
        return apaisado;
    }

    public void setApaisado(boolean apaisado) {
        this.apaisado = apaisado;
    }

    public Presupuesto getPresupuesto() {
        return presupuesto;
    }

    public void setPresupuesto(Presupuesto presupuesto) {
        this.presupuesto = presupuesto;
    }

    public List<ProyReplanificacion> getHistReplanificacion() {
        return histReplanificacion;
    }

    public void setHistReplanificacion(List<ProyReplanificacion> histReplanificacion) {
        this.histReplanificacion = histReplanificacion;
    }

    public Integer getTipoPre() {
        return tipoPre;
    }

    public void setTipoPre(Integer tipoPre) {
        this.tipoPre = tipoPre;
    }

    @PostConstruct
    public void init() {

        Integer reporteProyPk = (Integer) getFlashContext(REPORTE_PROY_PK);
        if (reporteProyPk == null) {
            HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
            reporteProyPk = (Integer) request.getSession().getAttribute(REPORTE_PROY_PK);
            request.getSession().removeAttribute(REPORTE_PROY_PK);
        }

        if (reporteProyPk != null) {
            String reporteTipo = (String) getFlashContext(REPORTE_TIPO);
            if (reporteTipo == null) {
                HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
                reporteTipo = (String) request.getSession().getAttribute(REPORTE_TIPO);
                request.getSession().removeAttribute(REPORTE_TIPO);
            }

            int proyPk = reporteProyPk.intValue();
            if (reporteTipo == null || reporteTipo.equalsIgnoreCase("proyecto")) {
                cargarReporte(proyPk);
            } else if (reporteTipo.equalsIgnoreCase("proyectoTablas")) {
                apaisado = true;
                cargarReporte(proyPk);
            } else if (reporteTipo.equalsIgnoreCase("cronograma")) {
                apaisado = true;
                cargarCronograma(proyPk);
            }
        }
    }

    private Object getFlashContext(String attName) {
        return FacesContext.getCurrentInstance().getExternalContext().getFlash().get(attName);
    }

    private void cargarReporte(int proyPk) {
        Proyectos proy = proyectoDelegate.obtenerProyPorId(proyPk);
        fichaMB.proyectoToFichaTO(proy);

        if (fichaMB.getFichaTO().getCroFk() != null && fichaMB.getFichaTO().getCroFk().getEntregablesSet() != null) {
            listaEntregables = new ArrayList(fichaMB.getFichaTO().getCroFk().getEntregablesSet());
        }
        //ordenamos los entregables por el numero
//        listaEntregables = EntregablesUtils.sortById(listaEntregables);
        listaEntregables = EntregablesUtils.marcarPadres(listaEntregables);

        Calendar cal = new GregorianCalendar();
        anio = cal.get(Calendar.YEAR);
        Integer ultimoAnio = EntregablesUtils.obtenerUltimoAnio(listaEntregables);
        if (ultimoAnio != null && ultimoAnio < anio) {
            anio = ultimoAnio;
        }

        fichaMB.cargarResumenRiesgos();
        fichaMB.cargarResumenPresupuesto();
        fichaMB.cargarResumenCronograma();

        cargarTablaAcumuladosProductos(proyPk);
        cargarTablaAcumuladosPresupuesto(proyPk);
    }

    private void cargarCronograma(int proyPk) {
        Proyectos proy = proyectoDelegate.obtenerProyPorId(proyPk);
        fichaMB.proyectoToFichaTO(proy);

        listaEntregables = new ArrayList(fichaMB.getFichaTO().getCroFk().getEntregablesSet());
        //ordenamos los entregables por el numero
        listaEntregables = EntregablesUtils.marcarPadres(listaEntregables);

        Calendar cal = new GregorianCalendar();
        anio = cal.get(Calendar.YEAR);
        Integer ultimoAnio = EntregablesUtils.obtenerUltimoAnio(listaEntregables);
        if (ultimoAnio != null && ultimoAnio < anio) {
            anio = ultimoAnio;
        }

        for (Entregables ent : listaEntregables) {
            List<EntHistLineaBase> entHistList = entHistLineaBaseDelegate.obtenerEntHistPorEntPk(ent.getEntPk());
            ent.setEntHistLBSet(new HashSet<>(entHistList));
        }

        histReplanificacion = proyReplanificacionDelegate.obtenerReplanHistPorProyPk(proyPk);
    }

    public String estadoStr(Estados est) {
        return estadosDelegate.estadoStr(est.getEstPk());
    }

    public int calcularLeftEntByDate(Date inicio) {
        return EntregablesUtils.calcularLeftEntByDate(inicio, anio, INICIO_REPORTE_GANTT, FIN_REPORTE_GANTT);
    }

    public int calcularWitdhEntByDate(Date inicio, Date fin, Integer duracion) {
        return EntregablesUtils.calcularWitdhEntByDate(inicio, fin, duracion, anio, INICIO_REPORTE_GANTT, FIN_REPORTE_GANTT);
    }

    public boolean contieneAnioMenor() {
        if (CollectionsUtils.isNotEmpty(listaEntregables)) {
            Calendar cal = new GregorianCalendar();
            for (Entregables ent : listaEntregables) {
                cal.setTime(ent.getEntInicioDate());
                if (cal.get(Calendar.YEAR) < anio) {
                    return true;
                }
            }
        }

        List<Object> listasAcu = new ArrayList<>();
        listasAcu.add(listaAcumuladosPresupuesto);
        listasAcu.add(listaAcumuladosProductos);

        for (Object obj : listasAcu) {
            List<ReporteAcumuladoTO> listAcu = (List<ReporteAcumuladoTO>) obj;
            if (CollectionsUtils.isNotEmpty(listAcu)) {
                for (ReporteAcumuladoTO acu : listAcu) {
                    for (ReporteAcumuladoMesTO acuMes : acu.getMeses()) {
                        if (acuMes.getAnio() < anio) {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }

    public boolean contieneAnioMayor() {
        if (CollectionsUtils.isNotEmpty(listaEntregables)) {
            Calendar cal = new GregorianCalendar();
            for (Entregables ent : listaEntregables) {
                cal.setTime(ent.getEntFinDate());
                if (cal.get(Calendar.YEAR) > anio) {
                    return true;
                }
            }
        }

        List<Object> listasAcu = new ArrayList<>();
        listasAcu.add(listaAcumuladosPresupuesto);
        listasAcu.add(listaAcumuladosProductos);

        for (Object obj : listasAcu) {
            List<ReporteAcumuladoTO> listAcu = (List<ReporteAcumuladoTO>) obj;
            if (CollectionsUtils.isNotEmpty(listAcu)) {
                for (ReporteAcumuladoTO acu : listAcu) {
                    for (ReporteAcumuladoMesTO acuMes : acu.getMeses()) {
                        if (acuMes.getAnio() > anio) {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }

    public String retrocederAnio() {
        anio--;
        return null;
    }

    public String avanzarAnio() {
        anio++;
        return null;
    }

    public boolean displayEnt(Entregables ent) {
        return DatesUtils.isAnioEntreFechas(ent.getEntInicioDate(), ent.getEntFinDate(), anio);
    }

    public boolean displayEntHist(EntHistLineaBase entHistLB) {
        return DatesUtils.isAnioEntreFechas(entHistLB.getEnthistInicioLineaBaseDate(), entHistLB.getEnthistFinLineaBaseDate(), anio);
    }

    public boolean entAtrasado(Entregables ent) {
        if (ent != null) {
            Calendar cal = new GregorianCalendar();
            Calendar calFin = new GregorianCalendar();
            calFin.setTime(ent.getEntFinDate());
            Calendar calFinBase = null;
            if (ent.getEntFinLineaBaseDate() != null) {
                calFinBase = new GregorianCalendar();
                calFinBase.setTime(ent.getEntFinLineaBaseDate());
            }

            if (calFin.before(cal) || (calFinBase != null && calFin.after(calFinBase))) {
                return true;
            }
        }
        return false;
    }

    /**
     *
     * @param tipoPre 0-Por Moneda, 1-Por Adquisición
     */
    public String recargarAcumulados() {
        if (tipoPre == null || tipoPre == 0) {
            tipoPre = 1;
        } else {
            tipoPre = 0;
        }

        cargarTablaAcumuladosProductos(getFichaTO().getFichaFk());
        cargarTablaAcumuladosPresupuesto(getFichaTO().getFichaFk());
        return null;
    }

    private void cargarTablaAcumuladosProductos(Integer proyPk) {
        if (proyPk != null) {
            Integer orgPk = inicioMB.getOrganismo().getOrgPk();
            listaAcumuladosProductos.clear();

            // Productos
            List<Productos> productos = productosDelegate.obtenerProdPorProyPk(proyPk);
            Integer limiteAmarilloProd = Integer.valueOf(configuracionDelegate.obtenerCnfPorCodigoYOrg(ConfiguracionConstantes.PRODUCTO_INDICE_LIMITE_AMARILLO, orgPk).getCnfValor());
            Integer limiteRojoProd = Integer.valueOf(configuracionDelegate.obtenerCnfPorCodigoYOrg(ConfiguracionConstantes.PRODUCTO_INDICE_LIMITE_ROJO, orgPk).getCnfValor());

            for (Productos prod : productos) {
                ReporteAcumuladoTO acumulado = new ReporteAcumuladoTO();
                acumulado.setTitulo(Labels.getValue("reporte_proy_prod_titulo"));
                acumulado.setNombre(prod.getProdDesc());
                acumulado.setDescPlan(Labels.getValue("prod_resumen_plan"));
                acumulado.setDescReal(Labels.getValue("prod_resumen_valor"));

                if (CollectionsUtils.isNotEmpty(prod.getProdMesList())) {
                    for (ProdMes prodMes : prod.getProdMesList()) {
                        String colorR = productosDelegate.prodMesAcuRealColor(prodMes.getProdmesPk(), orgPk, limiteAmarilloProd, limiteRojoProd);
                        acumulado.setMes(prodMes.getProdmesAnio(), prodMes.getProdmesMes(), prodMes.getProdmesPk(), prodMes.getProdmesAcuPlan(), prodMes.getProdmesAcuReal(), colorR);
                    }
                }

                listaAcumuladosProductos.add(acumulado);
            }
        }
    }

    private void cargarTablaPresupuesto(Integer proyPk) {
        if (proyPk != null) {
            Integer orgPk = inicioMB.getOrganismo().getOrgPk();
            listaAcumuladosPresupuesto.clear();

            // Presupuesto
            presupuesto = presupuestoDelegate.obtenerPresupuestoPorProy(proyPk);

            Integer limiteAmarilloPre = Integer.valueOf(configuracionDelegate.obtenerCnfPorCodigoYOrg(ConfiguracionConstantes.COSTO_ACTUAL_LIMITE_AMARILLO, orgPk).getCnfValor());
            Integer limiteRojoPre = Integer.valueOf(configuracionDelegate.obtenerCnfPorCodigoYOrg(ConfiguracionConstantes.COSTO_ACTUAL_LIMITE_ROJO, orgPk).getCnfValor());

            Date inicio = presupuestoDelegate.obtenerPrimeraFechaPre(presupuesto);
            Date fin = presupuestoDelegate.obtenerUltimaFechaPre(presupuesto);

            if (tipoPre != null && tipoPre == 1) {
                //Presupuesto por Adquisición
                List<Adquisicion> listAdq = null;
                if (presupuesto != null) {
                    listAdq = adquisicionDelegate.obtenerAdquisicionPorPre(presupuesto.getPrePk());
                }
                if (listAdq != null) {
                    for (Adquisicion adq : listAdq) {
                        ReporteAcumuladoTO acumulado = new ReporteAcumuladoTO();
                        acumulado.setTitulo(Labels.getValue("reporte_proy_pre_titulo_adq"));
                        acumulado.setNombre(StringsUtils.concat(adq.getAdqNombre(), " - ", adq.getAdqMoneda().getMonSigno()));
                        acumulado.setDescPlan(Labels.getValue("presupuesto_resumen_pv"));
                        acumulado.setDescReal(Labels.getValue("presupuesto_resumen_ac"));

                        if (inicio != null && fin != null) {
                            Calendar calIni = new GregorianCalendar();
                            calIni.setTime(inicio);
                            Calendar calFin = new GregorianCalendar();
                            calFin.setTime(fin);

                            Calendar calAux = calIni;
                            Double pvMes = 0d;
                            Double acMes = 0d;

                            while (calAux.get(Calendar.YEAR) < calFin.get(Calendar.YEAR)
                                    || (calAux.get(Calendar.YEAR) == calFin.get(Calendar.YEAR)
                                    && calAux.get(Calendar.MONTH) <= calFin.get(Calendar.MONTH))) {
                                short anioP = (short) calAux.get(Calendar.YEAR);
                                short mesP = (short) (calAux.get(Calendar.MONTH) + 1);

                                pvMes += presupuestoDelegate.obtenerPVPorMoneda(presupuesto.getPrePk(), adq.getAdqMoneda(), anioP, mesP);
                                acMes += presupuestoDelegate.obtenerACPorMoneda(presupuesto.getPrePk(), adq.getAdqMoneda(), anioP, mesP);

                                String colorR = presupuestoDelegate.obtenerColorACMensual(pvMes, acMes, orgPk, limiteAmarilloPre, limiteRojoPre);

                                acumulado.setMes(anioP, mesP, null, pvMes, acMes, colorR);

                                calAux.add(Calendar.MONTH, 1);
                            }
                        }
                        listaAcumuladosPresupuesto.add(acumulado);
                    }
                }

            } else {
                //Presupuesto por Moneda
                List<Moneda> monedasPresupuesto = null;
                if (presupuesto != null) {
                    monedasPresupuesto = presupuestoDelegate.obtenerMonedasPresupuesto(presupuesto.getPrePk());
                }
                if (monedasPresupuesto != null) {
                    for (Moneda moneda : monedasPresupuesto) {
                        ReporteAcumuladoTO acumulado = new ReporteAcumuladoTO();
                        acumulado.setTitulo(Labels.getValue("reporte_proy_pre_titulo_mon"));
                        acumulado.setNombre(moneda.getMonSigno());
                        acumulado.setDescPlan(Labels.getValue("presupuesto_resumen_pv"));
                        acumulado.setDescReal(Labels.getValue("presupuesto_resumen_ac"));

                        if (inicio != null && fin != null) {
                            Calendar calIni = new GregorianCalendar();
                            calIni.setTime(inicio);
                            Calendar calFin = new GregorianCalendar();
                            calFin.setTime(fin);

                            Calendar calAux = calIni;
                            Double pvMes = 0d;
                            Double acMes = 0d;

                            while (calAux.get(Calendar.YEAR) < calFin.get(Calendar.YEAR)
                                    || (calAux.get(Calendar.YEAR) == calFin.get(Calendar.YEAR)
                                    && calAux.get(Calendar.MONTH) <= calFin.get(Calendar.MONTH))) {
                                short anioP = (short) calAux.get(Calendar.YEAR);
                                short mesP = (short) (calAux.get(Calendar.MONTH) + 1);

                                pvMes += presupuestoDelegate.obtenerPVPorMoneda(presupuesto.getPrePk(), moneda, anioP, mesP);
                                acMes += presupuestoDelegate.obtenerACPorMoneda(presupuesto.getPrePk(), moneda, anioP, mesP);

                                String colorR = presupuestoDelegate.obtenerColorACMensual(pvMes, acMes, orgPk, limiteAmarilloPre, limiteRojoPre);

                                acumulado.setMes(anioP, mesP, null, pvMes, acMes, colorR);

                                calAux.add(Calendar.MONTH, 1);
                            }
                        }
                        listaAcumuladosPresupuesto.add(acumulado);
                    }
                }
            }
        }
    }

    private void cargarTablaGastos(Integer proyPk) {
        if (proyPk != null) {
            Proyectos proy = proyectoDelegate.obtenerProyPorId(proyPk);

            Date inicio = null;
            Date fin = null;

            if (proy != null) {
                inicio = proy.getProyIndices().getProyindPeriodoInicio();
                fin = proy.getProyIndices().getProyindPeriodoFin();
            }

            if (inicio != null && fin != null) {

                Calendar calFin = new GregorianCalendar();
                calFin.setTime(fin);
                Calendar calAux = new GregorianCalendar();

                short anioH = 0;
                short mesH = 0;

                Double gastosAprob = 0d;
                Double gastosPend = 0d;

                List<Moneda> listMonedas = gastosDelegate.obtenerMonedasPorProy(proyPk);

                for (Moneda moneda : listMonedas) {
                    calAux.setTime(inicio);
                    ReporteAcumuladoTO acumulado = new ReporteAcumuladoTO();
                    acumulado.setTitulo(Labels.getValue("reporte_proy_gastos_titulo"));
                    acumulado.setNombre(moneda.getMonSigno());
                    acumulado.setDescPlan(Labels.getValue("revisionHoras_aprobado"));
                    acumulado.setDescReal(Labels.getValue("revisionHoras_pendiente"));

                    while (calAux.get(Calendar.YEAR) < calFin.get(Calendar.YEAR)
                            || (calAux.get(Calendar.YEAR) == calFin.get(Calendar.YEAR)
                            && calAux.get(Calendar.MONTH) <= calFin.get(Calendar.MONTH))) {
                        anioH = (short) calAux.get(Calendar.YEAR);
                        mesH = (short) (calAux.get(Calendar.MONTH) + 1);
                        gastosAprob = gastosDelegate.obtenerImpTotalGastosAprob(proyPk, moneda.getMonPk(), calAux.get(Calendar.MONTH) + 1, calAux.get(Calendar.YEAR));
                        gastosPend = gastosDelegate.obtenerImpTotalGastosPend(proyPk, moneda.getMonPk(), calAux.get(Calendar.MONTH) + 1, calAux.get(Calendar.YEAR));

                        acumulado.setMes(anioH, mesH, null, gastosAprob, gastosPend, ConstantesEstandares.COLOR_TRANSPARENT);
                        calAux.add(Calendar.MONTH, 1);
                    }

                    listaAcumuladosPresupuesto.add(acumulado);
                }
            }
        }
    }

    private void cargarTablaImpHoras(Integer proyPk) {
        if (proyPk != null) {
            Proyectos proy = proyectoDelegate.obtenerProyPorId(proyPk);

            Date inicio = null;
            Date fin = null;

            if (proy != null) {
                inicio = proy.getProyIndices().getProyindPeriodoInicio();
                fin = proy.getProyIndices().getProyindPeriodoFin();
            }

            if (inicio != null && fin != null) {

                Calendar calFin = new GregorianCalendar();
                calFin.setTime(fin);
                Calendar calAux = new GregorianCalendar();

                short anioH = 0;
                short mesH = 0;

                Double horasAprob = 0d;
                Double horasPend = 0d;

                List<Moneda> listMonedas = registrosHorasDelegate.obtenerMonedasPorProy(proyPk);

                for (Moneda moneda : listMonedas) {
                    calAux.setTime(inicio);
                    ReporteAcumuladoTO acumulado = new ReporteAcumuladoTO();
                    acumulado.setTitulo(Labels.getValue("reporte_proy_horas_titulo"));
                    acumulado.setNombre(moneda.getMonSigno());
                    acumulado.setDescPlan(Labels.getValue("revisionHoras_aprobado"));
                    acumulado.setDescReal(Labels.getValue("revisionHoras_pendiente"));

                    while (calAux.get(Calendar.YEAR) < calFin.get(Calendar.YEAR)
                            || (calAux.get(Calendar.YEAR) == calFin.get(Calendar.YEAR)
                            && calAux.get(Calendar.MONTH) <= calFin.get(Calendar.MONTH))) {
                        anioH = (short) calAux.get(Calendar.YEAR);
                        mesH = (short) (calAux.get(Calendar.MONTH) + 1);
                        horasAprob = registrosHorasDelegate.obtenerImporteTotalHsAprob(proyPk, moneda.getMonPk(), calAux.get(Calendar.MONTH) + 1, calAux.get(Calendar.YEAR));
                        horasPend = registrosHorasDelegate.obtenerImporteTotalHsPend(proyPk, moneda.getMonPk(), calAux.get(Calendar.MONTH) + 1, calAux.get(Calendar.YEAR));

                        acumulado.setMes(anioH, mesH, null, horasAprob, horasPend, ConstantesEstandares.COLOR_TRANSPARENT);
                        calAux.add(Calendar.MONTH, 1);
                    }

                    listaAcumuladosPresupuesto.add(acumulado);
                }
            }
        }
    }

    private void cargarTablaDevengado(Integer proyPk) {
        if (proyPk != null) {
            Proyectos proy = proyectoDelegate.obtenerProyPorId(proyPk);

            Date inicio = null;
            Date fin = null;

            if (proy != null) {
                inicio = proy.getProyIndices().getProyindPeriodoInicio();
                fin = proy.getProyIndices().getProyindPeriodoFin();
            }

            if (inicio != null && fin != null) {

                Calendar calFin = new GregorianCalendar();
                calFin.setTime(fin);
                Calendar calAux = new GregorianCalendar();

                short anioDev = 0;
                short mesDev = 0;

                Double horasAprob = 0d;
                Double horasPend = 0d;

                List<Adquisicion> listAdq = adquisicionDelegate.obtenerAdqDevPorProy(proyPk);

                for (Adquisicion adq : listAdq) {
                    calAux.setTime(inicio);
                    ReporteAcumuladoTO acumulado = new ReporteAcumuladoTO();
                    acumulado.setTitulo(Labels.getValue("reporte_proy_devengado_titulo"));
                    acumulado.setNombre(StringsUtils.concat(adq.getAdqNombre(), " ", adq.getAdqMoneda().getMonSigno()));
                    acumulado.setDescPlan(Labels.getValue("adquisicion_devengado_planificado"));
                    acumulado.setDescReal(Labels.getValue("adquisicion_devengado_real"));

                    while (calAux.get(Calendar.YEAR) < calFin.get(Calendar.YEAR)
                            || (calAux.get(Calendar.YEAR) == calFin.get(Calendar.YEAR)
                            && calAux.get(Calendar.MONTH) <= calFin.get(Calendar.MONTH))) {
                        anioDev = (short) calAux.get(Calendar.YEAR);
                        mesDev = (short) (calAux.get(Calendar.MONTH) + 1);
                        Devengado dev = devengadoDelegate.obtenerDevengado(adq.getAdqPk(), mesDev, anioDev);

                        if (dev != null) {
                            acumulado.setMes(anioDev, mesDev, null, dev.getDevPlan(), dev.getDevReal(), ConstantesEstandares.COLOR_TRANSPARENT);
                        }
                        calAux.add(Calendar.MONTH, 1);
                    }
                    listaAcumuladosPresupuesto.add(acumulado);
                }
            }
        }
    }

    private void cargarTablaAcumuladosPresupuesto(Integer proyPk) {
        cargarTablaPresupuesto(proyPk);
        cargarTablaGastos(proyPk);
        cargarTablaImpHoras(proyPk);
        cargarTablaDevengado(proyPk);
    }

    public ReporteAcumuladoMesTO getAcumuladoMesAnio(ReporteAcumuladoTO acu, int mes) {
        if (CollectionsUtils.isNotEmpty(acu.getMeses())) {
            for (ReporteAcumuladoMesTO acuMes : acu.getMeses()) {
                if (acuMes.getAnio() == this.anio && acuMes.getMes() == mes) {
                    return acuMes;
                }
            }
        }
        return null;
    }

    public String getAcumuladoMesAnioColor(ReporteAcumuladoTO acu, int mes) {
        ReporteAcumuladoMesTO acuMes = getAcumuladoMesAnio(acu, mes);
        return acuMes != null ? acuMes.getColorReal() : ConstantesEstandares.COLOR_TRANSPARENT;
    }

    public String semaforosProductos() {
        Integer orgPk = inicioMB.getOrganismo().getOrgPk();

        Integer limiteAmarilloProd = Integer.valueOf(configuracionDelegate.obtenerCnfPorCodigoYOrg(ConfiguracionConstantes.PRODUCTO_INDICE_LIMITE_AMARILLO, orgPk).getCnfValor());
        Integer limiteRojoProd = Integer.valueOf(configuracionDelegate.obtenerCnfPorCodigoYOrg(ConfiguracionConstantes.PRODUCTO_INDICE_LIMITE_ROJO, orgPk).getCnfValor());

        StringBuilder result = new StringBuilder();
        result.append("<b>Productos:</b><br/>")
                .append("<input class=\"botonSemaforo-dis\" type=\"submit\" value=\"\" style=\"background-color: " + ConstantesEstandares.SEMAFORO_AZUL + ";\" disabled=\"disabled\">")
                .append("Azul: Real es mayor o igual al total Planificado.")
                .append("<input class=\"botonSemaforo-dis\" type=\"submit\" value=\"\" style=\"background-color: " + ConstantesEstandares.SEMAFORO_VERDE + ";\" disabled=\"disabled\">")
                .append(String.format("Verde: Real es menor al total Planificado y mayor a %s%%.", (100 - limiteAmarilloProd)))
                .append("<input class=\"botonSemaforo-dis\" type=\"submit\" value=\"\" style=\"background-color: " + ConstantesEstandares.SEMAFORO_AMARILLO + ";\" disabled=\"disabled\">")
                .append(String.format("Amarillo: Real es menor o igual a %s%% y mayor a %s%%.", (100 - limiteAmarilloProd), (100 - limiteRojoProd)))
                .append("<input class=\"botonSemaforo-dis\" type=\"submit\" value=\"\" style=\"background-color: " + ConstantesEstandares.SEMAFORO_ROJO + ";\" disabled=\"disabled\">")
                .append(String.format("Rojo: Real es menor a %s%%.<br/>", (100 - limiteRojoProd)));

        return result.toString();
    }

    public String semaforosPresupuesto() {
        Integer orgPk = inicioMB.getOrganismo().getOrgPk();

        Integer limiteAmarilloPre = Integer.valueOf(configuracionDelegate.obtenerCnfPorCodigoYOrg(ConfiguracionConstantes.COSTO_ACTUAL_LIMITE_AMARILLO, orgPk).getCnfValor());
        Integer limiteRojoPre = Integer.valueOf(configuracionDelegate.obtenerCnfPorCodigoYOrg(ConfiguracionConstantes.COSTO_ACTUAL_LIMITE_ROJO, orgPk).getCnfValor());

        StringBuilder result = new StringBuilder();
        result.append("<b>Presupuesto:</b><br/>")
                .append("<input class=\"botonSemaforo-dis\" type=\"submit\" value=\"\" style=\"background-color: " + ConstantesEstandares.SEMAFORO_VERDE + ";\" disabled=\"disabled\">")
                .append(String.format("Verde: Real es mayor o igual a %s%% y menor o igual a %s%%.", (100 - limiteAmarilloPre), (100 + limiteAmarilloPre)))
                .append("<input class=\"botonSemaforo-dis\" type=\"submit\" value=\"\" style=\"background-color: " + ConstantesEstandares.SEMAFORO_AMARILLO + ";\" disabled=\"disabled\">")
                .append(String.format("Amarillo: Real es mayor o igual a %s%% y menor o igual a %s%%.", (100 - limiteRojoPre), (100 + limiteRojoPre)))
                .append("<input class=\"botonSemaforo-dis\" type=\"submit\" value=\"\" style=\"background-color: " + ConstantesEstandares.SEMAFORO_NARANJA + ";\" disabled=\"disabled\">")
                .append(String.format("Naranja: Real es menor a %s%%.", (100 - limiteRojoPre)))
                .append("<input class=\"botonSemaforo-dis\" type=\"submit\" value=\"\" style=\"background-color: " + ConstantesEstandares.SEMAFORO_ROJO + ";\" disabled=\"disabled\">")
                .append(String.format("Rojo: Real es mayor a %s%%.<br/>", (100 + limiteRojoPre)));

        return result.toString();
    }

    public String coloresGantt() {
        StringBuilder result = new StringBuilder();
        result
                .append("<b>Referencia:</b><br/>")
                .append("<input class=\"botonSemaforo-dis\" type=\"submit\" value=\"\" style=\"background-color: " + ConstantesEstandares.SEMAFORO_GRIS + ";\" disabled=\"disabled\">")
                .append("Gris: Entregable padre.")
                .append("<input class=\"botonSemaforo-dis\" type=\"submit\" value=\"\" style=\"background-color: " + ConstantesEstandares.SEMAFORO_AZUL + ";\" disabled=\"disabled\">")
                .append("Azul: Porcentaje de avance.")
                .append("<input class=\"botonSemaforo-dis\" type=\"submit\" value=\"\" style=\"background-color: " + ConstantesEstandares.SEMAFORO_VERDE + ";\" disabled=\"disabled\">")
                .append("Verde: Fecha de finalización posterior al día de hoy.")
                .append("<input class=\"botonSemaforo-dis\" type=\"submit\" value=\"\" style=\"background-color: " + ConstantesEstandares.SEMAFORO_ROJO + ";\" disabled=\"disabled\">")
                .append("Rojo: Fecha de finalización anterior al día de hoy.<br/>");

        return result.toString();
    }
}
