package com.sofis.business.ejbs;

import com.sofis.business.properties.LabelsEJB;
import com.sofis.data.daos.ProgramasDAO;
import com.sofis.data.daos.ProyectosDAO;
import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.data.Adquisicion;
import com.sofis.entities.data.AreasTags;
import com.sofis.entities.data.Devengado;
import com.sofis.entities.data.Estados;
import com.sofis.entities.data.Moneda;
import com.sofis.entities.data.Presupuesto;
import com.sofis.entities.data.Programas;
import com.sofis.entities.data.Proyectos;
import com.sofis.entities.data.SsUsuario;
import com.sofis.entities.enums.ReportePreColumnasEnum;
import com.sofis.entities.tipos.FiltroReporteTO;
import com.sofis.exceptions.BusinessException;
import com.sofis.generico.utils.generalutils.StringsUtils;
import com.sofis.persistence.dao.exceptions.DAOGeneralException;
import com.sofis.sofisform.to.AND_TO;
import com.sofis.sofisform.to.CriteriaTO;
import com.sofis.sofisform.to.MatchCriteriaTO;
import com.sofis.sofisform.to.OR_TO;
import com.sofis.utils.CriteriaTOUtils;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.inject.Named;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

/**
 *
 * @author Usuario
 */
@Named
@Stateless(name = "ReportePresupuestoBean")
@LocalBean
public class ReportePresupuestoBean {

    @PersistenceContext(unitName = ConstanteApp.PERSISTENCE_CONTEXT_UNIT_NAME)
    private EntityManager em;
    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);

    @Inject
    private EstadosBean estadosBean;
    @Inject
    private AdquisicionBean adquisicionBean;
    @Inject
    private PresupuestoBean presupuestoBean;
    @Inject
    private MonedaBean monedaBean;
    @Inject
    private RegistrosHorasBean registrosHorasBean;
    @Inject
    private GastosBean gastosBean;
    @Inject
    private DevengadoBean devengadoBean;
    @Inject
    private ProyectosBean proyectosBean;

    public byte[] generarReportePlanillaPorFiltro(Integer orgPk, FiltroReporteTO filtro, SsUsuario usuario) {
        //Proyectos obtenidos por medio del filtro.
        List<Proyectos> listProy = buscarProyectosPorFiltro(filtro, orgPk, usuario);
        System.out.println("## listProy:" + listProy != null ? listProy.size() : "null");

        int anio = filtro.getAnio() != null ? filtro.getAnio() : new GregorianCalendar().get(Calendar.YEAR);

        Map<Integer, Map<Integer, Object>> lineas = new HashMap<>();

        String hojaName = "";
        if (filtro.getTipoReporte().equals(1)) {
            hojaName = LabelsEJB.getValue("rep_pre_xls_hoja_moneda");
        } else if (filtro.getTipoReporte().equals(2)) {
            hojaName = LabelsEJB.getValue("rep_pre_xls_hoja_adquisicion");
        }

        int filaNro = -1;

        Map<Integer, Object> lineaTitulo = new HashMap<>();
        lineaTitulo.put(0, StringsUtils.concat(LabelsEJB.getValue("rep_pre_xls_titulo"), ": ", hojaName));
        lineas.put(++filaNro, lineaTitulo);

        ++filaNro;
        //Fila titulos columnas
        Map<Integer, Object> lineaTitulosCol = new HashMap<>();
        lineaTitulosCol.put(ReportePreColumnasEnum.ID_PROG.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_id"));
        lineaTitulosCol.put(ReportePreColumnasEnum.PROG.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_prog"));
        lineaTitulosCol.put(ReportePreColumnasEnum.ID_PROY.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_id"));
        lineaTitulosCol.put(ReportePreColumnasEnum.PROY.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_proy"));
        lineaTitulosCol.put(ReportePreColumnasEnum.AREA.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_area"));
        lineaTitulosCol.put(ReportePreColumnasEnum.GERENTE.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_gerente"));
        lineaTitulosCol.put(ReportePreColumnasEnum.ESTADO.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_estado"));
        lineaTitulosCol.put(ReportePreColumnasEnum.PROCEDIMIENTO.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_proc"));
        lineaTitulosCol.put(ReportePreColumnasEnum.PROC_GRP.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_grp"));
        lineaTitulosCol.put(ReportePreColumnasEnum.FUENTE.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_fuente"));
        lineaTitulosCol.put(ReportePreColumnasEnum.PROVEEDOR.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_prov"));
        lineaTitulosCol.put(ReportePreColumnasEnum.CONCEPTO.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_concepto"));
        lineaTitulosCol.put(ReportePreColumnasEnum.MONEDA.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_moneda"));
        for (int mes = 1; mes <= 12; mes++) {
            String mesName = StringsUtils.concat("date_mes_abreviado_", String.valueOf(mes));
            lineaTitulosCol.put(obtenerCeldaOrdinalMes(mes), LabelsEJB.getValue(mesName));
        }
        lineaTitulosCol.put(ReportePreColumnasEnum.TOTAL.ordinal(), LabelsEJB.getValue("rep_pre_xls_col_total"));
        lineas.put(++filaNro, lineaTitulosCol);

        //Fila detalles
        for (Proyectos proy : listProy) {
//            fila = hoja.createRow(++filaNro);
            Map<Integer, Object> celdasProy = new HashMap<>();
            String progPk = proy.getProyProgFk() != null ? proy.getProyProgFk().getProgPk().toString() : "";
            celdasProy.put(ReportePreColumnasEnum.ID_PROG.ordinal(), progPk);
            String progName = proy.getProyProgFk() != null ? proy.getProyProgFk().getProgNombre() : "";
            celdasProy.put(ReportePreColumnasEnum.PROG.ordinal(), progName);
            celdasProy.put(ReportePreColumnasEnum.ID_PROY.ordinal(), proy.getProyPk());
            celdasProy.put(ReportePreColumnasEnum.PROY.ordinal(), proy.getProyNombre());
            String area = proy.getProyAreaFk() != null ? proy.getProyAreaFk().getAreaNombre() : "";
            celdasProy.put(ReportePreColumnasEnum.AREA.ordinal(), area);
            String gerente = proy.getProyUsrGerenteFk() != null ? proy.getProyUsrGerenteFk().getUsuNombreApellido() : "";
            celdasProy.put(ReportePreColumnasEnum.GERENTE.ordinal(), gerente);
            celdasProy.put(ReportePreColumnasEnum.ESTADO.ordinal(), estadosBean.estadoStr(proy.getProyEstFk()));
            celdasProy.put(ReportePreColumnasEnum.PROCEDIMIENTO.ordinal(), "");
            celdasProy.put(ReportePreColumnasEnum.PROC_GRP.ordinal(), "");
            celdasProy.put(ReportePreColumnasEnum.FUENTE.ordinal(), "");
            celdasProy.put(ReportePreColumnasEnum.PROVEEDOR.ordinal(), "");

            Presupuesto pre = proy.getProyPreFk();

            //Por Adq. o Moneda
            if (filtro.isConcepto(1)
                    && pre != null) {
                Calendar calNow = new GregorianCalendar();

                if (filtro.getTipoReporte().equals(1)) {
                    //Por Moneda
                    List<Moneda> listMon;
                    if (filtro.getMoneda() != null) {
                        listMon = new ArrayList<>();
                        listMon.add(filtro.getMoneda());
                    } else {
                        listMon = presupuestoBean.obtenerMonedasPresupuesto(pre.getPrePk());
                    }

                    for (Moneda mon : listMon) {
                        //0-Planificado, 1-Real, 2-Proyectado
                        for (int i = 0; i < 3; i++) {
                            Map<Integer, Object> celdasAdqMon = new HashMap<>();
                            celdasAdqMon.putAll(celdasProy);

                            celdasAdqMon.put(ReportePreColumnasEnum.CONCEPTO.ordinal(), conceptoStr(1));
                            celdasAdqMon.put(ReportePreColumnasEnum.MONEDA.ordinal(), mon.getMonSigno());
                            celdasAdqMon.put(ReportePreColumnasEnum.TIPO_LINEA.ordinal(), nombreTipoLinea(i + 1));

                            double total = 0;
                            Double valorMes = 0D;
                            for (int mes = 1; mes <= 12; mes++) {
                                valorMes = obtenerValorPrePorMesAnio(i, pre.getPrePk(), null, mon, mes, anio);
                                if (i == 1 && mes > calNow.get(Calendar.MONTH) + 1) {
                                    valorMes = 0D;
                                } else {
                                    total = valorMes != null ? valorMes : total;
                                }
                                celdasAdqMon.put(obtenerCeldaOrdinalMes(mes), valorMes);
                            }

                            celdasAdqMon.put(ReportePreColumnasEnum.TOTAL.ordinal(), total);

                            lineas.put(++filaNro, celdasAdqMon);
                        }
                    }

                } else if (filtro.getTipoReporte().equals(2)) {
                    //Por Adquisici√≥n
                    List<Adquisicion> listAdq = adquisicionBean.obtenerAdquisicionPorPre(pre.getPrePk());

                    for (Adquisicion adq : listAdq) {
                        //0-Planificado, 1-Real, 2-Proyectado
                        for (int i = 0; i < 3; i++) {
                            Map<Integer, Object> celdasAdqMon = new HashMap<>();
                            celdasAdqMon.putAll(celdasProy);

                            celdasAdqMon.put(ReportePreColumnasEnum.PROCEDIMIENTO.ordinal(), adq.getAdqProcCompra());
                            celdasAdqMon.put(ReportePreColumnasEnum.PROC_GRP.ordinal(), adq.getAdqProcCompraGrp());
                            celdasAdqMon.put(ReportePreColumnasEnum.FUENTE.ordinal(), adq.getAdqFuente() != null ? adq.getAdqFuente().getFueNombre() : "");
                            celdasAdqMon.put(ReportePreColumnasEnum.PROVEEDOR.ordinal(), adq.getAdqProvOrga() != null ? adq.getAdqProvOrga().getOrgaNombre() : "");

                            celdasAdqMon.put(ReportePreColumnasEnum.CONCEPTO.ordinal(), conceptoStr(1));
                            celdasAdqMon.put(ReportePreColumnasEnum.MONEDA.ordinal(), adq.getAdqMoneda().getMonSigno());
                            celdasAdqMon.put(ReportePreColumnasEnum.TIPO_LINEA.ordinal(), nombreTipoLinea(i + 1));

                            double total = 0;
                            for (int mes = 1; mes <= 12; mes++) {
                                Double valorMes = obtenerValorPrePorMesAnio(i, pre.getPrePk(), adq.getAdqPk(), adq.getAdqMoneda(), mes, anio);
                                if (i == 1 && mes > calNow.get(Calendar.MONTH) + 1) {
                                    valorMes = 0D;
                                } else {
                                    total = valorMes != null ? valorMes : total;
                                }
                                celdasAdqMon.put(obtenerCeldaOrdinalMes(mes), valorMes);
                            }

                            celdasAdqMon.put(ReportePreColumnasEnum.TOTAL.ordinal(), total);

                            lineas.put(++filaNro, celdasAdqMon);
                        }
                    }
                }
            }

            //Devengado
            if (filtro.isConcepto(2)) {
                List<Adquisicion> listAdq = adquisicionBean.obtenerAdquisicionPorPre(pre.getPrePk());

                for (Adquisicion adq : listAdq) {
                    //0-Planificado, 1-Real
                    for (int i = 0; i < 2; i++) {
                        Map<Integer, Object> celdasAdqMon = new HashMap<>();
                        celdasAdqMon.putAll(celdasProy);

                        celdasAdqMon.put(ReportePreColumnasEnum.PROCEDIMIENTO.ordinal(), adq.getAdqProcCompra());
                        celdasAdqMon.put(ReportePreColumnasEnum.PROC_GRP.ordinal(), adq.getAdqProcCompraGrp());
                        celdasAdqMon.put(ReportePreColumnasEnum.FUENTE.ordinal(), adq.getAdqFuente() != null ? adq.getAdqFuente().getFueNombre() : "");
                        celdasAdqMon.put(ReportePreColumnasEnum.PROVEEDOR.ordinal(), adq.getAdqProvOrga() != null ? adq.getAdqProvOrga().getOrgaNombre() : "");

                        celdasAdqMon.put(ReportePreColumnasEnum.CONCEPTO.ordinal(), conceptoStr(1));
                        celdasAdqMon.put(ReportePreColumnasEnum.MONEDA.ordinal(), adq.getAdqMoneda().getMonSigno());
                        celdasAdqMon.put(ReportePreColumnasEnum.TIPO_LINEA.ordinal(), nombreTipoLinea(i + 1));

                        double total = 0;
                        for (int mes = 1; mes <= 12; mes++) {
                            Devengado dev = devengadoBean.obtenerDevengado(adq.getAdqPk(), (short) mes, (short) anio);
                            if (dev != null) {
                                Double valorMes = i == 0 ? dev.getDevPlan() : dev.getDevReal();
                                celdasAdqMon.put(obtenerCeldaOrdinalMes(mes), valorMes);
                                total = valorMes != null ? valorMes : total;
                            }
                        }

                        celdasAdqMon.put(ReportePreColumnasEnum.TOTAL.ordinal(), total);

                        lineas.put(++filaNro, celdasAdqMon);
                    }
                }
            }

            //Horas
            if (filtro.isConcepto(3)) {
                List<Moneda> listMon;
                if (filtro.getMoneda() != null) {
                    listMon = new ArrayList<>();
                    listMon.add(filtro.getMoneda());
                } else {
                    listMon = monedaBean.obtenerMonedas();
                }

                for (Moneda mon : listMon) {
                    Map<Integer, Object> celdasAdqMon = new HashMap<>();
                    celdasAdqMon.putAll(celdasProy);

                    celdasAdqMon.put(ReportePreColumnasEnum.CONCEPTO.ordinal(), conceptoStr(2));
                    celdasAdqMon.put(ReportePreColumnasEnum.MONEDA.ordinal(), mon.getMonSigno());
                    celdasAdqMon.put(ReportePreColumnasEnum.TIPO_LINEA.ordinal(), LabelsEJB.getValue("rep_pre_tipo_aprobado"));

                    double total = 0;
                    for (int mes = 1; mes <= 12; mes++) {
                        Double valorMes = registrosHorasBean.obtenerImporteTotalHsAprob(proy.getProyPk(), mon.getMonPk(), mes, anio);
                        celdasAdqMon.put(obtenerCeldaOrdinalMes(mes), valorMes);
                        total = valorMes != null ? valorMes : total;
                    }

                    celdasAdqMon.put(ReportePreColumnasEnum.TOTAL.ordinal(), total);

                    lineas.put(++filaNro, celdasAdqMon);
                }
            }

            //Gastos
            if (filtro.isConcepto(4)) {
                List<Moneda> listMon;
                if (filtro.getMoneda() != null) {
                    listMon = new ArrayList<>();
                    listMon.add(filtro.getMoneda());
                } else {
                    listMon = monedaBean.obtenerMonedas();
                }

                for (Moneda mon : listMon) {
                    Map<Integer, Object> celdasAdqMon = new HashMap<>();
                    celdasAdqMon.putAll(celdasProy);

                    celdasAdqMon.put(ReportePreColumnasEnum.CONCEPTO.ordinal(), conceptoStr(3));
                    celdasAdqMon.put(ReportePreColumnasEnum.MONEDA.ordinal(), mon.getMonSigno());
                    celdasAdqMon.put(ReportePreColumnasEnum.TIPO_LINEA.ordinal(), LabelsEJB.getValue("rep_pre_tipo_aprobado"));

                    double total = 0;
                    for (int mes = 1; mes <= 12; mes++) {
                        Double valorMes = gastosBean.obtenerImpTotalGastosPorProy(proy.getProyPk(), mon.getMonPk(), mes, anio, Boolean.TRUE);
                        celdasAdqMon.put(obtenerCeldaOrdinalMes(mes), valorMes);
                        total = valorMes != null ? valorMes : total;
                    }

                    celdasAdqMon.put(ReportePreColumnasEnum.TOTAL.ordinal(), total);

                    lineas.put(++filaNro, celdasAdqMon);
                }
            }
        }

        HSSFWorkbook planilla = new HSSFWorkbook();
        HSSFSheet hoja = planilla.createSheet(hojaName);

        try {
            hoja = generarReporteXLS(hoja, lineas);

            ByteArrayOutputStream bos = new ByteArrayOutputStream();

            planilla.write(bos);
            return bos.toByteArray();

        } catch (IOException iOException) {
            logger.log(Level.SEVERE, null, iOException);
            BusinessException be = new BusinessException();
            be.addError("Error al generar el Excel.");
            throw be;
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
            BusinessException be = new BusinessException();
            be.addError("Error al generar el Excel.");
            throw be;
        }
    }

    /**
     * Retorna el nombre de la columna Concepto. 1-Facturas, 2-Horas, 3-Gastos,
     * 4-Devengado.
     *
     * @param i
     * @return String
     */
    private String conceptoStr(int i) {
        switch (i) {
            case 1:
                return LabelsEJB.getValue("rep_pre_concepto_pre");
            case 2:
                return LabelsEJB.getValue("rep_pre_concepto_horas");
            case 3:
                return LabelsEJB.getValue("rep_pre_concepto_gastos");
            case 4:
                return LabelsEJB.getValue("rep_pre_concepto_devengado");
            default:
                return "";
        }
    }

    /**
     * Retorna el nombre del tipo de linea. 1-Plan, 2-Real, 3-Proyectado,
     * 4-Aprobado
     *
     * @param i
     * @return String
     */
    private String nombreTipoLinea(int i) {
        switch (i) {
            case 1:
                return LabelsEJB.getValue("rep_pre_tipo_plan");
            case 2:
                return LabelsEJB.getValue("rep_pre_tipo_real");
            case 3:
                return LabelsEJB.getValue("rep_pre_tipo_proyectado");
            default:
                return "";
        }
    }

    private Double obtenerValorPrePorMesAnio(int tipoLinea, Integer prePk, Integer adqPk, Moneda mon, int mes, int anio) {
        switch (tipoLinea) {
            case 0:
                return presupuestoBean.obtenerPVPorMonedaAcu(prePk, adqPk, mon, anio, mes);
            case 1:
                return presupuestoBean.obtenerACPorMonedaAcu(prePk, adqPk, mon, anio, mes);
            case 2:
                return presupuestoBean.obtenerPRPorMonedaAcu(prePk, adqPk, mon, anio, mes);
            default:
                return null;
        }
    }

    /**
     * Retorna la columna para el mes indicado.
     *
     * @param mes
     * @return Integer
     */
    private Integer obtenerCeldaOrdinalMes(int mes) {
        switch (mes) {
            case 1:
                return ReportePreColumnasEnum.ENERO.ordinal();
            case 2:
                return ReportePreColumnasEnum.FEBRERO.ordinal();
            case 3:
                return ReportePreColumnasEnum.MARZO.ordinal();
            case 4:
                return ReportePreColumnasEnum.ABRIL.ordinal();
            case 5:
                return ReportePreColumnasEnum.MAYO.ordinal();
            case 6:
                return ReportePreColumnasEnum.JUNIO.ordinal();
            case 7:
                return ReportePreColumnasEnum.JULIO.ordinal();
            case 8:
                return ReportePreColumnasEnum.AGOSTO.ordinal();
            case 9:
                return ReportePreColumnasEnum.SETIEMBRE.ordinal();
            case 10:
                return ReportePreColumnasEnum.OCTUBRE.ordinal();
            case 11:
                return ReportePreColumnasEnum.NOVIEMBRE.ordinal();
            case 12:
                return ReportePreColumnasEnum.DICIEMBRE.ordinal();
            default:
                return null;
        }

    }

    private HSSFSheet generarReporteXLS(HSSFSheet hoja, Map<Integer, Map<Integer, Object>> lineas) throws Exception {

        Set<Integer> lineasKey = lineas.keySet();
        for (Integer key : lineasKey) {
            HSSFRow fila = hoja.createRow(key);
            Map<Integer, Object> linea = lineas.get(key);

            Set<Integer> colKey = linea.keySet();
            for (Integer keyCol : colKey) {
                HSSFCell celda = fila.createCell(keyCol);
                Object obj = linea.get(keyCol);

                if (obj instanceof Date) {
                    celda.setCellValue((Date) obj);
                } else if (obj instanceof Boolean) {
                    celda.setCellValue((Boolean) obj);
                } else if (obj instanceof String) {
                    celda.setCellValue((String) obj);
                } else if (obj instanceof Double) {
                    celda.setCellValue((Double) obj);
                } else if (obj instanceof Integer) {
                    celda.setCellValue((Integer) obj);
                } else if (obj instanceof Long) {
                    celda.setCellValue((Integer) obj);
                }
            }
        }

        return hoja;
    }

    private List<Proyectos> buscarProyectosPorFiltro(FiltroReporteTO filtro, Integer orgPk, SsUsuario usuario) {
        Set<Proyectos> setProyectos = new HashSet<>();

        List<Programas> programas = buscarProgPorFiltro(orgPk, usuario, filtro);
        if (programas != null) {
            for (Programas prog : programas) {
                setProyectos.addAll(proyectosBean.obtenerProyPorProgId(prog.getProgPk()));
            }
        }

        List<Proyectos> proyectos = buscarProyPorFiltro(orgPk, usuario, filtro);
        if (proyectos != null) {
            setProyectos.addAll(proyectos);
        }

        return new ArrayList<>(setProyectos);
    }

    private List<Programas> buscarProgPorFiltro(Integer orgPk, SsUsuario usuario, FiltroReporteTO filtro) {
        List<CriteriaTO> criterios = new ArrayList<>();

        //Activo
        MatchCriteriaTO activo = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "activo", !Boolean.FALSE);
        criterios.add(activo);

        // Organismo
        MatchCriteriaTO orga = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progOrgFk.orgPk", orgPk);
        criterios.add(orga);

        // Permisos de Lectura
        if (!usuario.isUsuarioPMOT(orgPk)
                && usuario.getUsuArea(orgPk) != null) {
            CriteriaTO UsuPM = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NOT_EQUALS, "progUsrGerenteFk.usuId", usuario.getUsuId());
            CriteriaTO UsuAdjunto = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NOT_EQUALS, "progUsrAdjuntoFk.usuId", usuario.getUsuId());
            CriteriaTO UsuSponsor = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NOT_EQUALS, "progUsrSponsorFk.usuId", usuario.getUsuId());
            CriteriaTO UsuPMOF = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NOT_EQUALS, "progUsrPmofedFk.usuId", usuario.getUsuId());
            CriteriaTO criteriaUsu = CriteriaTOUtils.createORTO(UsuPM, UsuAdjunto, UsuSponsor, UsuPMOF);
            criterios.add(criteriaUsu);

            CriteriaTO proyAreaPermiso1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EMPTY, "areasRestringidasSet", 1);
            CriteriaTO proyAreaPermiso2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NOT_EQUALS, "areasRestringidasSet.areaPk", usuario.getUsuArea(orgPk).getAreaPk());
            CriteriaTO orPermiso = CriteriaTOUtils.createORTO(proyAreaPermiso1, proyAreaPermiso2);
            criterios.add(orPermiso);
        }

        // Nombre
        if (!StringsUtils.isEmpty(filtro.getNombre())) {
            MatchCriteriaTO crit = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "progNombre", filtro.getNombre());
            criterios.add(crit);
        }

        // Estados Filtro
        List<Object> estados;
        if (filtro.getEstados() != null && filtro.getEstados().size() > 0) {
            estados = filtro.getEstados();
        } else {
            estados = new ArrayList<>();
            estados.add(Estados.ESTADOS.INICIO.estado_id);
            estados.add(Estados.ESTADOS.PLANIFICACION.estado_id);
            estados.add(Estados.ESTADOS.EJECUCION.estado_id);
            estados.add(Estados.ESTADOS.FINALIZADO.estado_id);
        }

        // Estados
        if (estados != null) {
            List<CriteriaTO> estadosCriteria = new ArrayList<>();
            for (Object estadoId : estados) {
                Integer estadoIdInt = Integer.parseInt(estadoId + "");
                MatchCriteriaTO estado2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progEstFk.estPk", estadoIdInt);
                estadosCriteria.add(estado2);
            }

            if (estadosCriteria.size() > 1) {
                criterios.add(CriteriaTOUtils.createORTO(estadosCriteria.toArray(new CriteriaTO[]{})));
            } else if (!estadosCriteria.isEmpty()) {
                criterios.add(estadosCriteria.get(0));
            }
        }

        // Area
        if (filtro.getArea() != null) {
            MatchCriteriaTO area = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progAreaFk.areaPk", filtro.getArea());
            criterios.add(area);
        }

        // Gerente o Adjunto
        if (filtro.getGerenteAdjunto() != null) {
            MatchCriteriaTO gerente = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progUsrGerenteFk.usuId", filtro.getGerenteAdjunto());
            MatchCriteriaTO adjunto = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progUsrAdjuntoFk.usuId", filtro.getGerenteAdjunto());
            OR_TO orCriteria = CriteriaTOUtils.createORTO(gerente, adjunto);
            criterios.add(orCriteria);
        }

        // Sponsor
        if (filtro.getSponsor() != null) {
            MatchCriteriaTO crit = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progUsrSponsorFk.usuId", filtro.getSponsor());
            criterios.add(crit);
        }

        // PMO Federada
        if (filtro.getPmof() != null) {
            MatchCriteriaTO crit = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progUsrPmofedFk.usuId", filtro.getPmof());
            criterios.add(crit);
        }

        //Area tematica
        if (filtro.getAreasTematicas() != null) {
            List<CriteriaTO> areaTemCriteria = new ArrayList<>();
            for (AreasTags areaTem : filtro.getAreasTematicas()) {
                MatchCriteriaTO areaTag = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "areasTematicasSet.arastagPk", areaTem.getArastagPk());
                areaTemCriteria.add(areaTag);
            }

            if (areaTemCriteria.size() > 1) {
                criterios.add(CriteriaTOUtils.createORTO(areaTemCriteria.toArray(new CriteriaTO[]{})));
            } else {
                criterios.add(areaTemCriteria.get(0));
            }
        }

        CriteriaTO criteria;
        if (criterios.size() == 1) {
            criteria = criterios.get(0);
        } else {
            criteria = CriteriaTOUtils.createANDTO(criterios.toArray(new CriteriaTO[0]));
        }

        ProgramasDAO progDao = new ProgramasDAO(em);
        List<Programas> programasResult = null;
        try {
            programasResult = progDao.findEntityByCriteria(Programas.class, criteria, new String[]{}, new boolean[]{}, null, null);
        } catch (DAOGeneralException ex) {
            logger.log(Level.SEVERE, null, ex);
        }

        return programasResult;
    }

    private List<Proyectos> buscarProyPorFiltro(Integer orgPk, SsUsuario usuario, FiltroReporteTO filtro) {

        List<CriteriaTO> criterios = new ArrayList<>();

        // Organismo
        MatchCriteriaTO proyOrga = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyOrgFk.orgPk", orgPk);
        criterios.add(proyOrga);

        // Activo
        MatchCriteriaTO activo = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "activo", !Boolean.FALSE);
        criterios.add(activo);

        // Permisos de Lectura
        if (!usuario.isUsuarioPMOT(orgPk)) {
            CriteriaTO proyUsuPM = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NOT_EQUALS, "proyUsrGerenteFk.usuId", usuario.getUsuId());
            CriteriaTO proyUsuAdjunto = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NOT_EQUALS, "proyUsrAdjuntoFk.usuId", usuario.getUsuId());
            CriteriaTO proyUsuSponsor = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NOT_EQUALS, "proyUsrSponsorFk.usuId", usuario.getUsuId());
            CriteriaTO proyUsuPMOF = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NOT_EQUALS, "proyUsrPmofedFk.usuId", usuario.getUsuId());
            CriteriaTO criteriaUsu = CriteriaTOUtils.createORTO(proyUsuPM, proyUsuAdjunto, proyUsuSponsor, proyUsuPMOF);

            CriteriaTO proyAreaPermiso1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EMPTY, "areasRestringidasSet", 1);
            CriteriaTO proyAreaPermiso2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NOT_MEMBER_OF, "areasRestringidasSet", usuario.getUsuArea(orgPk));
            CriteriaTO orProyPermiso = CriteriaTOUtils.createORTO(proyAreaPermiso1, proyAreaPermiso2);

            criterios.add(new AND_TO(criteriaUsu, orProyPermiso));
        }

        // Nombre
        if (!StringsUtils.isEmpty(filtro.getNombre())) {
            MatchCriteriaTO nombre1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "proyNombre", filtro.getNombre());
            criterios.add(nombre1);
        }

        // Estados Filtro
        List<Object> estados;
        if (filtro.getEstados() != null && filtro.getEstados().size() > 0) {
            estados = filtro.getEstados();
        } else {
            estados = new ArrayList<>();
            estados.add(Estados.ESTADOS.INICIO.estado_id);
            estados.add(Estados.ESTADOS.PLANIFICACION.estado_id);
            estados.add(Estados.ESTADOS.EJECUCION.estado_id);
            estados.add(Estados.ESTADOS.FINALIZADO.estado_id);
        }

        // Estados
        if (estados != null) {
            List<CriteriaTO> estadosCriteria = new ArrayList<>();
            for (Object estadoId : estados) {
                Integer estadoIdInt = Integer.parseInt(estadoId + "");
                MatchCriteriaTO estado2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyEstFk.estPk", estadoIdInt);
                estadosCriteria.add(estado2);
            }

            if (estadosCriteria.size() > 1) {
                criterios.add(CriteriaTOUtils.createORTO(estadosCriteria.toArray(new CriteriaTO[]{})));
            } else if (!estadosCriteria.isEmpty()) {
                criterios.add(estadosCriteria.get(0));
            }
        }

        //procedimiento; 
        if (!StringsUtils.isEmpty(filtro.getProcedimiento())) {
            MatchCriteriaTO proc = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyPreFk.adquisicionSet.adqProcCompra", filtro.getProcedimiento());
            criterios.add(proc);
        }

        //procedimientoGRP;
        if (!StringsUtils.isEmpty(filtro.getProcedimientoGRP())) {
            MatchCriteriaTO proc = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyPreFk.adquisicionSet.adqProcCompraGrp", filtro.getProcedimientoGRP());
            criterios.add(proc);
        }

        // Area
        if (filtro.getArea() != null) {
            MatchCriteriaTO proyArea = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyAreaFk.areaPk", filtro.getArea().getAreaPk());
            criterios.add(proyArea);
        }

        // Gerente o Adjunto
        if (filtro.getGerenteAdjunto() != null && !filtro.getGerenteAdjunto().equals(-1)) {
            MatchCriteriaTO gerente1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyUsrGerenteFk.usuId", filtro.getGerenteAdjunto());
            MatchCriteriaTO adjunto1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyUsrAdjuntoFk.usuId", filtro.getGerenteAdjunto());
            OR_TO orCriteria1 = new OR_TO(gerente1, adjunto1);
            criterios.add(orCriteria1);
        }

        // Sponsor
        if (filtro.getSponsor() != null && !filtro.getSponsor().equals(-1)) {
            MatchCriteriaTO nombre = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyUsrSponsorFk.usuId", filtro.getSponsor());
            criterios.add(nombre);
        }

        // PMO Federada
        if (filtro.getPmof() != null) {
            MatchCriteriaTO nombre = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyUsrPmofedFk.usuId", filtro.getPmof());
            criterios.add(nombre);
        }

        //Area tematica
        if (filtro.getAreasTematicas() != null && !filtro.getAreasTematicas().isEmpty()) {
            List<CriteriaTO> areaTemCriteria = new ArrayList<>();
            for (AreasTags areaTem : filtro.getAreasTematicas()) {
                MatchCriteriaTO areaTag1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "areasTematicasSet.arastagPk", areaTem.getArastagPk());
                areaTemCriteria.add(areaTag1);
            }

            if (areaTemCriteria.size() > 1) {
                criterios.add(CriteriaTOUtils.createORTO(areaTemCriteria.toArray(new CriteriaTO[]{})));
            } else {
                criterios.add(areaTemCriteria.get(0));
            }
        }

        //Presupuesto Proveedor
        if (filtro.getProveedor() != null) {
            MatchCriteriaTO orgProv = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyPreFk.adquisicionSet.adqProvOrga.orgaPk", filtro.getProveedor().getOrgaPk());
            criterios.add(orgProv);
        }

        //Presupuesto Fuente
        if (filtro.getFuenteFinanc() != null) {
            MatchCriteriaTO fuente1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyPreFk.fuenteFinanciamiento.fuePk", filtro.getFuenteFinanc().getFuePk());
            MatchCriteriaTO fuente2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyPreFk.adquisicionSet.adqFuente.fuePk", filtro.getFuenteFinanc().getFuePk());
            CriteriaTO fuenteA = CriteriaTOUtils.createORTO(fuente1, fuente2);
            criterios.add(fuenteA);
        }

        //Moneda
        if (filtro.getMoneda() != null) {
            MatchCriteriaTO mon = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyPreFk.adquisicionSet.adqMoneda.monPk", filtro.getMoneda().getMonPk());
            criterios.add(mon);
        }

        CriteriaTO criteria;
        if (criterios.size() == 1) {
            criteria = criterios.get(0);
        } else {
            criteria = CriteriaTOUtils.createANDTO(criterios.toArray(new CriteriaTO[0]));
        }

        ProyectosDAO proyDao = new ProyectosDAO(em);
        List<Proyectos> proyectosResult = null;
        try {
            proyectosResult = proyDao.findEntityByCriteria(Proyectos.class, criteria, new String[]{}, new boolean[]{}, null, null);
        } catch (DAOGeneralException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
        return proyectosResult;
    }

}
