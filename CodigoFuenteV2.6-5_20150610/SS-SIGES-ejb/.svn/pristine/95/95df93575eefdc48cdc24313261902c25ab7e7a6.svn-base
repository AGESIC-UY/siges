package com.sofis.business.ejbs;

import com.sofis.business.interceptors.LoggedInterceptor;
import com.sofis.data.daos.AreasDAO;
import com.sofis.data.daos.AreasTagsDAO;
import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.data.Areas;
import com.sofis.entities.data.AreasTags;
import com.sofis.exceptions.GeneralException;
import com.sofis.exceptions.TechnicalException;
import com.sofis.persistence.dao.exceptions.DAOGeneralException;
import com.sofis.sofisform.to.MatchCriteriaTO;
import com.sofis.utils.CriteriaTOUtils;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.inject.Named;
import javax.interceptor.Interceptors;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author Usuario
 */
@Named
@Stateless(name = "AreasBean")
@LocalBean
@Interceptors({LoggedInterceptor.class})
public class AreasBean {

    @Inject
    private ConsultaHistorico<Areas> ch;
    @PersistenceContext(unitName = ConstanteApp.PERSISTENCE_CONTEXT_UNIT_NAME)
    private EntityManager em;
    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);

    public Areas obtenerAreasPorId(Integer areaId) throws GeneralException {
        AreasDAO areasDao = new AreasDAO(em);
        try {
            Areas area = areasDao.findById(Areas.class, areaId);
            return area;

        } catch (DAOGeneralException ex) {
            logger.getLogger(AreasBean.class.getName()).log(Level.SEVERE, null, ex);
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }

    public List<Areas> obtenerAreasPorIdOrganismo(int orgPk) throws GeneralException {
        AreasDAO areasDao = new AreasDAO(em);
        try {
            List<Areas> resultado = areasDao.findEntityByCriteria(Areas.class, CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "areaOrgFk.orgPk", orgPk), new String[]{"areaNombre"}, new boolean[]{true}, null, null);
            return resultado;

        } catch (DAOGeneralException ex) {
            logger.getLogger(AreasBean.class.getName()).log(Level.SEVERE, null, ex);
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }

    public List<AreasTags> obtenerAreasTematicasPorOrganizacion(int organismoId) {
        AreasTagsDAO areasDao = new AreasTagsDAO(em);
        try {
            List<AreasTags> resultado = areasDao.findByOneProperty(AreasTags.class, "areatagOrgFk.orgPk", organismoId);
            return resultado;
        } catch (DAOGeneralException ex) {
            ex.printStackTrace();
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }

    public List<Areas> obtenerAreasRestringidasPorFichaPk(Integer fichaPf, Integer tipoFicha) {
        AreasDAO areasDao = new AreasDAO(em);
        try {
            List<Areas> resultado = areasDao.obtenerAreasRestringidasPorFichaPk(fichaPf, tipoFicha);
            return resultado;
        } catch (DAOGeneralException ex) {
            logger.log(Level.SEVERE, ex.getMessage());
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }

    public List<AreasTags> obtenerAreasTematicasPorFichaPk(Integer fichaPf, Integer tipoFicha) {
        AreasTagsDAO areasDao = new AreasTagsDAO(em);
        try {
            List<AreasTags> resultado = areasDao.obtenerAreasTematicasPorFichaPk(fichaPf, tipoFicha);
            return resultado;
        } catch (DAOGeneralException ex) {
            logger.log(Level.SEVERE, ex.getMessage());
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }
}