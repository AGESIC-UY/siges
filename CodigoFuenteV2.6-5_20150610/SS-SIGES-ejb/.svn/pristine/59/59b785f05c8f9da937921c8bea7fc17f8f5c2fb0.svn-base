package com.sofis.business.ejbs;

import com.sofis.business.interceptors.LoggedInterceptor;
import com.sofis.business.properties.LabelsEJB;
import com.sofis.business.utils.MailsTemplateUtils;
import com.sofis.entities.constantes.ConstantesErrores;
import com.sofis.entities.constantes.ConstantesEstandares;
import com.sofis.entities.constantes.MensajesNegocio;
import com.sofis.entities.data.Configuracion;
import com.sofis.entities.data.Estados;
import com.sofis.entities.data.MailsTemplate;
import com.sofis.entities.data.Organismos;
import com.sofis.entities.data.Programas;
import com.sofis.entities.data.Proyectos;
import com.sofis.exceptions.BusinessException;
import com.sofis.exceptions.GeneralException;
import com.sofis.exceptions.MailException;
import com.sofis.generico.utils.generalutils.EmailValidator;
import com.sofis.generico.utils.generalutils.StringsUtils;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.inject.Named;
import javax.interceptor.Interceptors;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.naming.InitialContext;

/**
 *
 * @author Usuario
 */
@Named
@Stateless(name = "MailBean")
@LocalBean
@Interceptors({LoggedInterceptor.class})
public class MailBean {

    private Session mailSession = null;
    @Inject
    private ConfiguracionBean cnfBean;
    @Inject
    private MailTemplateBean mailTemplateBean;
    @Inject
    OrganismoBean organismoBean;
    private static final Logger logger = Logger.getLogger(ConstantesEstandares.LOGGER);

    public MailBean() {
    }

    private boolean conCorreo(Integer orgPk) {
        boolean conCorreo = true;

        if (orgPk != null) {
            try {
                Configuracion cnfCorreo = cnfBean.obtenerCnfPorCodigoYOrg(ConstantesEstandares.CON_CORREO, orgPk);
                conCorreo = Boolean.parseBoolean(cnfCorreo.getCnfValor());
            } catch (Exception ex) {
                logger.log(Level.WARNING, "Error al obtener la configuracion 'CON_CORREO'.");
//                conCorreo = false;
            }
        }
        return conCorreo;
    }

    public boolean enviarMail(String subject, String from, String[] recipients, String message, Integer orgPk) {
        return enviarMail(subject, from, null, null, recipients, message, orgPk);
    }

    public boolean enviarMail(String subject, String from, String[] recipientsTO, String[] recipientsCC, String[] recipientsBCC, String message, Integer orgPk) {
        try {
            if (conCorreo(orgPk)) {

                InitialContext ic = new InitialContext();
                mailSession = (Session) ic.lookup("java:jboss/mail/SigesMail");
                ic.close();

                MimeMessage msg = new MimeMessage(mailSession);
                msg.setSubject(subject);

                if (StringsUtils.isEmpty(from)) {
                    String fromName = "SIGES";
                    if (orgPk != null) {
                        Configuracion cnf = cnfBean.obtenerCnfPorCodigoYOrg("MAIL_FROM", orgPk);
                        InternetAddress addressFrom = new InternetAddress();
                        addressFrom.setPersonal(fromName);
                        addressFrom.setAddress(cnf.getCnfValor());
                        msg.setFrom(addressFrom);
                    } else {
                        msg.setFrom();
                    }

                } else {
                    InternetAddress addressFrom = new InternetAddress();
                    addressFrom.setPersonal(from);
                    addressFrom.setAddress(from);
                    msg.setFrom(addressFrom);
                }

                List<InternetAddress> listAddress = null;
                if (recipientsTO != null) {
                    listAddress = new ArrayList<>();
                    loadRecipients(listAddress, recipientsTO);

                    InternetAddress[] addressTo = listAddress.toArray(new InternetAddress[listAddress.size()]);
                    msg.setRecipients(Message.RecipientType.TO, addressTo);
                }
                if (recipientsCC != null) {
                    listAddress = new ArrayList<>();
                    loadRecipients(listAddress, recipientsCC);

                    InternetAddress[] addressTo = listAddress.toArray(new InternetAddress[listAddress.size()]);
                    msg.setRecipients(Message.RecipientType.CC, addressTo);
                }
                if (recipientsBCC != null) {
                    listAddress = new ArrayList<>();
                    loadRecipients(listAddress, recipientsBCC);

                    InternetAddress[] addressTo = listAddress.toArray(new InternetAddress[listAddress.size()]);
                    msg.setRecipients(Message.RecipientType.BCC, addressTo);
                }

                String encoding = "utf8";
                try {
                    Configuracion cnfEncoding = cnfBean.obtenerCnfPorCodigoYOrg("MAIL_ENCODING", orgPk);
                    encoding = cnfEncoding.getCnfValor();
                } catch (GeneralException ge) {
                    logger.log(Level.WARNING, "No se pudo obtener \"MAIL_ENCODING\" de las configuraciones. Se toma por defecto: " + encoding);
                }
                msg.setText(message, encoding);
                msg.setHeader("Content-Type", "text/html; charset=\"" + encoding + "\"");
                msg.setHeader("Content-Transfer-Encoding", "quoted-printable");
                //transport.connect(this.serverDir, Integer.valueOf(this.serverPort).intValue(), this.from, this.serverPass);

                msg.saveChanges();
                Transport.send(msg);

                return true;
            } else {
                logger.log(Level.INFO, "No se envia correo: {0}, mensaje{1}", new Object[]{subject, message});
                BusinessException be = new BusinessException();
                be.addError(MensajesNegocio.ERROR_MAIL_DISABLED);
                throw be;
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
            String recipt = StringsUtils.concat((recipientsTO != null ? "a TO:" + recipientsTO.toString() : ""),
                    (recipientsCC != null ? "a CC:" + recipientsCC.toString() : ""),
                    (recipientsBCC != null ? "a BCC:" + recipientsBCC.toString() : ""));
            logger.log(Level.SEVERE, "Error al enviar el msg: \"" + message + "\"" + recipt);
            MailException me = new MailException();
            me.addError(MensajesNegocio.ERROR_MAIL_ENVIO);
            throw me;
        }
    }

    private List<InternetAddress> loadRecipients(List<InternetAddress> listAddress, String[] recipients) {
        if (listAddress == null) {
            listAddress = new ArrayList<>();
        }
        for (int i = 0; i < recipients.length; i++) {
            if (validarEMail(recipients[i])) {
                try {
                    listAddress.add(new InternetAddress(recipients[i]));
                } catch (AddressException ex) {
                    logger.log(Level.SEVERE, null, ex);
                }
            } else {
                logger.log(Level.WARNING, "No se puede enviar mail a: '" + recipients[i] + "'. La dirección no es correcta.");
            }
        }
        return listAddress;
    }

    /**
     * Valida el mail aportado.
     *
     * @param email
     * @return
     */
    public boolean validarEMail(String email) {
        return new EmailValidator().validate(email);
    }

    /**
     * Envía un comunicado informando la solicitud de una aprobacion para un
     * Programa o Proyecto.
     *
     * @param orgPk
     * @param destinatario
     */
    public void comunicarSolicitudAprobacion(Integer orgPk, Object obj, String... destinatario) throws GeneralException {
        MailsTemplate mt = mailTemplateBean.obtenerMailTmpPorCodigo(MailTemplateBean.MAIL_SOL_APROBACION, orgPk);

        if (conCorreo(orgPk) && mt != null) {
            String asunto = mt.getMailTmpAsunto();
            String mensaje = mt.getMailTmpMensaje();

            Organismos org = organismoBean.obtenerOrgPorId(orgPk);

            String tipo = "";
            Integer fichaPk = null;
            String nombre = "";
            if (obj instanceof Programas) {
                Programas p = (Programas) obj;
                tipo = "programa";
                fichaPk = p.getProgPk();
                nombre = p.getProgNombre();
            } else if (obj instanceof Proyectos) {
                Proyectos p = (Proyectos) obj;
                tipo = "proyecto";
                fichaPk = p.getProyPk();
                nombre = p.getProyNombre();
            }
            Map<String, String> valores = new HashMap<>();
            valores.put("TIPO_PROG_PROY", tipo);
            valores.put("ID_PROG_PROY", fichaPk.toString());
            valores.put("NOMBRE_PROG_PROY", nombre);
            valores.put("ORGANISMO_NOMBRE", org.getOrgNombre());
            valores.put("ORGANISMO_DIRECCION", org.getOrgDireccion());
            mensaje = MailsTemplateUtils.instanciarConHashMap(mensaje, valores);

            this.enviarMail(asunto, "", destinatario, mensaje, orgPk);
        }
    }

    /**
     * Envía un comunicado informando el cambio de estado para un Programa o
     * Proyecto.
     *
     * @param orgPk
     * @param obj Programa o Proyecto
     * @param destinatario
     * @throws GeneralException
     */
    public void comunicarCambioEstado(Integer orgPk, Object obj, String... destinatario) throws GeneralException {
        MailsTemplate mt = mailTemplateBean.obtenerMailTmpPorCodigo(MailTemplateBean.MAIL_CAMBIO_ESTADO, orgPk);

        if (conCorreo(orgPk) && mt != null) {
            String asunto = mt.getMailTmpAsunto();
            String mensaje = mt.getMailTmpMensaje();

            Organismos org = organismoBean.obtenerOrgPorId(orgPk);

            String tipo = "";
            Integer fichaPk = null;
            String nombre = "";
            Estados estado = null;
            if (obj instanceof Programas) {
                Programas p = (Programas) obj;
                tipo = LabelsEJB.getValue("programa");
                fichaPk = p.getProgPk();
                nombre = p.getProgNombre();
                estado = p.getProgEstFk();
            } else if (obj instanceof Proyectos) {
                Proyectos p = (Proyectos) obj;
                tipo = LabelsEJB.getValue("proyecto");
                fichaPk = p.getProyPk();
                nombre = p.getProyNombre();
                estado = p.getProyEstFk();
            }

            Map<String, String> valores = new HashMap<>();
            valores.put("TIPO_PROG_PROY", tipo);
            valores.put("ID_PROG_PROY", fichaPk.toString());
            valores.put("NOMBRE_PROG_PROY", nombre);
            valores.put("FASE_PROG_PROY", LabelsEJB.getValue("estado_" + estado.getEstPk()));
            valores.put("ORGANISMO_NOMBRE", org.getOrgNombre());
            valores.put("ORGANISMO_DIRECCION", org.getOrgDireccion());
            mensaje = MailsTemplateUtils.instanciarConHashMap(mensaje, valores);

            this.enviarMail(asunto, "", destinatario, mensaje, orgPk);
        }
    }

    /**
     * Envía un comunicado informando que queda pendiente de aprobación.
     *
     * @param orgPk
     * @param obj Programa o Proyecto
     * @param destinatario
     * @throws GeneralException
     */
    public void comunicarProgProyPendiente(Integer orgPk, Object obj, String... destinatario) throws MailException {
        MailsTemplate mt = mailTemplateBean.obtenerMailTmpPorCodigo(MailTemplateBean.MAIL_PROG_PROY_PENDIENTE, orgPk);

        if (conCorreo(orgPk) && mt != null) {
            String asunto = mt.getMailTmpAsunto();
            String mensaje = mt.getMailTmpMensaje();

            Organismos org = organismoBean.obtenerOrgPorId(orgPk);

            String tipo = "";
            Integer fichaPk = null;
            String nombre = "";
            if (obj instanceof Programas) {
                Programas p = (Programas) obj;
                tipo = LabelsEJB.getValue("programa");
                fichaPk = p.getProgPk();
                nombre = p.getProgNombre();
            } else if (obj instanceof Proyectos) {
                Proyectos p = (Proyectos) obj;
                tipo = LabelsEJB.getValue("proyecto");
                fichaPk = p.getProyPk();
                nombre = p.getProyNombre();
            }

            Map<String, String> valores = new HashMap<>();
            valores.put("TIPO_PROG_PROY", tipo);
            valores.put("ID_PROG_PROY", fichaPk.toString());
            valores.put("NOMBRE_PROG_PROY", nombre);
            valores.put("ORGANISMO_NOMBRE", org.getOrgNombre());
            valores.put("ORGANISMO_DIRECCION", org.getOrgDireccion());
            mensaje = MailsTemplateUtils.instanciarConHashMap(mensaje, valores);

            this.enviarMail(asunto, "", null, null, destinatario, mensaje, orgPk);
        }
    }

    /**
     * Envía un mail con la nueva constraseña generada para el usuario
     *
     * @param orgPk
     * @param destinatario
     */
    public boolean comunicarNuevaContrasenia(Integer orgPk, String nombre, String contrasenia, String email) throws GeneralException {
        MailsTemplate mt = mailTemplateBean.obtenerMailTmpPorCodigo(MailTemplateBean.MAIL_CAMBIO_CONTRASENIA, null);

        if (mt != null) {
            String asunto = mt.getMailTmpAsunto();
            String mensaje = mt.getMailTmpMensaje();

            Map<String, String> valores = new HashMap<>();
            valores.put("NOMBRE", nombre);
            valores.put("CONTRASENIA", contrasenia);
            if (orgPk != null) {
                Organismos org = organismoBean.obtenerOrgPorId(orgPk);
                valores.put("ORGANISMO_NOMBRE", org.getOrgNombre());
                valores.put("ORGANISMO_DIRECCION", org.getOrgDireccion());
            }
            mensaje = MailsTemplateUtils.instanciarConHashMap(mensaje, valores);

            String[] dests = new String[1];
            dests[0] = email;

            return this.enviarMail(asunto, "", dests, mensaje, orgPk);
        }
        return false;
    }

    public void comunicarNuevoUsuario(Integer orgPk, String mail, String clave) {
        MailsTemplate mt = mailTemplateBean.obtenerMailTmpPorCodigo(MailTemplateBean.MAIL_NVO_USUARIO, null);

        if (mt != null) {
            String asunto = mt.getMailTmpAsunto();
            String mensaje = mt.getMailTmpMensaje();

            Map<String, String> valores = new HashMap<>();
            valores.put("USU_MAIL", mail);
            valores.put("USU_PASSWORD", clave);
            Organismos org = organismoBean.obtenerOrgPorId(orgPk);
            valores.put("ORGANISMO_NOMBRE", org.getOrgNombre());
            valores.put("ORGANISMO_DIRECCION", org.getOrgDireccion());
            mensaje = MailsTemplateUtils.instanciarConHashMap(mensaje, valores);

            String[] dests = new String[1];
            dests[0] = mail;

            this.enviarMail(asunto, "", dests, mensaje, orgPk);
        }
    }
}
