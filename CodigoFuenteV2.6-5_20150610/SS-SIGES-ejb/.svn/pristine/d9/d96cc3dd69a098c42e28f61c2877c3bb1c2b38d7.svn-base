package com.sofis.business.ejbs;

import com.sofis.business.interceptors.LoggedInterceptor;
import com.sofis.data.daos.EstadosEditorDAO;
import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.constantes.ConstantesErrores;
import com.sofis.entities.data.Configuracion;
import com.sofis.entities.data.EstadosEditor;
import com.sofis.exceptions.BusinessException;
import com.sofis.exceptions.GeneralException;
import com.sofis.exceptions.TechnicalException;
import com.sofis.persistence.dao.exceptions.DAOGeneralException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.inject.Named;
import javax.interceptor.Interceptors;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author Usuario
 */
@Named
@Stateless(name = "EstadosEditorBean")
@LocalBean
@Interceptors({LoggedInterceptor.class})
public class EstadosEditorBean {

    @PersistenceContext(unitName = ConstanteApp.PERSISTENCE_CONTEXT_UNIT_NAME)
    private EntityManager em;
    @Inject
    private DatosUsuario du;
    @Inject
    private ConsultaHistorico<Configuracion> ch;
    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);

    /**
     * Devuelve el elemento de EstadosEditor según el código. Si no hay ningún
     * elemento con ese código devuevle null
     *
     * @param codigo
     * @return
     * @throws GeneralException
     */
    public EstadosEditor obtenerPorCodigo(String codigo) throws GeneralException {
        EstadosEditorDAO cnfDao = new EstadosEditorDAO(em);
        try {
            List<EstadosEditor> resultado = cnfDao.findByOneProperty(EstadosEditor.class, "estediCodigo", codigo);
            if (resultado.size() == 1) {
                return resultado.get(0);
            } else if (resultado.isEmpty()) {
                return null;
            } else {
                BusinessException be = new BusinessException();
                be.addError(ConstantesErrores.ERROR_DEMASIADOS_RESULTADOS);
                throw be;
            }
        } catch (DAOGeneralException ex) {
            ex.printStackTrace();
            logger.log(Level.SEVERE, ex.getMessage(), ex);
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }

    /**
     *
     * @return @throws GeneralException
     */
    public List<EstadosEditor> obtenerTodos() throws GeneralException {
        EstadosEditorDAO cnfDao = new EstadosEditorDAO(em);
        try {
            List<EstadosEditor> resultado = cnfDao.findAll(EstadosEditor.class, "estediDesc");
            return resultado;

        } catch (DAOGeneralException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }

    public boolean isEstado(EstadosEditor ee, String codEstado) {
        if (ee != null) {
            EstadosEditor estado = obtenerPorCodigo(codEstado);
            return ee.equals(estado);
        }
        return false;
    }
}
