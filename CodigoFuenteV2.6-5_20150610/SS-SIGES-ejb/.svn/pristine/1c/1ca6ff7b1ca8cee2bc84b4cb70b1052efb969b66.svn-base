package com.sofis.business.ejbs;

import com.sofis.business.interceptors.LoggedInterceptor;
import com.sofis.business.validations.AreaTematicaValidacion;
import com.sofis.data.daos.AreasTagsDAO;
import com.sofis.data.daos.SsUsuarioDAO;
import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.constantes.ConstantesErrores;
import com.sofis.entities.constantes.MensajesNegocio;
import com.sofis.entities.data.Adquisicion;
import com.sofis.entities.data.Areas;
import com.sofis.entities.data.AreasTags;
import com.sofis.entities.data.Organismos;
import com.sofis.entities.data.SsUsuario;
import com.sofis.exceptions.BusinessException;
import com.sofis.exceptions.TechnicalException;
import com.sofis.generico.utils.generalutils.StringsUtils;
import com.sofis.persistence.dao.exceptions.DAOGeneralException;
import com.sofis.sofisform.to.CriteriaTO;
import com.sofis.sofisform.to.MatchCriteriaTO;
import com.sofis.utils.CriteriaTOUtils;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.inject.Named;
import javax.interceptor.Interceptors;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author Usuario
 */
@Named
@Stateless(name = "AreaTematicaBean")
@LocalBean
@Interceptors({LoggedInterceptor.class})
public class AreaTematicaBean {

    @PersistenceContext(unitName = ConstanteApp.PERSISTENCE_CONTEXT_UNIT_NAME)
    private EntityManager em;
    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);
    @Inject
    private DatosUsuario du;
    @Inject
    private ConsultaHistorico<Areas> ch;

    public AreasTags guardar(AreasTags at) {
        if (at != null) {
            at.setAreatagExcluyente(Boolean.TRUE);
            at.setAreatagTematica(at.getAreatagNombre());

            AreaTematicaValidacion.validar(at);

            AreasTagsDAO dao = new AreasTagsDAO(em);
            try {
                return dao.update(at, du.getCodigoUsuario(), du.getOrigen());
            } catch (DAOGeneralException ex) {
                logger.log(Level.SEVERE, ex.getMessage(), ex);
                BusinessException be = new BusinessException();
                be.addError(ex.getMessage());
                throw be;
            }
        }
        return null;
    }

    public AreasTags obtenerAreaTemPorPk(Integer atPk) {
        if (atPk != null) {
            AreasTagsDAO dao = new AreasTagsDAO(em);
            try {
                return dao.findById(AreasTags.class, atPk);
            } catch (DAOGeneralException ex) {
                logger.log(Level.SEVERE, null, ex);
                BusinessException be = new BusinessException();
                be.addError(MensajesNegocio.ERROR_AREAS_TEMATICAS_OBTENER);
                throw be;
            }
        }
        return null;
    }

    public List<AreasTags> busquedaAreaTemFiltro(Integer orgPk, String filtroNombre, String elementoOrdenacion, int ascendente) {
        if (orgPk != null) {
            List<CriteriaTO> criterios = new ArrayList<CriteriaTO>();

            if (!StringsUtils.isEmpty(filtroNombre)) {
                MatchCriteriaTO criterio = CriteriaTOUtils.createMatchCriteriaTO(
                        MatchCriteriaTO.types.CONTAINS, "areatagNombre", filtroNombre);
                criterios.add(criterio);
            }

            CriteriaTO condicion;
            if (!criterios.isEmpty()) {
                if (criterios.size() == 1) {
                    condicion = criterios.get(0);
                } else {
                    condicion = CriteriaTOUtils.createANDTO(criterios.toArray(new CriteriaTO[0]));
                }
            } else {
                condicion = CriteriaTOUtils.createMatchCriteriaTO(
                        MatchCriteriaTO.types.NOT_NULL, "areatagNombre", 1);
            }
            String[] orderBy = {elementoOrdenacion};
            boolean[] asc = {(ascendente == 1 ? true : false)};

            AreasTagsDAO dao = new AreasTagsDAO(em);
            try {
                return dao.findEntityByCriteria(AreasTags.class, condicion, orderBy, asc, null, null);
            } catch (DAOGeneralException ex) {
                logger.log(Level.SEVERE, null, ex);
                BusinessException be = new BusinessException();
                be.addError(MensajesNegocio.ERROR_AREAS_TEMATICAS_OBTENER);
                throw be;
            }
        }
        return null;
    }

    public void eliminarAreaTematica(Integer atPk) {
        if (atPk != null) {
            AreasTagsDAO dao = new AreasTagsDAO(em);
            try {
                AreasTags a = obtenerAreaTemPorPk(atPk);
                dao.delete(a);
            } catch (DAOGeneralException ex) {
                logger.log(Level.SEVERE, null, ex);

                BusinessException be = new BusinessException();
                be.addError(MensajesNegocio.ERROR_AREAS_TEMATICAS_ELIMINAR);
                if (ex.getCause() instanceof javax.persistence.PersistenceException
                        && ex.getCause().getCause() instanceof org.hibernate.exception.ConstraintViolationException) {
                    be.addError(MensajesNegocio.ERROR_AREAS_TEMATICAS_CONST_VIOLATION);
                }
                throw be;
            }
        }
    }
}
