package com.sofis.data.daos;

import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.data.Documentos;
import com.sofis.entities.enums.TipoFichaEnum;
import com.sofis.persistence.dao.imp.hibernate.HibernateJpaDAOImp;
import java.io.Serializable;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.Query;

/**
 *
 * @author Usuario
 */
public class DocumentosDao extends HibernateJpaDAOImp<Documentos, Integer> implements Serializable {

    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);
    private static final long serialVersionUID = 1L;

    public DocumentosDao(EntityManager em) {
        super(em);
    }

    public List<Documentos> obtenerDocumentosOrderByFecha(Integer fichaFk, Integer tipoFicha) {
        String queryStr = "";
        if (tipoFicha.equals(TipoFichaEnum.PROGRAMA.id)) {
            queryStr = "SELECT d FROM Programas p, IN(p.documentosSet) d"
                    + " WHERE p.progPk = :fichaFk"
                    + " ORDER BY d.docsFecha DESC, d.docsPk DESC";

        } else if (tipoFicha.equals(TipoFichaEnum.PROYECTO.id)) {
            queryStr = "SELECT d FROM Proyectos p, IN(p.documentosSet) d"
                    + " WHERE p.proyPk = :fichaFk"
                    + " ORDER BY d.docsFecha DESC, d.docsPk DESC";
        }

        Query query = super.getEm().createQuery(queryStr);
        query.setParameter("fichaFk", fichaFk);

        List<Documentos> resultado = query.getResultList();
        return resultado;
    }

    /**
     * Retorna una lista de Documentos ordenados por estado de menor a mayor con
     * un maximo de registros según lo indicado.
     *
     * @param fichaFk
     * @param tipoFicha
     * @param maxResult
     * @return Lista de Documentos según el máximo indicado
     */
    public List<Documentos> obtenerDocumentosPorFicha(Integer fichaFk, Integer tipoFicha, int maxResult) {
        String queryStr = "";
        if (tipoFicha.equals(TipoFichaEnum.PROGRAMA.id)) {
            queryStr = "SELECT d FROM Programas p, IN(p.documentosSet) d"
                    + " WHERE p.progPk = :fichaFk"
                    + " ORDER BY d.docsEstado ASC";

        } else if (tipoFicha.equals(TipoFichaEnum.PROYECTO.id)) {
            queryStr = "SELECT d FROM Proyectos p, IN(p.documentosSet) d"
                    + " WHERE p.proyPk = :fichaFk"
                    + " ORDER BY d.docsEstado ASC";
        }

        Query query = super.getEm().createQuery(queryStr);
        query.setParameter("fichaFk", fichaFk);

        if (maxResult > 0) {
            query.setMaxResults(maxResult);
        }

        return query.getResultList();
    }

    public Boolean metodologiaSinAprobar(Integer proyPk) {
        String queryStr = "SELECT d.docsAprobado "
                + " FROM Proyectos p, IN(p.documentosSet) d"
                + " WHERE p.proyPk = :proyPk"
                + " AND (d.docsAprobado IS NULL OR d.docsAprobado = :docsAprobado)"
                + " AND d.docsTipo.tipodocExigidoDesde = 0";

        Query query = super.getEm().createQuery(queryStr);
        query.setParameter("proyPk", proyPk);
        query.setParameter("docsAprobado", Boolean.FALSE);

        List<Boolean> resultado = query.getResultList();

        return (resultado != null && !resultado.isEmpty() ? true : false);
    }

    public Boolean metodologiaSinAprobarProgramas(Integer progPk) {
        String queryStr = "SELECT d.docsAprobado "
                + " FROM Programas p, IN(p.proyectosSet) y, IN(y.documentosSet) d"
                + " WHERE p.progPk = :progPk"
                + " AND (y.activo IS NULL OR y.activo = :activo)"
                + " AND (d.docsAprobado IS NULL OR d.docsAprobado = :docsAprobado)";

        Query query = super.getEm().createQuery(queryStr);
        query.setParameter("progPk", progPk);
        query.setParameter("activo", Boolean.TRUE);
        query.setParameter("docsAprobado", Boolean.FALSE);

        List<Double> resultado = query.getResultList();

        return (resultado != null && !resultado.isEmpty() ? true : false);
    }

    public Documentos obtenerResumenEjecutivo(Integer fichaFk, TipoFichaEnum tipoFicha) {
        String queryStr;
        if (tipoFicha.isPrograma()) {
            queryStr = "SELECT d FROM Programas p, IN(p.documentosSet) d"
                    + " WHERE p.progPk = :fichaFk"
                    + " AND d.docsTipo.tipodocInstTipoDocFk.tipodocResumenEjecutivo = :resumen"
                    + " ORDER BY d.docsFecha DESC, d.docsPk DESC";
        } else {
            queryStr = "SELECT d FROM Proyectos p, IN(p.documentosSet) d"
                    + " WHERE p.proyPk = :fichaFk"
                    + " AND d.docsTipo.tipodocInstTipoDocFk.tipodocResumenEjecutivo = :resumen"
                    + " ORDER BY d.docsFecha DESC, d.docsPk DESC";
        }
        try {
            Query query = super.getEm().createQuery(queryStr);
            query.setParameter("fichaFk", fichaFk);
            query.setParameter("resumen", true);
            query.setMaxResults(1);

            return (Documentos) query.getSingleResult();
        } catch (Exception e) {
            logger.logp(Level.SEVERE, DocumentosDao.class.getName(), "obtenerResumenEjecutivo", e.getMessage());
        }
        return null;
    }

    public Documentos obtenerUltimoDocPorTipoDocInst(Integer tdiPk) {
        String queryStr = "SELECT d FROM Documentos d"
                + " WHERE d.docsTipo.tipodocInstPk = :tdiPk"
                + " ORDER BY d.docsFecha DESC, d.docsPk DESC";
        Query query = super.getEm().createQuery(queryStr);
        query.setParameter("tdiPk", tdiPk);
        query.setMaxResults(1);

        try {
            return (Documentos) query.getSingleResult();
        } catch (Exception e) {
            return null;
        }
    }
}
