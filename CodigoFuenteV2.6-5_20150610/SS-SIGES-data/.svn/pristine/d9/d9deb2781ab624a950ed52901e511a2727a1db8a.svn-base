package com.sofis.data.daos;

import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.data.AreasTags;
import com.sofis.entities.data.Configuracion;
import com.sofis.entities.data.Estados;
import com.sofis.entities.data.Programas;
import com.sofis.entities.data.Proyectos;
import com.sofis.entities.data.SsRol;
import com.sofis.entities.data.SsUsuario;
import com.sofis.entities.tipos.FichaTO;
import com.sofis.entities.tipos.FiltroInicioTO;
import com.sofis.generico.utils.generalutils.CollectionsUtils;
import com.sofis.generico.utils.generalutils.StringsUtils;
import com.sofis.persistence.dao.exceptions.DAOGeneralException;
import com.sofis.persistence.dao.imp.hibernate.HibernateJpaDAOImp;
import com.sofis.persistence.dao.reference.EntityReference;
import com.sofis.sofisform.to.AND_TO;
import com.sofis.sofisform.to.CriteriaTO;
import com.sofis.sofisform.to.MatchCriteriaTO;
import com.sofis.sofisform.to.OR_TO;
import com.sofis.utils.CriteriaTOUtils;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.Query;

/**
 *
 * @author Usuario
 */
public class ProgramasProyectosDAO extends HibernateJpaDAOImp<Proyectos, Integer> implements Serializable {

    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);
    private static final long serialVersionUID = 1L;

    public ProgramasProyectosDAO(EntityManager em) {
        super(em);
    }

    /**
     * Retorna una lista con programas y proyectos que cumplan con los
     * parametros aportados.
     *
     * @param estadoId
     * @param organismoId
     * @return Lista de FichaTO
     * @throws DAOGeneralException
     */
    public List<FichaTO> obtenerProyProgPendientes(SsUsuario usuario, Integer orgPk) throws DAOGeneralException {
        logger.info("Obtener Proy/Prog pendientes por Estado.");
        String queryStr = "SELECT NEW com.sofis.entities.tipos.FichaTO(p)"
                + " FROM ProgramasProyectos p"
                + " WHERE (p.estado = :pendientePMOT"
                + " OR (p.estadoPendiente = :cancelarPMOT)"
                + " OR (p.estado = :pendientePMOF AND p.pmoFederada = :pmoFederada))"
                + " AND p.organismo = :organismoId"
                + " AND (p.activo is null OR p.activo = :activo)"
                + " ORDER BY p.nombre";
        Query query = super.getEm().createQuery(queryStr);
        query.setParameter("pendientePMOT", usuario.isRol(SsRol.ROLES.PMO_TRANSVERSAL, orgPk) ? Estados.ESTADOS.PENDIENTE_PMOT.estado_id : 0);
        query.setParameter("cancelarPMOT", usuario.isRol(SsRol.ROLES.PMO_TRANSVERSAL, orgPk) ? Estados.ESTADOS.SOLICITUD_CANCELAR_PMOT.estado_id : 0);
        query.setParameter("pendientePMOF", usuario.isRol(SsRol.ROLES.PMO_FEDERADA, orgPk) || usuario.isRol(SsRol.ROLES.PMO_TRANSVERSAL, orgPk) ? Estados.ESTADOS.PENDIENTE_PMOF.estado_id : 0);
        query.setParameter("pmoFederada", usuario.getUsuId());
        query.setParameter("organismoId", orgPk);
        query.setParameter("activo", true);

        List<FichaTO> resultado = query.getResultList();
        return resultado;
    }

    /**
     * A partir del filtro crea los criterias para realizar la consulta sobre el
     * Proyecto.
     *
     * @param usuario el usuario que ejecuta la consulta
     * @param filtro el filtro
     * @return
     */
    private CriteriaTO crearFiltroProyecto(SsUsuario usuario, FiltroInicioTO filtro, boolean huerfanos) {
        List<CriteriaTO> criterias = new ArrayList<>();
        boolean soloProyecto = huerfanos || filtro.getProgPk() != null;

        // ProgramaPk
        if (filtro.getProgPk() != null) {
            MatchCriteriaTO prog1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.progPk", filtro.getProgPk());
            criterias.add(prog1);
        }

        List<Object> estados = null;

        if (huerfanos || (filtro.getNivel() != null && (filtro.getNivel().equals(2)
                || !(filtro.getProgPk() != null && filtro.getNivel().equals(1))))) {

            // Nombre
            if (!StringsUtils.isEmpty(filtro.getNombre())) {
                MatchCriteriaTO nombre1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "proyNombre", filtro.getNombre());
                if (soloProyecto) {
                    criterias.add(nombre1);
                } else {
                    MatchCriteriaTO nombre2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "proyProgFk.progNombre", filtro.getNombre());
                    OR_TO orCriteria = CriteriaTOUtils.createORTO(nombre1, nombre2);
                    criterias.add(orCriteria);
                }
            }

            // Sponsor
            if (filtro.getSponsor() != null && !filtro.getSponsor().equals(-1)) {
                MatchCriteriaTO nombre1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyUsrSponsorFk.usuId", filtro.getSponsor());
                if (soloProyecto) {
                    criterias.add(nombre1);
                } else {
                    MatchCriteriaTO nombre2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.progUsrSponsorFk.usuId", filtro.getSponsor());
                    OR_TO orCriteria = new OR_TO();
                    orCriteria.setCriteria1(nombre1);
                    orCriteria.setCriteria2(nombre2);
                    criterias.add(orCriteria);
                }
            }

            // Gerente o Adjunto
            if (filtro.getGerenteOAdjunto() != null && !filtro.getGerenteOAdjunto().equals(-1)) {
                MatchCriteriaTO gerente1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyUsrGerenteFk.usuId", filtro.getGerenteOAdjunto());
                MatchCriteriaTO adjunto1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyUsrAdjuntoFk.usuId", filtro.getGerenteOAdjunto());
                if (soloProyecto) {
                    OR_TO orCriteria1 = new OR_TO();
                    orCriteria1.setCriteria1(gerente1);
                    orCriteria1.setCriteria2(adjunto1);
                    criterias.add(orCriteria1);
                } else {
                    OR_TO orCriteria1 = new OR_TO();
                    orCriteria1.setCriteria1(gerente1);
                    orCriteria1.setCriteria2(adjunto1);

                    MatchCriteriaTO gerente2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.progUsrGerenteFk.usuId", filtro.getGerenteOAdjunto());
                    MatchCriteriaTO adjunto2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.progUsrAdjuntoFk.usuId", filtro.getGerenteOAdjunto());
                    OR_TO orCriteria2 = new OR_TO();
                    orCriteria2.setCriteria1(gerente2);
                    orCriteria2.setCriteria2(adjunto2);

                    OR_TO orCriteria3 = new OR_TO();
                    orCriteria3.setCriteria1(orCriteria1);
                    orCriteria3.setCriteria2(orCriteria2);
                    criterias.add(orCriteria3);
                }
            }

            // PMO Federada
            if (filtro.getPmoFederada() != null && !filtro.getPmoFederada().equals(-1)) {
                MatchCriteriaTO nombre1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyUsrPmofedFk.usuId", filtro.getPmoFederada());
                if (soloProyecto) {
                    criterias.add(nombre1);
                } else {
                    MatchCriteriaTO nombre2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.progUsrPmofedFk.usuId", filtro.getPmoFederada());
                    OR_TO orCriteria = new OR_TO();
                    orCriteria.setCriteria1(nombre1);
                    orCriteria.setCriteria2(nombre2);
                    criterias.add(orCriteria);
                }
            }

            // Anio Desde
            if (filtro.getFechaDesde() != null) {
                MatchCriteriaTO anioDesde1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "proyIndices.proyindPeriodoInicio", filtro.getFechaDesde());
                if (soloProyecto) {
                    criterias.add(anioDesde1);
                } else {
                    MatchCriteriaTO anioDesde2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "proyProgFk.progIndices.progindPeriodoInicio", filtro.getFechaHasta());
                    OR_TO orCriteria = new OR_TO();
                    orCriteria.setCriteria1(anioDesde1);
                    orCriteria.setCriteria2(anioDesde2);
                    criterias.add(orCriteria);
                }
            }

            // Anio Hasta
            if (filtro.getFechaHasta() != null) {
                MatchCriteriaTO anioHasta1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESSEQUAL, "proyIndices.proyindPeriodoFin", filtro.getFechaHasta());
                if (soloProyecto) {
                    criterias.add(anioHasta1);
                } else {
                    MatchCriteriaTO anioHasta2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESSEQUAL, "proyProgFk.progIndices.progindPeriodoFin", filtro.getFechaHasta());
                    OR_TO orCriteria = new OR_TO();
                    orCriteria.setCriteria1(anioHasta1);
                    orCriteria.setCriteria2(anioHasta2);
                    criterias.add(orCriteria);
                }
            }

            //Area tematica
            if (filtro.getAreasTematicas() != null && !filtro.getAreasTematicas().isEmpty()) {
                List<CriteriaTO> areaTemCriteria = new ArrayList<>();
                for (AreasTags areaTem : filtro.getAreasTematicas()) {
                    MatchCriteriaTO areaTag1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "areasTematicasSet.arastagPk", areaTem.getArastagPk());
                    if (soloProyecto) {
                        areaTemCriteria.add(areaTag1);
                    } else {
                        MatchCriteriaTO areaTag2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.areasTematicasSet.arastagPk", areaTem.getArastagPk());
                        OR_TO orCriteria = new OR_TO();
                        orCriteria.setCriteria1(areaTag1);
                        orCriteria.setCriteria2(areaTag2);
                        areaTemCriteria.add(orCriteria);
                    }
                }

                if (areaTemCriteria.size() > 1) {
                    criterias.add(CriteriaTOUtils.createORTO(areaTemCriteria.toArray(new CriteriaTO[]{})));
                } else {
                    criterias.add(areaTemCriteria.get(0));
                }
            }

            // Interesado ambito
            if (filtro.getInteresadoAmbitoOrganizacion() != null) {
                MatchCriteriaTO ambito1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "interesadosSet.intOrgaFk.orgaAmbito.amb_pk", filtro.getInteresadoAmbitoOrganizacion().getAmbPk());
                if (soloProyecto) {
                    criterias.add(ambito1);
                } else {
                    MatchCriteriaTO ambito2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "proyProgFk.interesadosSet.intOrgaFk.orgaAmbito.amb_pk", filtro.getInteresadoAmbitoOrganizacion().getAmbPk());
                    OR_TO orCriteria = new OR_TO();
                    orCriteria.setCriteria1(ambito1);
                    orCriteria.setCriteria2(ambito2);
                    criterias.add(orCriteria);
                }
            }

            // Interesado Nombre
            if (!StringsUtils.isEmpty(filtro.getInteresadoNombre())) {
                MatchCriteriaTO nombre1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "interesadosSet.intPersonaFk.persNombre", filtro.getInteresadoNombre());
                if (soloProyecto) {
                    criterias.add(nombre1);
                } else {
                    MatchCriteriaTO nombre2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "proyProgFk.interesadosSet.intPersonaFk.persNombre", filtro.getInteresadoNombre());
                    OR_TO orCriteria = new OR_TO();
                    orCriteria.setCriteria1(nombre1);
                    orCriteria.setCriteria2(nombre2);
                    criterias.add(orCriteria);
                }
            }

            // Interesado Organizacion
            if (filtro.getInteresadoOrganizacion() != null) {
                MatchCriteriaTO nombre1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "interesadosSet.intOrgaFk.orgaPk", filtro.getInteresadoOrganizacion().getOrgaPk());
                if (soloProyecto) {
                    criterias.add(nombre1);
                } else {
                    MatchCriteriaTO nombre2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.interesadosSet.intOrgaFk.orgaPk", filtro.getInteresadoOrganizacion().getOrgaPk());
                    OR_TO orCriteria = new OR_TO();
                    orCriteria.setCriteria1(nombre1);
                    orCriteria.setCriteria2(nombre2);
                    criterias.add(orCriteria);
                }
            }

            //Interesado Rol
            if (filtro.getInteresadoRol() != null && !filtro.getInteresadoRol().equals(-1)) {
                MatchCriteriaTO nombre1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "interesadosSet.intRolintFk.rolintPk", filtro.getInteresadoRol());
                if (soloProyecto) {
                    criterias.add(nombre1);
                } else {
                    MatchCriteriaTO nombre2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.interesadosSet.intRolintFk.rolintPk", filtro.getInteresadoRol());
                    OR_TO orCriteria = new OR_TO();
                    orCriteria.setCriteria1(nombre1);
                    orCriteria.setCriteria2(nombre2);
                    criterias.add(orCriteria);
                }
            }

            //Presupuesto Proveedor
            if (filtro.getOrgaProveedor() != null && !filtro.getOrgaProveedor().equals(-1)) {
                MatchCriteriaTO orgProv1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyPreFk.adquisicionSet.adqProvOrga.orgaPk", filtro.getOrgaProveedor().getOrgaPk());
                if (soloProyecto) {
                    criterias.add(orgProv1);
                } else {
                    MatchCriteriaTO orgProv2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.progPreFk.adquisicionSet.adqProvOrga.orgaPk", filtro.getOrgaProveedor().getOrgaPk());
                    OR_TO orCriteria = new OR_TO();
                    orCriteria.setCriteria1(orgProv1);
                    orCriteria.setCriteria2(orgProv2);
                    criterias.add(orCriteria);
                }
            }

            //Presupuesto Fuente
            if (filtro.getFuenteFinanciamiento() != null && !filtro.getFuenteFinanciamiento().equals(-1)) {
                MatchCriteriaTO fuente1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyPreFk.fuenteFinanciamiento.fuePk", filtro.getFuenteFinanciamiento().getFuePk());
                MatchCriteriaTO fuente2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyPreFk.adquisicionSet.adqFuente.fuePk", filtro.getFuenteFinanciamiento().getFuePk());
                CriteriaTO fuenteA = CriteriaTOUtils.createORTO(fuente1, fuente2);
                if (soloProyecto) {
                    criterias.add(fuenteA);
                } else {
                    MatchCriteriaTO fuente3 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.progPreFk.fuenteFinanciamiento.fuePk", filtro.getFuenteFinanciamiento().getFuePk());
                    MatchCriteriaTO fuente4 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.progPreFk.adquisicionSet.adqFuente.fuePk", filtro.getFuenteFinanciamiento().getFuePk());
                    CriteriaTO fuenteB = CriteriaTOUtils.createORTO(fuente3, fuente4);
                    OR_TO orCriteria = new OR_TO();
                    orCriteria.setCriteria1(fuenteA);
                    orCriteria.setCriteria2(fuenteB);
                    criterias.add(orCriteria);
                }
            }

            // Riesgos Altos
            if (filtro.getCantidadRiesgosAltos() != null && filtro.getCantidadRiesgosAltos() > 0) {
                MatchCriteriaTO riesgoAlto1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "proyIndices.proyindRiesgoAlto", filtro.getCantidadRiesgosAltos());
                if (soloProyecto) {
                    criterias.add(riesgoAlto1);
                } else {
                    MatchCriteriaTO riesgoAlto2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "proyProgFk.progIndices.progindRiesgoAlto", filtro.getCantidadRiesgosAltos());
                    OR_TO orCriteria = new OR_TO();
                    orCriteria.setCriteria1(riesgoAlto1);
                    orCriteria.setCriteria2(riesgoAlto2);
                    criterias.add(orCriteria);
                }
            }

            // Riegos Exposicion(por colores)
            if (CollectionsUtils.isNotEmpty(filtro.getGradoRiesgo())) {
                List<CriteriaTO> listCriteriaTo = new ArrayList<>();
                for (Object grado : filtro.getGradoRiesgo()) {
                    String g = (String) grado;
                    Configuracion confAmarillo = filtro.getConfiguracion().get("RIESGO_INDICE_LIMITE_AMARILLO");
                    Configuracion confRojo = filtro.getConfiguracion().get("RIESGO_INDICE_LIMITE_ROJO");

                    if (!g.isEmpty() && confAmarillo != null && confRojo != null) {
                        switch (g) {
                            case "1":
                                MatchCriteriaTO riesgoBajo = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESSEQUAL, "proyIndices.proyindRiesgoExpo", Double.parseDouble(confAmarillo.getCnfValor()));
                                MatchCriteriaTO sinRiesgo1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NULL, "proyIndices.proyindRiesgoExpo", 1);
                                CriteriaTO criteriaBajo = CriteriaTOUtils.createORTO(riesgoBajo, sinRiesgo1);

                                if (soloProyecto) {
                                    listCriteriaTo.add(criteriaBajo);
                                } else {
                                    MatchCriteriaTO riesgoBajo2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESSEQUAL, "proyProgFk.progIndices.progindRiesgoExpo", Double.parseDouble(confAmarillo.getCnfValor()));
                                    MatchCriteriaTO sinRiesgoBajo2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NULL, "proyProgFk.progIndices.progindRiesgoExpo", 1);
                                    CriteriaTO criteriaBajo2 = CriteriaTOUtils.createORTO(riesgoBajo2, sinRiesgoBajo2);

                                    OR_TO orCriteria = new OR_TO();
                                    orCriteria.setCriteria1(criteriaBajo);
                                    orCriteria.setCriteria2(criteriaBajo2);
                                    listCriteriaTo.add(orCriteria);
                                }
                                break;

                            case "2":
                                MatchCriteriaTO riesgoMedio1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATER, "proyIndices.proyindRiesgoExpo", Double.parseDouble(confAmarillo.getCnfValor()));
                                MatchCriteriaTO riesgoMedio2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESS, "proyIndices.proyindRiesgoExpo", Double.parseDouble(confRojo.getCnfValor()));
                                AND_TO andCriteria1 = new AND_TO();
                                andCriteria1.setCriteria1(riesgoMedio1);
                                andCriteria1.setCriteria2(riesgoMedio2);
                                if (soloProyecto) {
                                    listCriteriaTo.add(andCriteria1);
                                } else {
                                    MatchCriteriaTO riesgoMedio3 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATER, "proyProgFk.progIndices.progindRiesgoExpo", Double.parseDouble(confAmarillo.getCnfValor()));
                                    MatchCriteriaTO riesgoMedio4 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESS, "proyProgFk.progIndices.progindRiesgoExpo", Double.parseDouble(confRojo.getCnfValor()));
                                    AND_TO andCriteria2 = new AND_TO();
                                    andCriteria2.setCriteria1(riesgoMedio3);
                                    andCriteria2.setCriteria2(riesgoMedio4);

                                    OR_TO orCriteria = new OR_TO();
                                    orCriteria.setCriteria1(andCriteria1);
                                    orCriteria.setCriteria2(andCriteria2);
                                    listCriteriaTo.add(orCriteria);
                                }
                                break;

                            case "3":
                                MatchCriteriaTO riesgoAlto1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "proyIndices.proyindRiesgoExpo", Double.parseDouble(confRojo.getCnfValor()));
                                if (soloProyecto) {
                                    listCriteriaTo.add(riesgoAlto1);
                                } else {
                                    MatchCriteriaTO riesgoAlto2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "proyProgFk.progIndices.progindRiesgoExpo", Double.parseDouble(confRojo.getCnfValor()));
                                    OR_TO orCriteria = new OR_TO();
                                    orCriteria.setCriteria1(riesgoAlto1);
                                    orCriteria.setCriteria2(riesgoAlto2);
                                    listCriteriaTo.add(orCriteria);
                                }
                                break;
                        }
                    }
                }
                if (!listCriteriaTo.isEmpty()) {
                    if (listCriteriaTo.size() > 1) {
                        CriteriaTO[] arrCriteriaTo = listCriteriaTo.toArray(new CriteriaTO[listCriteriaTo.size()]);
                        criterias.add(CriteriaTOUtils.createORTO(arrCriteriaTo));
                    } else {
                        criterias.add(listCriteriaTo.get(0));
                    }
                }
            }

            // Estados Filtro
            if (filtro.getEstados() != null && filtro.getEstados().size() > 0) {
                estados = filtro.getEstados();
            }
        } else {
            estados = new ArrayList<>();
            estados.add(Estados.ESTADOS.INICIO.estado_id);
            estados.add(Estados.ESTADOS.PLANIFICACION.estado_id);
            estados.add(Estados.ESTADOS.EJECUCION.estado_id);
            estados.add(Estados.ESTADOS.FINALIZADO.estado_id);
        }

        // Estados
        if (estados != null) {
            List<CriteriaTO> estadosCriteria = new ArrayList<>();
            for (Object estadoId : estados) {
                Integer estadoIdInt = Integer.parseInt(estadoId + "");
                MatchCriteriaTO estado1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyEstFk.estPk", estadoIdInt);
                if (soloProyecto) {
                    estadosCriteria.add(estado1);
                } else {
                    MatchCriteriaTO estado2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.progEstFk.estPk", estadoIdInt);
                    OR_TO orCriteria = new OR_TO();
                    orCriteria.setCriteria1(estado1);
                    orCriteria.setCriteria2(estado2);
                    estadosCriteria.add(orCriteria);
                }
            }

            if (filtro.getEstados().size() > 1) {
                criterias.add(CriteriaTOUtils.createORTO(estadosCriteria.toArray(new CriteriaTO[]{})));
            } else if (!estadosCriteria.isEmpty()) {
                criterias.add(estadosCriteria.get(0));
            }
        }

        // Activo
        if (filtro.getActivo() != null) {
            MatchCriteriaTO activo1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "activo", filtro.getActivo());
            if (soloProyecto) {
                criterias.add(activo1);
            } else {
                MatchCriteriaTO activo2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "activo", filtro.getActivo());
                OR_TO orCriteria = new OR_TO();
                orCriteria.setCriteria1(activo1);
                orCriteria.setCriteria2(activo2);
                criterias.add(orCriteria);
            }
        }

        if (criterias.size() == 1) {
            return criterias.get(0);
        }
        if (criterias.size() > 1) {
            AND_TO criteria = CriteriaTOUtils.createANDTO(criterias.toArray(new CriteriaTO[]{}));
            return criteria;
        }

        return null;
    }

    /**
     * A partir del filtro crea los criterias para realizar la consulta sobre el
     * Programa.
     *
     * @param usuario
     * @param filtro
     * @return
     */
    private CriteriaTO crearFiltroPrograma(SsUsuario usuario, FiltroInicioTO filtro, boolean incProy) {

        List<CriteriaTO> criterias = new ArrayList<>();
        // Nombre
        if (!StringsUtils.isEmpty(filtro.getNombre())) {
            MatchCriteriaTO crit1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "progNombre", filtro.getNombre());
            if (!incProy) {
                criterias.add(crit1);
            } else {
                MatchCriteriaTO crit2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "proyectosSet.proyNombre", filtro.getNombre());
                CriteriaTO nombre = CriteriaTOUtils.createORTO(crit1, crit2);
                criterias.add(nombre);
            }
        }

        // Sponsor
        if (filtro.getSponsor() != null && !filtro.getSponsor().equals(-1)) {
            MatchCriteriaTO crit1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progUsrSponsorFk.usuId", filtro.getSponsor());
            if (!incProy) {
                criterias.add(crit1);
            } else {
                MatchCriteriaTO crit2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyUsrSponsorFk.usuId", filtro.getSponsor());
                CriteriaTO nombre = CriteriaTOUtils.createORTO(crit1, crit2);
                criterias.add(nombre);
            }
        }

        // Gerente o Adjunto
        if (filtro.getGerenteOAdjunto() != null && !filtro.getGerenteOAdjunto().equals(-1)) {
            MatchCriteriaTO gerente1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progUsrGerenteFk.usuId", filtro.getGerenteOAdjunto());
            MatchCriteriaTO adjunto1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progUsrAdjuntoFk.usuId", filtro.getGerenteOAdjunto());
            OR_TO orCriteria = CriteriaTOUtils.createORTO(gerente1, adjunto1);
            if (!incProy) {
                criterias.add(orCriteria);
            } else {
                MatchCriteriaTO gerente2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyUsrGerenteFk.usuId", filtro.getGerenteOAdjunto());
                MatchCriteriaTO adjunto2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyUsrAdjuntoFk.usuId", filtro.getGerenteOAdjunto());
                OR_TO orCriteria2 = CriteriaTOUtils.createORTO(gerente2, adjunto2);
                criterias.add(CriteriaTOUtils.createORTO(orCriteria, orCriteria2));
            }
        }

        // PMO Federada
        if (filtro.getPmoFederada() != null && !filtro.getPmoFederada().equals(-1)) {
            MatchCriteriaTO crit1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progUsrPmofedFk.usuId", filtro.getPmoFederada());
            if (!incProy) {
                criterias.add(crit1);
            } else {
                MatchCriteriaTO crit2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyUsrPmofedFk.usuId", filtro.getPmoFederada());
                criterias.add(CriteriaTOUtils.createORTO(crit1, crit2));
            }
        }

        // Anio Desde
        if (filtro.getFechaDesde() != null) {
            MatchCriteriaTO anioDesde1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "progIndices.progindPeriodoInicio", filtro.getFechaDesde());
            if (!incProy) {
                criterias.add(anioDesde1);
            } else {
                MatchCriteriaTO crit2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "proyectosSet.proyIndices.proyindPeriodoInicio", filtro.getFechaDesde());
                criterias.add(CriteriaTOUtils.createORTO(anioDesde1, crit2));
            }
        }

        // Anio Hasta
        if (filtro.getFechaHasta() != null) {
            MatchCriteriaTO anioHasta1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESSEQUAL, "progIndices.progindPeriodoFin", filtro.getFechaHasta());
            if (!incProy) {
                criterias.add(anioHasta1);
            } else {
                MatchCriteriaTO anioHasta2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESSEQUAL, "proyectosSet.proyIndices.proyindPeriodoFin", filtro.getFechaHasta());
                criterias.add(CriteriaTOUtils.createORTO(anioHasta1, anioHasta2));
            }
        }

        //Area tematica
        if (filtro.getAreasTematicas() != null && !filtro.getAreasTematicas().isEmpty()) {
            List<CriteriaTO> areaTemCriteria = new ArrayList<>();
            for (AreasTags areaTem : filtro.getAreasTematicas()) {
                MatchCriteriaTO areaTag1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "areasTematicasSet.arastagPk", areaTem.getArastagPk());
                if (!incProy) {
                    areaTemCriteria.add(areaTag1);
                } else {
                    MatchCriteriaTO areaTag2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.areasTematicasSet.arastagPk", areaTem.getArastagPk());
                    areaTemCriteria.add(CriteriaTOUtils.createORTO(areaTag1, areaTag2));
                }
            }

            if (areaTemCriteria.size() > 1) {
                criterias.add(CriteriaTOUtils.createORTO(areaTemCriteria.toArray(new CriteriaTO[]{})));
            } else {
                criterias.add(areaTemCriteria.get(0));
            }
        }

        // Interesado ambito
        if (filtro.getInteresadoAmbitoOrganizacion() != null) {
            MatchCriteriaTO ambito1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "interesadosSet.intOrgaFk.orgaAmbito.amb_pk", filtro.getInteresadoAmbitoOrganizacion().getAmbPk());
            if (!incProy) {
                criterias.add(ambito1);
            } else {
                MatchCriteriaTO ambito2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "proyectosSet.interesadosSet.intOrgaFk.orgaAmbito.amb_pk", filtro.getInteresadoAmbitoOrganizacion().getAmbPk());
                criterias.add(CriteriaTOUtils.createORTO(ambito1, ambito2));
            }
        }

        // Interesado Nombre
        if (!StringsUtils.isEmpty(filtro.getInteresadoNombre())) {
            MatchCriteriaTO nombre1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "interesadosSet.intPersonaFk.persNombre", filtro.getInteresadoNombre());
            if (!incProy) {
                criterias.add(nombre1);
            } else {
                MatchCriteriaTO nombre2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "proyectosSet.interesadosSet.intPersonaFk.persNombre", filtro.getInteresadoNombre());
                criterias.add(CriteriaTOUtils.createORTO(nombre1, nombre2));
            }
        }

        // Interesado Organizacion
        if (filtro.getInteresadoOrganizacion() != null) {
            MatchCriteriaTO nombre1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "interesadosSet.intOrgaFk.orgaPk", filtro.getInteresadoOrganizacion().getOrgaPk());
            criterias.add(nombre1);
            if (!incProy) {
                criterias.add(nombre1);
            } else {
                MatchCriteriaTO nombre2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.interesadosSet.intOrgaFk.orgaPk", filtro.getInteresadoOrganizacion().getOrgaPk());
                criterias.add(CriteriaTOUtils.createORTO(nombre1, nombre2));
            }
        }

        //Interesado Rol
        if (filtro.getInteresadoRol() != null && !filtro.getInteresadoRol().equals(-1)) {
            MatchCriteriaTO nombre1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "interesadosSet.intRolintFk.rolintPk", filtro.getInteresadoRol());
            if (!incProy) {
                criterias.add(nombre1);
            } else {
                MatchCriteriaTO nombre2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.interesadosSet.intRolintFk.rolintPk", filtro.getInteresadoRol());
                criterias.add(CriteriaTOUtils.createORTO(nombre1, nombre2));
            }
        }

        //Presupuesto Proveedor
        if (filtro.getOrgaProveedor() != null) {
            MatchCriteriaTO orgProv1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progPreFk.adquisicionSet.adqProvOrga.orgaPk", filtro.getOrgaProveedor().getOrgaPk());
            if (!incProy) {
                criterias.add(orgProv1);
            } else {
                MatchCriteriaTO orgProv2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyPreFk.adquisicionSet.adqProvOrga.orgaPk", filtro.getOrgaProveedor().getOrgaPk());
                criterias.add(CriteriaTOUtils.createORTO(orgProv1, orgProv2));
            }
        }

        //Presupuesto Fuente
        if (filtro.getFuenteFinanciamiento() != null) {
            MatchCriteriaTO fuente1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progPreFk.fuenteFinanciamiento.fuePk", filtro.getFuenteFinanciamiento().getFuePk());
            MatchCriteriaTO fuente2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progPreFk.adquisicionSet.adqFuente.fuePk", filtro.getFuenteFinanciamiento().getFuePk());
            CriteriaTO fuenteA = CriteriaTOUtils.createORTO(fuente1, fuente2);
            if (!incProy) {
                criterias.add(fuenteA);
            } else {
                MatchCriteriaTO fuente3 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyPreFk.fuenteFinanciamiento.fuePk", filtro.getFuenteFinanciamiento().getFuePk());
                MatchCriteriaTO fuente4 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyPreFk.adquisicionSet.adqFuente.fuePk", filtro.getFuenteFinanciamiento().getFuePk());
                CriteriaTO fuenteB = CriteriaTOUtils.createORTO(fuente3, fuente4);
                criterias.add(CriteriaTOUtils.createORTO(fuenteA, fuenteB));
            }
        }


        // Riesgos Altos
        if (filtro.getCantidadRiesgosAltos() != null && filtro.getCantidadRiesgosAltos() > 0) {
            MatchCriteriaTO riesgoAlto1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "progIndices.progindRiesgoAlto", filtro.getCantidadRiesgosAltos());
            criterias.add(riesgoAlto1);
            if (!incProy) {
                criterias.add(riesgoAlto1);
            } else {
                MatchCriteriaTO riesgoAlto2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "proyectosSet.proyIndices.proyindRiesgoAlto", filtro.getCantidadRiesgosAltos());
                criterias.add(CriteriaTOUtils.createORTO(riesgoAlto1, riesgoAlto2));
            }
        }

        // Riegos Exposicion(por colores)
        if (CollectionsUtils.isNotEmpty(filtro.getGradoRiesgo())) {
            List<CriteriaTO> listCriteriaTo = new ArrayList<>();

            for (Object grado : filtro.getGradoRiesgo()) {
                String g = (String) grado;
                Configuracion confAmarillo = filtro.getConfiguracion().get("RIESGO_INDICE_LIMITE_AMARILLO");
                Configuracion confRojo = filtro.getConfiguracion().get("RIESGO_INDICE_LIMITE_ROJO");

                if (!g.isEmpty() && confAmarillo != null && confRojo != null) {
                    switch (g) {
                        case "1":
                            MatchCriteriaTO riesgoBajo = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESSEQUAL, "progIndices.progindRiesgoExpo", Double.parseDouble(confAmarillo.getCnfValor()));
                            MatchCriteriaTO sinRiesgo1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NULL, "progIndices.progindRiesgoExpo", 1);
                            MatchCriteriaTO sinRiesgo2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progIndices.progindRiesgoExpo", 0d);
                            if (!incProy) {
                                listCriteriaTo.add(CriteriaTOUtils.createORTO(riesgoBajo, sinRiesgo1, sinRiesgo2));
                            } else {
                                MatchCriteriaTO riesgoBajoB = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESSEQUAL, "proyectosSet.proyIndices.progindRiesgoExpo", Double.parseDouble(confAmarillo.getCnfValor()));
                                MatchCriteriaTO sinRiesgo1B = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NULL, "proyectosSet.proyIndices.progindRiesgoExpo", 1);
                                MatchCriteriaTO sinRiesgo2B = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyIndices.progindRiesgoExpo", 0d);
                                listCriteriaTo.add(CriteriaTOUtils.createORTO(riesgoBajo, sinRiesgo1, sinRiesgo2, riesgoBajoB, sinRiesgo1B, sinRiesgo2B));
                            }
                            break;

                        case "2":
                            MatchCriteriaTO riesgoMedio1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATER, "progIndices.progindRiesgoExpo", Double.parseDouble(confAmarillo.getCnfValor()));
                            MatchCriteriaTO riesgoMedio2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESS, "progIndices.progindRiesgoExpo", Double.parseDouble(confRojo.getCnfValor()));
                            AND_TO riesgoMedio = CriteriaTOUtils.createANDTO(riesgoMedio1, riesgoMedio2);
                            if (!incProy) {
                                listCriteriaTo.add(riesgoMedio);
                            } else {
                                MatchCriteriaTO riesgoMedio1B = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATER, "proyectosSet.proyIndices.progindRiesgoExpo", Double.parseDouble(confAmarillo.getCnfValor()));
                                MatchCriteriaTO riesgoMedio2B = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESS, "proyectosSet.proyIndices.progindRiesgoExpo", Double.parseDouble(confRojo.getCnfValor()));
                                AND_TO riesgoMedioB = CriteriaTOUtils.createANDTO(riesgoMedio1B, riesgoMedio2B);
                                listCriteriaTo.add(CriteriaTOUtils.createORTO(riesgoMedio, riesgoMedioB));
                            }
                            break;

                        case "3":
                            MatchCriteriaTO riesgoAlto = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "progIndices.progindRiesgoExpo", Double.parseDouble(confRojo.getCnfValor()));
                            if (!incProy) {
                                listCriteriaTo.add(riesgoAlto);
                            } else {
                                MatchCriteriaTO riesgoAltoB = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "proyectosSet.proyIndices.progindRiesgoExpo", Double.parseDouble(confRojo.getCnfValor()));
                                listCriteriaTo.add(CriteriaTOUtils.createORTO(riesgoAlto, riesgoAltoB));
                            }
                            break;
                    }
                }
            }

            if (!listCriteriaTo.isEmpty()) {
                if (listCriteriaTo.size() > 1) {
                    CriteriaTO[] arrCriteriaTo = listCriteriaTo.toArray(new CriteriaTO[listCriteriaTo.size()]);
                    criterias.add(CriteriaTOUtils.createORTO(arrCriteriaTo));
                } else {
                    criterias.add(listCriteriaTo.get(0));
                }
            }
        }

        // Estados Filtro
        List<Object> estados;
        if (filtro.getEstados() != null && filtro.getEstados().size() > 0) {
            estados = filtro.getEstados();
        } else {
            estados = new ArrayList<>();
            estados.add(Estados.ESTADOS.INICIO.estado_id);
            estados.add(Estados.ESTADOS.PLANIFICACION.estado_id);
            estados.add(Estados.ESTADOS.EJECUCION.estado_id);
            estados.add(Estados.ESTADOS.FINALIZADO.estado_id);
        }

        // Estados
        if (estados != null) {
            List<CriteriaTO> estadosCriteria = new ArrayList<>();
            for (Object estadoId : estados) {
                Integer estadoIdInt = Integer.parseInt(estadoId + "");
                MatchCriteriaTO estado1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progEstFk.estPk", estadoIdInt);
                if (!incProy) {
                    estadosCriteria.add(estado1);
                } else {
                    MatchCriteriaTO estado2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyEstFk.estPk", estadoIdInt);
                    OR_TO orCriteria = CriteriaTOUtils.createORTO(estado1, estado2);
                    estadosCriteria.add(orCriteria);
                }
            }

            if (!estadosCriteria.isEmpty()) {
                criterias.add(CriteriaTOUtils.createORTO(estadosCriteria.toArray(new CriteriaTO[]{})));
            }
        }

        // Activo
        if (filtro.getActivo() != null) {
            MatchCriteriaTO activo1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "activo", filtro.getActivo());
            criterias.add(activo1);
            if (!incProy) {
                criterias.add(activo1);
            } else {
                MatchCriteriaTO activo2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.activo", filtro.getActivo());
                criterias.add(CriteriaTOUtils.createORTO(activo1, activo2));
            }
        }

        if (criterias.size() == 1) {
            return criterias.get(0);
        }
        if (criterias.size() > 1) {
            AND_TO criteria = CriteriaTOUtils.createANDTO(criterias.toArray(new CriteriaTO[]{}));
            return criteria;
        }

        return null;
    }

    /**
     * Retorna los proyectos que no dependen de un programa y aplicando el
     * filtro.
     *
     * @param orgId
     * @param areaId
     * @param usuario
     * @param filtro
     * @return
     * @throws DAOGeneralException
     */
    public List<Proyectos> buscarProyHuerfanosPorFiltro(Integer orgId, Integer areaId, SsUsuario usuario, FiltroInicioTO filtro) throws DAOGeneralException {
        return buscarProyectosPorFiltro(orgId, areaId, usuario, filtro, true);
    }

    /**
     * Retorna los proyectos que dependen de un programa y se le aplica el
     * filtro.
     *
     * @param orgId
     * @param areaId
     * @param usuario
     * @param filtro
     * @return
     * @throws DAOGeneralException
     */
    public List<Proyectos> buscarProyPorFiltro(Integer orgId, Integer areaId, SsUsuario usuario, FiltroInicioTO filtro) throws DAOGeneralException {
        return buscarProyectosPorFiltro(orgId, areaId, usuario, filtro, false);
    }

    /**
     * Retorna los proyectos de un programa según el filtro.
     *
     * @param orgId
     * @param areaId
     * @param usuario
     * @param filtro
     * @return
     * @throws DAOGeneralException
     */
    public List<Proyectos> buscarProyPorFiltroYProg(Integer orgId, Integer areaId, SsUsuario usuario, FiltroInicioTO filtro) throws DAOGeneralException {
        return buscarProyectosPorFiltro(orgId, areaId, usuario, filtro, false);
    }

    /**
     * Dado el filtro de búsqueda retorna la lista de proyectos que no tienen
     * programas asociados y cumplen con el filtro
     *
     * @param orgId la organización seleccionado del usuario
     * @param areaId la area seleccionada
     * @param usuario el usaurio que realiza la búsqueda
     * @param filtro el filtro
     * @return la lista de proyectos
     * @throws DAOGeneralException
     */
    public List<Proyectos> buscarProyectosPorFiltro(Integer orgId, Integer areaId, SsUsuario usuario, FiltroInicioTO filtro, boolean huerfanos) throws DAOGeneralException {

        CriteriaTO criteriaArea;
        CriteriaTO criteriaOrga;

        // Area
        MatchCriteriaTO proyArea1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyAreaFk.areaPk", areaId);
        if (huerfanos) {
            criteriaArea = proyArea1;
        } else {
            MatchCriteriaTO proyArea2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.progAreaFk.areaPk", areaId);
            OR_TO or1 = CriteriaTOUtils.createORTO(proyArea1, proyArea2);
            criteriaArea = or1;

        }

        // Organismo
        MatchCriteriaTO proyOrga1 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyOrgFk.orgPk", orgId);
        if (huerfanos) {
            criteriaOrga = proyOrga1;
        } else {
            MatchCriteriaTO proyOrga2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.progOrgFk.orgPk", orgId);
            OR_TO or2 = CriteriaTOUtils.createORTO(proyOrga1, proyOrga2);
            criteriaOrga = or2;
        }

        CriteriaTO criteriaFiltro = null;
        if (filtro != null) {
            criteriaFiltro = crearFiltroProyecto(usuario, filtro, huerfanos);
        }

        CriteriaTO criteria;
        if (criteriaFiltro != null) {
            if (huerfanos) {
                MatchCriteriaTO proyHuerfano = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NULL, "proyProgFk", 1);
                criteria = CriteriaTOUtils.createANDTO(criteriaArea, criteriaOrga, proyHuerfano, criteriaFiltro);
            } else {
                criteria = CriteriaTOUtils.createANDTO(criteriaArea, criteriaOrga, criteriaFiltro);
            }
        } else {
            if (huerfanos) {
                MatchCriteriaTO proyHuerfano = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NULL, "proyProgFk", 1);
                criteria = CriteriaTOUtils.createANDTO(criteriaArea, criteriaOrga, proyHuerfano);
            } else {
                criteria = CriteriaTOUtils.createANDTO(criteriaArea, criteriaOrga);
            }
        }

//        printCriteria(criteria, 2, 1);

        List<Proyectos> proyectosResult = super.findEntityByCriteria(Proyectos.class, criteria, new String[]{"proyNombre"}, new boolean[]{true}, null, null);
        return proyectosResult;
    }

    /**
     * Dado el filtro de búsqueda retorna la lista de programas que cumplen con
     * el filtro.
     *
     * @param orgId
     * @param areaId
     * @param usuario
     * @param filtro
     * @return List<Programas>
     * @throws DAOGeneralException
     */
    public List<Programas> buscarProgPorFiltro(Integer orgId, Integer areaId, SsUsuario usuario, FiltroInicioTO filtro, boolean incProy) throws DAOGeneralException {

        CriteriaTO criteriaArea;
        CriteriaTO criteriaOrga;

        // Area
        MatchCriteriaTO progArea = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progAreaFk.areaPk", areaId);
        MatchCriteriaTO proyArea = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyAreaFk.areaPk", areaId);
        MatchCriteriaTO proyActivo = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.activo", !Boolean.FALSE);

        AND_TO andProy = new AND_TO();
        andProy.setCriteria1(proyArea);
        andProy.setCriteria2(proyActivo);
        CriteriaTO proyHijo = andProy;

        OR_TO orCriteria = new OR_TO();
        orCriteria.setCriteria1(progArea);
        orCriteria.setCriteria2(proyHijo);
        criteriaArea = orCriteria;

        // Organismo
        MatchCriteriaTO progOrga = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "progOrgFk.orgPk", orgId);
        criteriaOrga = progOrga;

        CriteriaTO criteriaFiltroProg = null;
        if (filtro != null) {
//            criteriaFiltroProg = crearFiltroPrograma(usuario, filtro, incProy);
            criteriaFiltroProg = crearFiltroProgramaPorProy(filtro);
        }

        CriteriaTO criteria;
        if (criteriaFiltroProg != null) {
            criteria = CriteriaTOUtils.createANDTO(criteriaArea, criteriaOrga, criteriaFiltroProg);
        } else {
            criteria = CriteriaTOUtils.createANDTO(criteriaArea, criteriaOrga);
        }

        ProgramasDAO progDao = new ProgramasDAO(super.getEm());
        List<Programas> programasResult = progDao.findEntityByCriteria(Programas.class, criteria, new String[]{"progNombre"}, new boolean[]{true}, null, null);
        return programasResult;
    }

    /**
     * Busca los Programas cuyos Proyectos coinciden en el área buscada.
     *
     * @param orgId
     * @param areaId
     * @return
     * @throws DAOGeneralException
     */
    public List<Programas> buscarProgramasPorAreaProyecto(Integer orgId, Integer areaId, FiltroInicioTO filtro) throws DAOGeneralException {
        List<Programas> programasResult = new ArrayList<>();

        // Area
        CriteriaTO criteriaArea = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyAreaFk.areaPk", areaId);

        // Organismo
        CriteriaTO criteriaOrga = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyOrgFk.orgPk", orgId);

        //Activo
        MatchCriteriaTO criteriaProyActivo = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "activo", !Boolean.FALSE);
        MatchCriteriaTO criteriaProgActivo = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.activo", !Boolean.FALSE);
        CriteriaTO criteriaActivo = CriteriaTOUtils.createANDTO(criteriaProgActivo, criteriaProyActivo);

        //No sea huerfano
        CriteriaTO criteriaNoHuerfano = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NOT_EQUALS, "proyProgFk", null);

        //Estado
        List<Object> estados = null;
        if (filtro.getEstados() != null && filtro.getEstados().size() > 0) {
            estados = filtro.getEstados();
        } else {
            estados = new ArrayList<>();
            estados.add(Estados.ESTADOS.INICIO.estado_id);
            estados.add(Estados.ESTADOS.PLANIFICACION.estado_id);
            estados.add(Estados.ESTADOS.EJECUCION.estado_id);
            estados.add(Estados.ESTADOS.FINALIZADO.estado_id);
        }

        List<CriteriaTO> estadosCriteria = new ArrayList<>();
        for (Object estadoId : estados) {
            Integer estadoIdInt = Integer.parseInt(estadoId + "");
            MatchCriteriaTO criteriaProyEstado = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyEstFk.estPk", estadoIdInt);
            MatchCriteriaTO criteriaProgEstado = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyProgFk.progEstFk.estPk", estadoIdInt);
            OR_TO orCriteria = new OR_TO();
            orCriteria.setCriteria1(criteriaProyEstado);
            orCriteria.setCriteria2(criteriaProgEstado);
            estadosCriteria.add(orCriteria);
        }

        CriteriaTO criteriaEstado;
        if (estadosCriteria.size() > 1) {
            criteriaEstado = CriteriaTOUtils.createORTO(estadosCriteria.toArray(new CriteriaTO[]{}));
        } else {
            criteriaEstado = estadosCriteria.get(0);
        }

        //Todas las criterias
        CriteriaTO criteria = CriteriaTOUtils.createANDTO(criteriaArea, criteriaOrga, criteriaActivo, criteriaNoHuerfano, criteriaEstado);

        List<EntityReference<Integer>> proyectosResult = super.findEntityReferenceByCriteria(Proyectos.class, criteria, new String[]{"proyNombre"}, new boolean[]{true}, null, null, "proyProgFk");
        for (EntityReference<Integer> proy : proyectosResult) {
            if (proy.getPropertyMap().get("proyProgFk") != null && !programasResult.contains(proy.getPropertyMap().get("proyProgFk"))) {
                programasResult.add((Programas) proy.getPropertyMap().get("proyProgFk"));
            }
        }
        return programasResult;
    }

    private void printCriteria(CriteriaTO c, int i, int k) {
        if (c == null) {
            System.out.println(k + " :" + sps(i) + " NULL");
        } else if (c instanceof MatchCriteriaTO) {
            MatchCriteriaTO m = (MatchCriteriaTO) c;
            System.out.println(k + " :" + sps(i) + " " + m.getProperty() + " " + m.getMatchType() + " " + m.getValue());

        } else if (c instanceof AND_TO) {
            AND_TO a = (AND_TO) c;
            printCriteria(a.getCriteria1(), i + 1, k++);
            System.out.println(k + " :" + sps(i) + " AND ");
            printCriteria(a.getCriteria2(), i + 1, k++);

        } else if (c instanceof OR_TO) {
            OR_TO a = (OR_TO) c;
            printCriteria(a.getCriteria1(), i + 1, k++);
            System.out.println(k + " :" + sps(i) + " OR ");
            printCriteria(a.getCriteria2(), i + 1, k++);

        } else {
            System.out.println(k + " :--" + c.toString());
        }
    }

    private String sps(int i) {
        String s = "";
        for (int j = 0; j < i; j++) {
            s += "  ";
        }
        return s;
    }

    private CriteriaTO crearFiltroProgramaPorProy(FiltroInicioTO filtro) {

        List<CriteriaTO> criterias = new ArrayList<>();
        // Nombre
        if (!StringsUtils.isEmpty(filtro.getNombre())) {
            MatchCriteriaTO crit2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "proyectosSet.proyNombre", filtro.getNombre());
            criterias.add(crit2);
        }

        // Sponsor
        if (filtro.getSponsor() != null && !filtro.getSponsor().equals(-1)) {
            MatchCriteriaTO crit2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyUsrSponsorFk.usuId", filtro.getSponsor());
            criterias.add(crit2);
        }

        // Gerente o Adjunto
        if (filtro.getGerenteOAdjunto() != null && !filtro.getGerenteOAdjunto().equals(-1)) {
            MatchCriteriaTO gerente2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyUsrGerenteFk.usuId", filtro.getGerenteOAdjunto());
            MatchCriteriaTO adjunto2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyUsrAdjuntoFk.usuId", filtro.getGerenteOAdjunto());
            OR_TO orCriteria2 = CriteriaTOUtils.createORTO(gerente2, adjunto2);
            criterias.add(orCriteria2);
        }

        // PMO Federada
        if (filtro.getPmoFederada() != null && !filtro.getPmoFederada().equals(-1)) {
            MatchCriteriaTO crit2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyUsrPmofedFk.usuId", filtro.getPmoFederada());
            criterias.add(crit2);
        }

        // Anio Desde
        if (filtro.getFechaDesde() != null) {
            MatchCriteriaTO crit2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "proyectosSet.proyIndices.proyindPeriodoInicio", filtro.getFechaDesde());
            criterias.add(crit2);
        }

        // Anio Hasta
        if (filtro.getFechaHasta() != null) {
            MatchCriteriaTO anioHasta2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESSEQUAL, "proyectosSet.proyIndices.proyindPeriodoFin", filtro.getFechaHasta());
            criterias.add(anioHasta2);
        }

        //Area tematica
        if (filtro.getAreasTematicas() != null && !filtro.getAreasTematicas().isEmpty()) {
            List<CriteriaTO> areaTemCriteria = new ArrayList<>();
            for (AreasTags areaTem : filtro.getAreasTematicas()) {
                MatchCriteriaTO areaTag2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.areasTematicasSet.arastagPk", areaTem.getArastagPk());
                areaTemCriteria.add(areaTag2);
            }

            if (areaTemCriteria.size() > 1) {
                criterias.add(CriteriaTOUtils.createORTO(areaTemCriteria.toArray(new CriteriaTO[]{})));
            } else {
                criterias.add(areaTemCriteria.get(0));
            }
        }

        // Interesado ambito
        if (filtro.getInteresadoAmbitoOrganizacion() != null) {
            MatchCriteriaTO ambito2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "proyectosSet.interesadosSet.intOrgaFk.orgaAmbito.amb_pk", filtro.getInteresadoAmbitoOrganizacion().getAmbPk());
            criterias.add(ambito2);
        }

        // Interesado Nombre
        if (!StringsUtils.isEmpty(filtro.getInteresadoNombre())) {
            MatchCriteriaTO nombre2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.CONTAINS, "proyectosSet.interesadosSet.intPersonaFk.persNombre", filtro.getInteresadoNombre());
            criterias.add(nombre2);
        }

        // Interesado Organizacion
        if (filtro.getInteresadoOrganizacion() != null) {
            MatchCriteriaTO nombre2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.interesadosSet.intOrgaFk.orgaPk", filtro.getInteresadoOrganizacion().getOrgaPk());
            criterias.add(nombre2);
        }

        //Interesado Rol
        if (filtro.getInteresadoRol() != null && !filtro.getInteresadoRol().equals(-1)) {
            MatchCriteriaTO nombre2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.interesadosSet.intRolintFk.rolintPk", filtro.getInteresadoRol());
            criterias.add(nombre2);
        }

        //Presupuesto Proveedor
        if (filtro.getOrgaProveedor() != null) {
            MatchCriteriaTO orgProv2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyPreFk.adquisicionSet.adqProvOrga.orgaPk", filtro.getOrgaProveedor().getOrgaPk());
            criterias.add(orgProv2);
        }

        //Presupuesto Fuente
        if (filtro.getFuenteFinanciamiento() != null) {
            MatchCriteriaTO fuente3 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyPreFk.fuenteFinanciamiento.fuePk", filtro.getFuenteFinanciamiento().getFuePk());
            MatchCriteriaTO fuente4 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyPreFk.adquisicionSet.adqFuente.fuePk", filtro.getFuenteFinanciamiento().getFuePk());
            CriteriaTO fuenteB = CriteriaTOUtils.createORTO(fuente3, fuente4);
            criterias.add(fuenteB);
        }


        // Riesgos Altos
        if (filtro.getCantidadRiesgosAltos() != null && filtro.getCantidadRiesgosAltos() > 0) {
            MatchCriteriaTO riesgoAlto2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "proyectosSet.proyIndices.proyindRiesgoAlto", filtro.getCantidadRiesgosAltos());
            criterias.add(riesgoAlto2);
        }

        // Riegos Exposicion(por colores)
        if (CollectionsUtils.isNotEmpty(filtro.getGradoRiesgo())) {
            List<CriteriaTO> listCriteriaTo = new ArrayList<>();

            for (Object grado : filtro.getGradoRiesgo()) {
                String g = (String) grado;
                Configuracion confAmarillo = filtro.getConfiguracion().get("RIESGO_INDICE_LIMITE_AMARILLO");
                Configuracion confRojo = filtro.getConfiguracion().get("RIESGO_INDICE_LIMITE_ROJO");

                if (!g.isEmpty() && confAmarillo != null && confRojo != null) {
                    switch (g) {
                        case "1":
                            MatchCriteriaTO riesgoBajoB = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESSEQUAL, "proyectosSet.proyIndices.proyindRiesgoExpo", Double.parseDouble(confAmarillo.getCnfValor()));
                            MatchCriteriaTO sinRiesgo1B = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NULL, "proyectosSet.proyIndices.proyindRiesgoExpo", 1);
                            MatchCriteriaTO sinRiesgo2B = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyIndices.proyindRiesgoExpo", 0d);
                            listCriteriaTo.add(CriteriaTOUtils.createORTO(riesgoBajoB, sinRiesgo1B, sinRiesgo2B));
                            break;

                        case "2":
                            MatchCriteriaTO riesgoMedio1B = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATER, "proyectosSet.proyIndices.proyindRiesgoExpo", Double.parseDouble(confAmarillo.getCnfValor()));
                            MatchCriteriaTO riesgoMedio2B = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.LESS, "proyectosSet.proyIndices.proyindRiesgoExpo", Double.parseDouble(confRojo.getCnfValor()));
                            AND_TO riesgoMedioB = CriteriaTOUtils.createANDTO(riesgoMedio1B, riesgoMedio2B);
                            listCriteriaTo.add(riesgoMedioB);
                            break;

                        case "3":
                            MatchCriteriaTO riesgoAltoB = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.GREATEREQUAL, "proyectosSet.proyIndices.proyindRiesgoExpo", Double.parseDouble(confRojo.getCnfValor()));
                            listCriteriaTo.add(riesgoAltoB);
                            break;
                    }
                }
            }

            if (!listCriteriaTo.isEmpty()) {
                if (listCriteriaTo.size() > 1) {
                    CriteriaTO[] arrCriteriaTo = listCriteriaTo.toArray(new CriteriaTO[listCriteriaTo.size()]);
                    criterias.add(CriteriaTOUtils.createORTO(arrCriteriaTo));
                } else {
                    criterias.add(listCriteriaTo.get(0));
                }
            }
        }

        // Estados Filtro
        List<Object> estados;
        if (filtro.getEstados() != null && filtro.getEstados().size() > 0) {
            estados = filtro.getEstados();
        } else {
            estados = new ArrayList<>();
            estados.add(Estados.ESTADOS.INICIO.estado_id);
            estados.add(Estados.ESTADOS.PLANIFICACION.estado_id);
            estados.add(Estados.ESTADOS.EJECUCION.estado_id);
            estados.add(Estados.ESTADOS.FINALIZADO.estado_id);
        }

        // Estados
        if (estados != null) {
            List<CriteriaTO> estadosCriteria = new ArrayList<>();
            for (Object estadoId : estados) {
                Integer estadoIdInt = Integer.parseInt(estadoId + "");
                MatchCriteriaTO estado2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.proyEstFk.estPk", estadoIdInt);
                estadosCriteria.add(estado2);
            }

            if (filtro.getEstados().size() > 1) {
                criterias.add(CriteriaTOUtils.createORTO(estadosCriteria.toArray(new CriteriaTO[]{})));
            } else if (!estadosCriteria.isEmpty()) {
                criterias.add(estadosCriteria.get(0));
            }
        }

        // Activo
        if (filtro.getActivo() != null) {
            MatchCriteriaTO activo2 = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "proyectosSet.activo", filtro.getActivo());
            criterias.add(activo2);
        }

        if (criterias.size() == 1) {
            return criterias.get(0);
        }
        if (criterias.size() > 1) {
            AND_TO criteria = CriteriaTOUtils.createANDTO(criterias.toArray(new CriteriaTO[]{}));
            return criteria;
        }

        return null;
    }
}
