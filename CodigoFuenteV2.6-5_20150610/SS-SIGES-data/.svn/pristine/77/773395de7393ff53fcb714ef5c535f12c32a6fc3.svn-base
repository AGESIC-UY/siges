package com.sofis.data.daos;

import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.constantes.ConstantesEstandares;
import com.sofis.entities.data.Adquisicion;
import com.sofis.entities.data.Pagos;
import com.sofis.entities.tipos.AdqPagosTO;
import com.sofis.generico.utils.generalutils.StringsUtils;
import com.sofis.persistence.dao.exceptions.DAOGeneralException;
import com.sofis.persistence.dao.imp.hibernate.HibernateJpaDAOImp;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.Query;

/**
 *
 * @author Usuario
 */
public class AdquisicionDAO extends HibernateJpaDAOImp<Adquisicion, Integer> implements Serializable {

    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);
    private static final long serialVersionUID = 1L;

    public AdquisicionDAO(EntityManager em) {
        super(em);
    }

    public List<AdqPagosTO> obtenerAdquisicionPagosList(Integer presupuestoId) throws DAOGeneralException {

        List<AdqPagosTO> resultado = new ArrayList<>();
        List<Adquisicion> adquisiciones = this.findByOneProperty(Adquisicion.class, "adqPreFk.prePk", presupuestoId, "adqPk");
        for (Adquisicion a : adquisiciones) {
            AdqPagosTO adq = new AdqPagosTO();
            adq.setTipo(1);
            adq.setAdqPk(a.getAdqPk());
            adq.setMonedaSigno(a.getAdqMoneda().getMonSigno());
            adq.setFuenteNombre(a.getAdqFuente().getFueNombre());
            adq.setAdqNombre(a.getAdqNombre());
            adq.setOrgaNombre(a.getAdqProvOrga() != null ? a.getAdqProvOrga().getOrgaNombre() : null);
            adq.setImportePlan(0d);
            adq.setImporteReal(0d);
            adq.setImporteSaldo(0d);
            adq.setProcCompra(a.getAdqProcCompra());
            adq.setProcCompraGrp(a.getAdqProcCompraGrp());

            resultado.add(adq);

            //procesa los pagos y suma
            SimpleDateFormat sf = new SimpleDateFormat(ConstantesEstandares.CALENDAR_PATTERN);

            List<Pagos> listaPagos = new ArrayList(a.getPagosSet());
            Collections.sort(listaPagos, new Comparator<Pagos>() {
                @Override
                public int compare(Pagos o1, Pagos o2) {
                    if (o1 != null && o1.getPagFechaPlanificada() != null && o2 != null && o2.getPagFechaPlanificada() != null) {
                        return o1.getPagFechaPlanificada().compareTo(o2.getPagFechaPlanificada());
                    }
                    return 0;
                }
            });

            for (Pagos p : listaPagos) {
                AdqPagosTO pago = new AdqPagosTO();
                pago.setTipo(2);
                pago.setPagPk(p.getPagPk());
                if (p.getEntregables() != null) {
                    String dateS = "";
                    if (p.getEntregables().getEntFin() != null) {
                        Date d = new Date();
                        d.setTime(p.getEntregables().getEntFin());
                        dateS = StringsUtils.concat(" (", sf.format(d), ")");
                    }

                    pago.setAdqNombre(StringsUtils.concat(p.getEntregables().getEntNombre(), dateS));
                }
                pago.setImportePlan(p.getPagImportePlanificado());
                pago.setImporteReal(p.getPagImporteReal());
                if (p.getPagImporteReal() != null) {
                    pago.setImporteSaldo(p.getPagImportePlanificado() - p.getPagImporteReal());
                }
                pago.setFechaPlan(p.getPagFechaPlanificada());
                pago.setFechaReal(p.getPagFechaReal());
                if (pago.getImporteReal() != null && pago.getImportePlan() != null) {
                    pago.setEjecucion(pago.getImporteReal() != null && pago.getImportePlan() != null ? pago.getImporteReal() * 100 / pago.getImportePlan() : 0d);
                }
                if (p.getPagImportePlanificado() != null) {
                    adq.setImportePlan(adq.getImportePlan() + p.getPagImportePlanificado());
                }

                if (p.getPagImporteReal() != null) {
                    adq.setImporteReal(adq.getImporteReal() + p.getPagImporteReal());
                }
                if (pago.getImporteSaldo() != null) {
                    adq.setImporteSaldo(adq.getImporteSaldo() + pago.getImporteSaldo());
                }

                adq.setReferencia(p.getPagTxtReferencia());
                adq.setConfirmado(p.getPagConfirmar());

                resultado.add(pago);
            }
        }

        return resultado;
    }

    public List<Adquisicion> obtenerAdquisicionPorPre(Integer prePk) throws DAOGeneralException{
        List<Adquisicion> adquisiciones = this.findByOneProperty(Adquisicion.class, "adqPreFk.prePk", prePk, "adqPk");
        return adquisiciones;
    }

    public List<Adquisicion> obtenerAdquisicionPorPreProg(Integer progPk) throws DAOGeneralException{
        
        String query = "SELECT b"
                + " FROM Programas p,"
                + " IN(p.proyectosSet) proy,"
                + " IN(proy.proyPreFk.adquisicionSet) b"
                + " WHERE proy.proyProgFk.progPk = :progPk";

        Query q = super.getEm().createQuery(query);
        q.setParameter("progPk", progPk);

        List<Adquisicion> adqList = q.getResultList();
        return adqList;
    }
}
