package com.sofis.business.ejbs;

import com.sofis.business.interceptors.LoggedInterceptor;
import com.sofis.data.daos.OrganiIntProveDAO;
import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.constantes.MensajesNegocio;
import com.sofis.entities.data.OrganiIntProve;
import com.sofis.exceptions.BusinessException;
import com.sofis.exceptions.GeneralException;
import com.sofis.exceptions.TechnicalException;
import com.sofis.persistence.dao.exceptions.DAOGeneralException;
import com.sofis.sofisform.to.CriteriaTO;
import com.sofis.sofisform.to.MatchCriteriaTO;
import com.sofis.sofisform.to.OR_TO;
import com.sofis.utils.CriteriaTOUtils;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.inject.Named;
import javax.interceptor.Interceptors;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author Usuario
 */
@Named
@Stateless(name = "OrganiIntProveBean")
@LocalBean
@Interceptors({LoggedInterceptor.class})
public class OrganiIntProveBean {

    @PersistenceContext(unitName = ConstanteApp.PERSISTENCE_CONTEXT_UNIT_NAME)
    private EntityManager em;
    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);
    
    public OrganiIntProve guardar(OrganiIntProve orga){
        OrganiIntProveDAO dao = new OrganiIntProveDAO(em);
        try {
            return dao.update(orga);
        } catch (DAOGeneralException ex) {
            logger.log(Level.SEVERE, null, ex);
            BusinessException be = new BusinessException();
            be.addError(MensajesNegocio.ERROR_ORGANIZACION_GUARDAR);
            throw be;
        }
    }

    /**
     * Devuelve el elemento OrganiIntProve por el ID
     *
     * @param id
     * @return
     * @throws GeneralException
     */
    public OrganiIntProve obtenerOrganiIntProvePorId(Integer id) throws GeneralException {
        OrganiIntProveDAO organiIntProveDAO = new OrganiIntProveDAO(em);
        try {
            return organiIntProveDAO.findById(OrganiIntProve.class, id);
        } catch (DAOGeneralException ex) {
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }

    public List<OrganiIntProve> obtenerOrganiIntProvePorOrgPk(Integer orgPk) throws GeneralException {
        OrganiIntProveDAO organiIntProveDAO = new OrganiIntProveDAO(em);
        try {
            return organiIntProveDAO.findByOneProperty(OrganiIntProve.class, "orgaOrgFk.orgPk", orgPk, "orgaNombre");
        } catch (DAOGeneralException ex) {
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }

    public List<OrganiIntProve> obtenerProveedores(Integer orgPk) {
        OrganiIntProveDAO organiIntProveDAO = new OrganiIntProveDAO(em);
        try {
            CriteriaTO criteriaOrga = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "orgaOrgFk.orgPk", orgPk);
            CriteriaTO criteriaProv = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "orgaProveedor", Boolean.TRUE);
            CriteriaTO criteria = CriteriaTOUtils.createANDTO(criteriaOrga, criteriaProv);

            return organiIntProveDAO.findEntityByCriteria(OrganiIntProve.class, criteria, new String[]{"orgaNombre"}, new boolean[]{true}, null, null);
        } catch (Exception ex) {
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }
    
    public List<OrganiIntProve> obtenerInteresados(Integer orgPk) {
        OrganiIntProveDAO organiIntProveDAO = new OrganiIntProveDAO(em);
        try {
            CriteriaTO criteriaOrga = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "orgaOrgFk.orgPk", orgPk);
            CriteriaTO criteriaProvNull = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.NULL, "orgaProveedor", 1);
            CriteriaTO criteriaProvFalse = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "orgaProveedor", Boolean.FALSE);
            OR_TO or_to = new OR_TO(criteriaProvNull, criteriaProvFalse);
            CriteriaTO criteria = CriteriaTOUtils.createANDTO(criteriaOrga, or_to);

            return organiIntProveDAO.findEntityByCriteria(OrganiIntProve.class, criteria, new String[]{"orgaNombre"}, new boolean[]{true}, null, null);
        } catch (Exception ex) {
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }
}
