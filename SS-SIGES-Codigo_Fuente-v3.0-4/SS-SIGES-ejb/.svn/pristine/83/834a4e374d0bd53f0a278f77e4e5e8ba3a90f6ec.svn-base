package com.sofis.business.ejbs;

import com.sofis.business.properties.LabelsEJB;
import com.sofis.data.daos.NotificacionDAO;
import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.constantes.ConstantesNotificaciones;
import com.sofis.entities.constantes.MensajesNegocio;
import com.sofis.entities.data.Notificacion;
import com.sofis.entities.data.Organismos;
import com.sofis.exceptions.BusinessException;
import com.sofis.persistence.dao.exceptions.DAOGeneralException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.inject.Named;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author Usuario
 */
@Named
@Stateless(name = "notificacionBean")
@LocalBean
public class NotificacionBean {

    @PersistenceContext(unitName = ConstanteApp.PERSISTENCE_CONTEXT_UNIT_NAME)
    private EntityManager em;
    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);
    @Inject
    private DatosUsuario du;
    @Inject
    OrganismoBean organismoBean;
    
    public Notificacion guardar(Notificacion notif) {
        NotificacionDAO dao = new NotificacionDAO(em);
        try {
            return dao.update(notif);
        } catch (DAOGeneralException ex) {
            logger.log(Level.SEVERE, null, ex);
            BusinessException be = new BusinessException();
            be.addError(MensajesNegocio.ERROR_NOTIFICACION_GUARDAR);
            throw be;
        }
    }

    public void controlarNotifFaltantes() {
        List<Organismos> organismos = organismoBean.obtenerTodos();
        for (Organismos org : organismos) {
            List<Notificacion> notifList = obtenerTodosPorOrg(org.getOrgPk());
            Map<String, Notificacion> notifMap = new HashMap<>();
            for (Notificacion notif : notifList) {
                notifMap.put(notif.getNotCod(), notif);
            }

            Notificacion[] notifArr = new Notificacion[]{
                new Notificacion(org, ConstantesNotificaciones.NOT_COD_RIESGOS_1, LabelsEJB.getValue("notif_cod_riesgos_1_desc"), null, true, false, false, false, LabelsEJB.getValue("notif_cod_riesgos_1_mail")),
                new Notificacion(org, ConstantesNotificaciones.NOT_COD_RIESGOS_2, LabelsEJB.getValue("notif_cod_riesgos_2_desc"), null, true, false, false, false, LabelsEJB.getValue("notif_cod_riesgos_2_mail")),
                new Notificacion(org, ConstantesNotificaciones.NOT_COD_INICIO, LabelsEJB.getValue("notif_cod_inicio_desc"), null, true, false, false, false, LabelsEJB.getValue("notif_cod_inicio_mail")),
                new Notificacion(org, ConstantesNotificaciones.NOT_COD_PLANIFICACION, LabelsEJB.getValue("notif_cod_planificacion_desc"), null, true, false, false, false, LabelsEJB.getValue("notif_cod_planificacion_mail")),
                new Notificacion(org, ConstantesNotificaciones.NOT_COD_ACTUALIZACION_1, LabelsEJB.getValue("notif_cod_actualizacion_1_desc"), null, true, false, false, false, LabelsEJB.getValue("notif_cod_actualizacion_1_mail")),
                new Notificacion(org, ConstantesNotificaciones.NOT_COD_ACTUALIZACION_2, LabelsEJB.getValue("notif_cod_actualizacion_2_desc"), null, true, false, false, false,  LabelsEJB.getValue("notif_cod_actualizacion_2_mail")),
                new Notificacion(org, ConstantesNotificaciones.NOT_COD_PRESUPUESTO_1, LabelsEJB.getValue("notif_cod_presupuesto_1_desc"), null, true, false, false, false, LabelsEJB.getValue("notif_cod_presupuesto_1_mail")),
                new Notificacion(org, ConstantesNotificaciones.NOT_COD_PRESUPUESTO_2, LabelsEJB.getValue("notif_cod_presupuesto_2_desc"), null, true, false, false, false, LabelsEJB.getValue("notif_cod_presupuesto_2_mail")),
                new Notificacion(org, ConstantesNotificaciones.NOT_COD_PRESUPUESTO_3, LabelsEJB.getValue("notif_cod_presupuesto_3_desc"), null, true, false, false, false, LabelsEJB.getValue("notif_cod_presupuesto_3_mail")),
                new Notificacion(org, ConstantesNotificaciones.NOT_COD_PRESUPUESTO_4, LabelsEJB.getValue("notif_cod_presupuesto_4_desc"), null, true, false, false, false, LabelsEJB.getValue("notif_cod_presupuesto_4_mail")),
                new Notificacion(org, ConstantesNotificaciones.NOT_COD_PRESUPUESTO_5, LabelsEJB.getValue("notif_cod_presupuesto_5_desc"), null, true, false, false, false, LabelsEJB.getValue("notif_cod_presupuesto_5_mail")),
                new Notificacion(org, ConstantesNotificaciones.NOT_COD_CRONOGRAMA_1, LabelsEJB.getValue("notif_cod_cronograma_1_desc"), null, true, false, false, false, LabelsEJB.getValue("notif_cod_cronograma_1_mail")),
                };
            
            for (int i = 0; i < notifArr.length; i++) {
                if (!notifMap.containsKey(notifArr[i].getNotCod())) {
                    notifArr[i].setNotOrgFk(org);
                    try {
                        guardar(notifArr[i]);
                        logger.log(Level.INFO, "Se agregó la notificación '" + notifArr[i].getNotCod() + "' para el org " + org.getOrgPk());
                    } catch (BusinessException e) {
                        logger.log(Level.SEVERE, null, e);
                        System.out.println("No se pudo guardar la notificacion: "+notifArr[i].getNotCod()+"(org:"+org.getOrgPk()+")");
                    }
                }
            }
        }
    }

    public List<Notificacion> obtenerTodosPorOrg(Integer orgPk) {
        NotificacionDAO dao = new NotificacionDAO(em);
        try {
            return dao.findByOneProperty(Notificacion.class, "notOrgFk.orgPk", orgPk);
        } catch (DAOGeneralException ex) {
            Logger.getLogger(MailTemplateBean.class.getName()).log(Level.SEVERE, null, ex);
            BusinessException be = new BusinessException();
            be.setEx(ex);
            throw be;
        }
    }
}
