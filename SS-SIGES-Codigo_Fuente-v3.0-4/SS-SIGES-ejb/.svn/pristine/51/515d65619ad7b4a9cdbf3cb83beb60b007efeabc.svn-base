package com.sofis.business.ejbs;

import com.sofis.business.interceptors.LoggedInterceptor;
import com.sofis.data.daos.MailTemplateDAO;
import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.data.MailsTemplate;
import com.sofis.entities.data.Organismos;
import com.sofis.exceptions.BusinessException;
import com.sofis.generico.utils.generalutils.StringsUtils;
import com.sofis.persistence.dao.exceptions.DAOGeneralException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.inject.Named;
import javax.interceptor.Interceptors;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author Usuario
 */
@Named
@Stateless(name = "MailTemplateBean")
@LocalBean
@Interceptors({LoggedInterceptor.class})
public class MailTemplateBean {

    @PersistenceContext(unitName = ConstanteApp.PERSISTENCE_CONTEXT_UNIT_NAME)
    private EntityManager em;
    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);
    public static String MAIL_SOL_APROBACION = "MAIL_SOL_APROBACION";
    public static String MAIL_CAMBIO_ESTADO = "MAIL_CAMBIO_ESTADO";
    public static String MAIL_CAMBIO_CONTRASENIA = "MAIL_CAMBIO_CONTRASENIA";
    public static String MAIL_PROG_PROY_PENDIENTE = "MAIL_PROG_PROY_PENDIENTE";
    public static String MAIL_NVO_USUARIO = "MAIL_NVO_USUARIO";
    @Inject
    OrganismoBean organismoBean;

    public MailsTemplate guardar(MailsTemplate mt) {
        MailTemplateDAO dao = new MailTemplateDAO(em);
        try {
            return dao.update(mt);
        } catch (DAOGeneralException ex) {
            Logger.getLogger(MailTemplateBean.class.getName()).log(Level.SEVERE, null, ex);
            BusinessException be = new BusinessException();
            be.setEx(ex);
            throw be;
        }
    }

    public MailsTemplate obtenerMailTmpPorCodigo(String cod, Integer orgPk) {
        if (!StringsUtils.isEmpty(cod)) {
            MailTemplateDAO dao = new MailTemplateDAO(em);
            List<MailsTemplate> result;
            try {
                result = dao.findByOneProperty(MailsTemplate.class, "mailTmpCod", cod);
            } catch (DAOGeneralException ex) {
                Logger.getLogger(MailTemplateBean.class.getName()).log(Level.SEVERE, null, ex);
                BusinessException be = new BusinessException(ex.getMessage());
                throw be;
            }
            if (result != null && !result.isEmpty()) {
                return result.get(0);
            }
        }
        return null;
    }

    public List<MailsTemplate> obtenerTodosPorOrg(Integer orgPk) {
        MailTemplateDAO dao = new MailTemplateDAO(em);
        try {
            return dao.findByOneProperty(MailsTemplate.class, "mailTmpOrgFk.orgPk", orgPk);
        } catch (DAOGeneralException ex) {
            Logger.getLogger(MailTemplateBean.class.getName()).log(Level.SEVERE, null, ex);
            BusinessException be = new BusinessException();
            be.setEx(ex);
            throw be;
        }
    }

    public void controlarMailTmpFaltantes() {
        List<Organismos> organismos = organismoBean.obtenerTodos();
        for (Organismos org : organismos) {
            List<MailsTemplate> mtList = obtenerTodosPorOrg(org.getOrgPk());
            Map<String, MailsTemplate> mtMap = new HashMap<>();
            for (MailsTemplate mt : mtList) {
                mtMap.put(mt.getMailTmpCod(), mt);
            }

            MailsTemplate[] mtArr = new MailsTemplate[]{
                new MailsTemplate("MAIL_SOL_APROBACION", "Solicitud de Aprobación", "<h2>Solicitud de Aprobación</h2><p>Se generó una solicitud de cambio de estado para el #TIPO_PROG_PROY# \"#NOMBRE_PROG_PROY#\".</p><p>#ORGANISMO_NOMBRE#<br />#ORGANISMO_DIRECCION#</p>", org),
                new MailsTemplate("MAIL_CAMBIO_CONTRASENIA", "Cambio de contraseña en SIGES", "Estimado #NOMBRE#, se ha cambiado su contraseña en SIGES por #CONTRASENIA#", org),
                new MailsTemplate("MAIL_CAMBIO_ESTADO", "Programa / Proyecto cambió de fase.", "<h2>Cambio de Fase</h2><p>El #TIPO_PROG_PROY# #ID_PROG_PROY# \"#NOMBRE_PROG_PROY#\" cambió de fase a #FASE_PROG_PROY#.</p><p>#ORGANISMO_NOMBRE#<br />#ORGANISMO_DIRECCION#</p>", org),
                new MailsTemplate("MAIL_PROG_PROY_PENDIENTE", "Pendiente de aprobación.", "<h2>Pendiente de aprobación</h2><p>El #TIPO_PROG_PROY# #ID_PROG_PROY# \"#NOMBRE_PROG_PROY#\" esta pendiente de aprobación.</p><p>#ORGANISMO_NOMBRE#<br />#ORGANISMO_DIRECCION#</p>", org),
                new MailsTemplate("MAIL_NVO_USUARIO", "Usuario SIGES.", "<h2>Usuario creado</h2><p>Se ha creado el usuario #USU_MAIL# cuya clave es #USU_PASSWORD#, para ingresar al sistema de SIGES.</p><p>#ORGANISMO_NOMBRE#<br />#ORGANISMO_DIRECCION#</p>", org)};

            for (int i = 0; i < mtArr.length; i++) {
                if (!mtMap.containsKey(mtArr[i].getMailTmpCod())) {
                    guardar(mtArr[i]);
                    logger.log(Level.INFO, "Se agregó el mail template '" + mtArr[i].getMailTmpCod() + "' para el org " + org.getOrgPk());
                }
            }
        }
    }
}
