package com.sofis.business.ejbs;

import com.sofis.business.interceptors.LoggedInterceptor;
import com.sofis.business.validations.OrganismosValidacion;
import com.sofis.data.daos.OrganismoDAO;
import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.data.Organismos;
import com.sofis.entities.data.Programas;
import com.sofis.exceptions.GeneralException;
import com.sofis.exceptions.TechnicalException;
import com.sofis.persistence.dao.exceptions.DAOGeneralException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.inject.Named;
import javax.interceptor.Interceptors;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author Usuario
 */
@Named
@Stateless(name = "OrganismoBean")
@LocalBean
@Interceptors({LoggedInterceptor.class})
public class OrganismoBean {

    @PersistenceContext(unitName = ConstanteApp.PERSISTENCE_CONTEXT_UNIT_NAME)
    private EntityManager em;
    @Inject
    private ConsultaHistorico<Programas> ch;
    @Inject
    private DatosUsuario du;
    @EJB
    MailsTemplateBean mailsTemplateBean;
    @EJB
    ConfiguracionBean configuracionBean;
    @EJB
    NotificacionBean notificacionBean;
            
    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);

    public Organismos obtenerOrgPorId(Integer id) throws GeneralException {
        if (id != null) {
            OrganismoDAO orgDao = new OrganismoDAO(em);
            try {
                return orgDao.findById(Organismos.class, id);
            } catch (DAOGeneralException ex) {
//           logger.log(Level.SEVERE, ex.getMessage() , ex);
                TechnicalException te = new TechnicalException();
                te.addError(ex.getMessage());
                throw te;
            }
        }
        return null;

    }

    private Organismos guardar(Organismos org) {
        logger.info("Guardar Organismo.");
        OrganismosValidacion.validar(org);
        OrganismoDAO dao = new OrganismoDAO(em);
        try {
            org = dao.update(org, du.getCodigoUsuario(), du.getOrigen());
        } catch (DAOGeneralException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
        return org;
    }

    public Organismos guardarOrgnanismo(Organismos org) {
        return guardar(org);
    }

    public boolean existenOrganismos() {
        OrganismoDAO dao = new OrganismoDAO(em);
        List<Organismos> list = null;
        try {
            list = dao.findAll(Organismos.class);
        } catch (DAOGeneralException ex) {
            Logger.getLogger(OrganismoBean.class.getName()).log(Level.SEVERE, null, ex);
        }

        return list != null && !list.isEmpty();
    }

    public List<Organismos> obtenerTodos() {
        OrganismoDAO dao = new OrganismoDAO(em);
        List<Organismos> result = null;
        try {
            result = dao.findAll(Organismos.class);
        } catch (DAOGeneralException ex) {
            Logger.getLogger(OrganismoBean.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }
    
    public void controlarDatosFaltantes() {
        //mails_template
        mailsTemplateBean.controlarMailTmpFaltantes();

        //ss_configuraciones
        configuracionBean.controlarCnfFaltantes();
        
        //notificacion
        notificacionBean.controlarNotifFaltantes();
    }
}
