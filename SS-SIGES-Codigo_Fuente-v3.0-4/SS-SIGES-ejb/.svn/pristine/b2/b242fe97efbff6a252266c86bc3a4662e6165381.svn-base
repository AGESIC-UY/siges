package com.sofis.business.ejbs;

import com.sofis.business.constantes.ConfiguracionCodigos;
import com.sofis.business.interceptors.LoggedInterceptor;
import com.sofis.entities.constantes.ConstantesErrores;
import com.sofis.data.daos.ConfiguracionDAO;
import com.sofis.entities.data.Configuracion;
import com.sofis.exceptions.BusinessException;
import com.sofis.exceptions.GeneralException;
import com.sofis.exceptions.TechnicalException;
import com.sofis.persistence.dao.exceptions.DAOGeneralException;
import com.sofis.sofisform.to.CriteriaTO;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.inject.Named;
import javax.interceptor.Interceptors;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import com.sofis.business.validations.ConfiguracionValidacion;
import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.constantes.MensajesNegocio;
import com.sofis.entities.data.Organismos;
import com.sofis.sofisform.to.MatchCriteriaTO;
import com.sofis.utils.CriteriaTOUtils;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Usuario
 */
@Named
@Stateless(name = "ConfiguracionBean")
@LocalBean
@Interceptors({LoggedInterceptor.class})
public class ConfiguracionBean {

    @PersistenceContext(unitName = ConstanteApp.PERSISTENCE_CONTEXT_UNIT_NAME)
    private EntityManager em;
    @Inject
    private DatosUsuario du;
    @Inject
    private ConsultaHistorico<Configuracion> ch;
    @Inject
    private OrganismoBean organismoBean;
    private static final Logger logger =
            Logger.getLogger(ConstanteApp.LOGGER_NAME);

    /**
     * Este método guarda un elemento de tipo Configuracion. Se aplica para la
     * creación de la entidad y para la modificación de una entidad existente.
     *
     * @param cnf
     * @throws GeneralException Devuelve los códigos de error de la validación
     */
    public Configuracion guardar(Configuracion cnf) throws GeneralException {
        logger.log(Level.SEVERE, "guardar");
        try {
            //Validar el elemento a guardar. Si no valida, se lanza una excepcion
            if (ConfiguracionValidacion.validar(cnf)) {
                ConfiguracionDAO cnfDao = new ConfiguracionDAO(em);
                if (cnf.getId() == null) {
                    cnf = cnfDao.create(cnf, du.getCodigoUsuario(), du.getOrigen());
                } else {
                    //Si el dato ya fue guardado, se determina que haya cambiado alguno de los valores.
                    //En caso contrario no se guarda
                    Configuracion valorAnterior = ch.obtenerConfiguracionEnVersion(cnf.getCnfVersion(), cnf.getId());
                    if (valorAnterior == null || !ConfiguracionValidacion.compararParaGrabar(valorAnterior, cnf)) {
                        cnf = cnfDao.update(cnf, du.getCodigoUsuario(), du.getOrigen());
                    }
                }
            }
            return cnf;
        } catch (BusinessException be) {
            //Si es de tipo negocio envía la misma excepción
            throw be;
        } catch (Exception ex) {
            //Las demás excepciones se consideran técnicas
//            logger.log(Level.SEVERE, ex.getMessage() , ex);
            TechnicalException ge = new TechnicalException();
            ge.addError(ex.getMessage());
            throw ge;
        }

    }

    /**
     * Devuelve el elemento configuracion por el ID
     *
     * @param id
     * @return
     * @throws GeneralException
     */
    public Configuracion obtenerCnfPorId(Integer id) throws GeneralException {
        ConfiguracionDAO cnfDao = new ConfiguracionDAO(em);
        try {
            return cnfDao.findById(Configuracion.class, id);
        } catch (DAOGeneralException ex) {
//           logger.log(Level.SEVERE, ex.getMessage() , ex);
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }

    public Configuracion obtenerCnfPorCodigoYOrg(String codigo, Integer orgPk) throws GeneralException {
        ConfiguracionDAO cnfDao = new ConfiguracionDAO(em);
        try {
            CriteriaTO criteriaOrg = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "cnfOrgFk.orgPk", orgPk);
            CriteriaTO criteriaCod = CriteriaTOUtils.createMatchCriteriaTO(MatchCriteriaTO.types.EQUALS, "cnfCodigo", codigo);
            CriteriaTO criteria = CriteriaTOUtils.createANDTO(criteriaOrg, criteriaCod);

            List<Configuracion> resultado = cnfDao.findEntityByCriteria(Configuracion.class, criteria, new String[]{}, new boolean[]{}, null, null);
            if (resultado.size() == 1) {
                return resultado.get(0);
            } else if (resultado.isEmpty()) {
                return null;
            } else {
                BusinessException be = new BusinessException();
                be.addError(ConstantesErrores.ERROR_DEMASIADOS_RESULTADOS);
                throw be;
            }
        } catch (DAOGeneralException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }

    /**
     * Devuelve todos los elementos de tipo configuracion
     *
     * @return
     * @throws GeneralException
     */
    @Deprecated
    public List<Configuracion> obtenerTodos() throws GeneralException {
        ConfiguracionDAO cnfDao = new ConfiguracionDAO(em);
        try {
            return cnfDao.findAll(Configuracion.class);
        } catch (Exception ex) {
//            logger.log(Level.SEVERE, ex.getMessage() , ex);
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }

    /**
     * Devuelve los elementos que satisfacen el criterio ingresado
     *
     * @param cto
     * @param orderBy
     * @param ascending
     * @param startPosition
     * @param cantidad
     * @return
     * @throws GeneralException
     */
    public List<Configuracion> obtenerPorCriteria(CriteriaTO cto, String[] orderBy, boolean[] ascending, Long startPosition, Long cantidad) throws GeneralException {
        ConfiguracionDAO cnfDao = new ConfiguracionDAO(em);
        try {
            return cnfDao.findEntityByCriteria(Configuracion.class, cto, orderBy, ascending, startPosition, cantidad);
        } catch (Exception ex) {
//            logger.log(Level.SEVERE, ex.getMessage() , ex);
            TechnicalException te = new TechnicalException();
            te.addError(ex.getMessage());
            throw te;
        }
    }

    public List<Configuracion> obtenerTodosPorOrg(Integer orgPk) {
        ConfiguracionDAO cnfDao = new ConfiguracionDAO(em);
        try {
            return cnfDao.findByOneProperty(Configuracion.class, "cnfOrgFk.orgPk", orgPk);
        } catch (DAOGeneralException ex) {
            Logger.getLogger(ConfiguracionBean.class.getName()).log(Level.SEVERE, null, ex);
            BusinessException be = new BusinessException();
            be.addError(MensajesNegocio.ERROR_CONFIG_OBTENER);
            throw be;
        }
    }

    public void controlarCnfFaltantes() {
        List<Organismos> organismos = organismoBean.obtenerTodos();
        for (Organismos org : organismos) {
            List<Configuracion> confList = obtenerTodosPorOrg(org.getOrgPk());
            Map<String, Configuracion> confMap = new HashMap<>();
            for (Configuracion conf : confList) {
                confMap.put(conf.getCnfCodigo(), conf);
            }

            Configuracion[] confArr = new Configuracion[]{
                new Configuracion(ConfiguracionCodigos.RIESGO_INDICE_LIMITE_AMARILLO, "", "1.2", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.RIESGO_INDICE_LIMITE_ROJO, "", "4", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.RIESGO_TIEMPO_LIMITE_AMARILLO, "", "10", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.RIESGO_TIEMPO_LIMITE_ROJO, "", "20", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.DOCUMENTO_PORCENTAJE_LIMITE_AMARILLO, "", "30", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.DOCUMENTO_PORCENTAJE_LIMITE_ROJO, "", "70", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.TAMANIO_MAX_ARCHIVO_DOCUMENTO, "", "10485760", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.COSTO_ACTUAL_LIMITE_AMARILLO, "", "10", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.COSTO_ACTUAL_LIMITE_ROJO, "", "10", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.ESTADO_INICIO_LIMITE_AMARILLO, "Semaforo estado Inicio amarillo", "10", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.ESTADO_INICIO_LIMITE_ROJO, "Semaforo estado Inicio rojo", "15", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.ESTADO_PLANIFICACION_LIMITE_AMARILLO, "Semaforo estado Planificacion amarillo", "15", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.ESTADO_PLANIFICACION_LIMITE_ROJO, "Semaforo estado Planificacion rojo", "20", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.TAMANIO_MAX_LOGO_ORGANISMO, "Tamaño máximo en bytes del logo del Organismo", "262144", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.MAIL_FROM, "Dirección desde donde se envían los mails", "10", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.MAIL_ENCODING, "Encoding de los mails a enviar", "utf8", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.CON_CORREO, "Si se envía correo o no", "false", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.CON_CONTROL_ACCESO, "Si se usa el control de acceso de Agesic o no", "false", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.PRODUCTO_INDICE_LIMITE_AMARILLO, "Limite semaforo amarillo para Productos", "10", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.PRODUCTO_INDICE_LIMITE_ROJO, "Limite semaforo rojo para Productos", "20", org, new Date(), 0),
                new Configuracion(ConfiguracionCodigos.ENVIO_NOTIFICACIONES, "Determina si se envían notificaciones", "false", org, new Date(), 0)
            };

            for (int i = 0; i < confArr.length; i++) {
                if (!confMap.containsKey(confArr[i].getCnfCodigo())) {
                    confArr[i].setCnfOrgFk(org);
                    guardar(confArr[i]);
                    logger.log(Level.INFO, "Se agregó la configuración '" + confArr[i].getCnfCodigo() + "' para el org " + org.getOrgPk());
                }
            }
        }
    }
}
