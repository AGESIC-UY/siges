package com.sofis.web.mb;

import com.sofis.business.utils.EntregablesUtils;
import com.sofis.business.utils.GastosUtils;
import com.sofis.business.utils.RegistroHorasUtils;
import com.sofis.entities.comparators.EntregablesComparator;
import com.sofis.entities.constantes.ConstanteApp;
import com.sofis.entities.data.Entregables;
import com.sofis.entities.data.Gastos;
import com.sofis.entities.data.Moneda;
import com.sofis.entities.data.Participantes;
import com.sofis.entities.data.Proyectos;
import com.sofis.entities.data.RegistrosHoras;
import com.sofis.entities.data.SsUsuario;
import com.sofis.entities.data.TipoGasto;
import com.sofis.exceptions.BusinessException;
import com.sofis.web.delegates.EntregablesDelegate;
import com.sofis.web.delegates.GastosDelegate;
import com.sofis.web.delegates.MonedaDelegate;
import com.sofis.web.delegates.ParticipantesDelegate;
import com.sofis.web.delegates.ProyectosDelegate;
import com.sofis.web.delegates.RegistrosHorasDelegate;
import com.sofis.web.delegates.TipoGastoDelegate;
import com.sofis.web.properties.Labels;
import com.sofis.web.utils.JSFUtils;
import com.sofis.web.utils.SofisCombo;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import javax.inject.Inject;

/**
 *
 * @author Usuario
 */
@ManagedBean(name = "registroHorasMB")
@ViewScoped
public class RegistroHorasMB implements Serializable {

    private static final long serialVersionUID = 1L;
    private static final Logger logger = Logger.getLogger(ConstanteApp.LOGGER_NAME);
    private static final String REGISTRO_FORM_MSG = "registroFormMsg";
    @ManagedProperty("#{inicioMB}")
    InicioMB inicioMB;
    @Inject
    ProyectosDelegate proyectoDelegate;
    @Inject
    RegistrosHorasDelegate registrosHorasDelegate;
    @Inject
    ParticipantesDelegate participantesDelegate;
    @Inject
    EntregablesDelegate entregablesDelegate;
    @Inject
    MonedaDelegate monedaDelegate;
    @Inject
    TipoGastoDelegate tipoGastoDelegate;
    @Inject
    GastosDelegate gastosDelegate;
    //Atributos
    private int cantElementosPorPagina = 25;
    private RegistrosHoras registroHoras;
    private Gastos gasto;
    private List<RegistrosHoras> registroHorasListado;
    private List<Gastos> registroGastosListado;
    //Formulario
    private List<Proyectos> listaProyectos;
    private List<Entregables> listaEntregables;
    private Integer tipoRegistro;
    private List<TipoGasto> listaTipoGasto;
    private SofisCombo listaTipoGastoCombo;
    private List<Moneda> listaMoneda;
    private SofisCombo listaMonedaCombo;
    //Para el filtro
    private Integer filtroProyPk;
    private Date filtroFechaDesde;
    private Date filtroFechaHasta;
    private List<Proyectos> listaProyectosFiltro;
    private List<Entregables> listaEntregablesFiltro;
    private SofisCombo listaEntregablesCombo;
    private List<SelectItem> listaAprobItems;
    private SofisCombo listaAprobCombo;
    private List<SelectItem> listaAvanceItems;
    private SofisCombo listaAvanceCombo;
    private SofisCombo listaFiltroTipoGastoCombo;

    public RegistroHorasMB() {
        tipoRegistro = 1;
        gasto = new Gastos();
        listaFiltroTipoGastoCombo = new SofisCombo();
    }

    public int getCantElementosPorPagina() {
        return cantElementosPorPagina;
    }

    public void setCantElementosPorPagina(int cantElementosPorPagina) {
        this.cantElementosPorPagina = cantElementosPorPagina;
    }

    public RegistrosHoras getRegistroHoras() {
        return registroHoras;
    }

    public Gastos getGasto() {
        return gasto;
    }

    public void setGasto(Gastos gasto) {
        this.gasto = gasto;
    }

    public List<Entregables> getListaEntregables() {
        return listaEntregables;
    }

    public List<Proyectos> getListaProyectos() {
        return listaProyectos;
    }

    public List<RegistrosHoras> getRegistroHorasListado() {
        return registroHorasListado;
    }

    public List<Gastos> getRegistroGastosListado() {
        return registroGastosListado;
    }

    public void setRegistroGastosListado(List<Gastos> registroGastosListado) {
        this.registroGastosListado = registroGastosListado;
    }

    public Integer getTipoRegistro() {
        return tipoRegistro;
    }

    public void setTipoRegistro(Integer tipoRegistro) {
        this.tipoRegistro = tipoRegistro;
    }

    public List<TipoGasto> getListaTipoGasto() {
        return listaTipoGasto;
    }

    public void setListaTipoGasto(List<TipoGasto> listaTipoGasto) {
        this.listaTipoGasto = listaTipoGasto;
    }

    public SofisCombo getListaTipoGastoCombo() {
        return listaTipoGastoCombo;
    }

    public void setListaTipoGastoCombo(SofisCombo listaTipoGastoCombo) {
        this.listaTipoGastoCombo = listaTipoGastoCombo;
    }

    public List<SelectItem> getListaAvanceItems() {
        return listaAvanceItems;
    }

    public void setListaAvanceItems(List<SelectItem> listaAvanceItems) {
        this.listaAvanceItems = listaAvanceItems;
    }

    public Integer getFiltroProyPk() {
        return filtroProyPk;
    }

    public void setFiltroProyPk(Integer filtroProyPk) {
        this.filtroProyPk = filtroProyPk;
    }

    public Date getFiltroFechaDesde() {
        return filtroFechaDesde;
    }

    public void setFiltroFechaDesde(Date filtroFechaDesde) {
        this.filtroFechaDesde = filtroFechaDesde;
    }

    public Date getFiltroFechaHasta() {
        return filtroFechaHasta;
    }

    public void setFiltroFechaHasta(Date filtroFechaHasta) {
        this.filtroFechaHasta = filtroFechaHasta;
    }

    public List<Proyectos> getListaProyectosFiltro() {
        return listaProyectosFiltro;
    }

    public List<Entregables> getListaEntregablesFiltro() {
        return listaEntregablesFiltro;
    }

    public SofisCombo getListaEntregablesCombo() {
        return listaEntregablesCombo;
    }

    public void setListaEntregablesCombo(SofisCombo listaEntregablesCombo) {
        this.listaEntregablesCombo = listaEntregablesCombo;
    }

    public List<SelectItem> getListaAprobItems() {
        return listaAprobItems;
    }

    public void setListaAprobItems(List<SelectItem> listaAprobItems) {
        this.listaAprobItems = listaAprobItems;
    }

    public SofisCombo getListaAprobCombo() {
        return listaAprobCombo;
    }

    public void setListaAprobCombo(SofisCombo listaAprobCombo) {
        this.listaAprobCombo = listaAprobCombo;
    }

    public SofisCombo getListaAvanceCombo() {
        return listaAvanceCombo;
    }

    public void setListaAvanceCombo(SofisCombo listaAvanceCombo) {
        this.listaAvanceCombo = listaAvanceCombo;
    }

    public SofisCombo getListaFiltroTipoGastoCombo() {
        return listaFiltroTipoGastoCombo;
    }

    public void setListaFiltroTipoGastoCombo(SofisCombo listaFiltroTipoGastoCombo) {
        this.listaFiltroTipoGastoCombo = listaFiltroTipoGastoCombo;
    }

    public void setInicioMB(InicioMB inicioMB) {
        this.inicioMB = inicioMB;
    }

    public void setProyectoDelegate(ProyectosDelegate proyectoDelegate) {
        this.proyectoDelegate = proyectoDelegate;
    }

    public void setRegistrosHorasDelegate(RegistrosHorasDelegate registrosHorasDelegate) {
        this.registrosHorasDelegate = registrosHorasDelegate;
    }

    public List<Moneda> getListaMoneda() {
        return listaMoneda;
    }

    public void setListaMoneda(List<Moneda> listaMoneda) {
        this.listaMoneda = listaMoneda;
    }

    public SofisCombo getListaMonedaCombo() {
        return listaMonedaCombo;
    }

    public void setListaMonedaCombo(SofisCombo listaMonedaCombo) {
        this.listaMonedaCombo = listaMonedaCombo;
    }

    @PostConstruct
    public void init() {
        inicioMB.cargarOrganismoSeleccionado();

        inicializarRegistroHoras();
        inicializarRegisroGastos();
        inicializarFiltro();
        buscarSinFiltro();
    }

    private void inicializarRegisroGastos() {
        gasto = new Gastos();
        gasto.setGasProyFk(new Proyectos());
        gasto.setGasFecha(new Date());
        listaTipoGasto = tipoGastoDelegate.obtenerTipoGastoPorOrg(inicioMB.getOrganismo().getOrgPk());
        if (listaTipoGasto != null) {
            listaTipoGastoCombo = new SofisCombo((List) listaTipoGasto, "tipogasNombre");
            listaTipoGastoCombo.addEmptyItem(Labels.getValue("comboEmptyItem"));
        }

        listaMoneda = monedaDelegate.obtenerMonedas();
        if (listaMoneda != null) {
            listaMonedaCombo = new SofisCombo((List) listaMoneda, "monSigno");
        }
    }

    private void inicializarRegistroHoras() {

        //Obtener el usuario logueado
        SsUsuario usuario = inicioMB.getUsuario();
        //Determinar los proyectos en los que participa
        listaProyectos = participantesDelegate.obtenerProyectosPorUsuarioParticipante(usuario.getUsuId());
        //Cargar los entregables del primer proyecto
        Integer proyId = null;
        if (listaProyectos != null && !listaProyectos.isEmpty()) {
            proyId = listaProyectos.get(0).getProyPk();
        }

        //Crear una nueva instancia de RegistroHoras
        registroHoras = new RegistrosHoras();
        registroHoras.setRhFecha(new Date());
        registroHoras.setRhUsuarioFk(usuario);
        registroHoras.setRhProyectoFk(new Proyectos(0));
        registroHoras.setRhEntregableFk(new Entregables(0));

        listaAvanceItems = new ArrayList<>();
        for (int i = 0; i <= 100; i = i + 10) {
            listaAvanceItems.add(new SelectItem(i, "" + i));
        }
        listaAvanceCombo = new SofisCombo((List) listaAvanceItems, "label");
        listaAvanceCombo.addEmptyItem("Sin cambios");

        cargarEntregablesProyecto(proyId);
    }

    public void cambiarProyecto(ValueChangeEvent evt) {
        Integer proyId = (Integer) evt.getNewValue();
        cargarEntregablesProyecto(proyId);
    }

    private void cargarEntregablesProyecto(Integer proyId) {
        listaEntregables = new LinkedList<>();
        if (proyId != null && proyId.intValue() > 0) {
            Proyectos proy = proyectoDelegate.obtenerProyPorId(proyId);
            if (proy != null && proy.getProyCroFk() != null && proy.getProyCroFk().getEntregablesSet() != null) {
                listaEntregables.addAll(proy.getProyCroFk().getEntregablesSet());
            }
        }

        Participantes part = participantesDelegate.obtenerParticipantesPorUsuId(proyId, inicioMB.getUsuario().getUsuId());
        if (part != null) {
            listaEntregables = EntregablesUtils.obtenerHijos(listaEntregables, part.getPartEntregablesFk(), Boolean.TRUE);
        }

        if (listaEntregables.isEmpty()) {
            registroHoras.getRhEntregableFk().setEntPk(0);
        } else {
            listaEntregables = EntregablesUtils.textoComboPorId(listaEntregables);
        }
    }

    public String registrarHoras() {
        try {
            if (tipoRegistro == 1) {
                //Registro de horas
                SelectItem avance = (SelectItem) listaAvanceCombo.getSelectedObject();
                boolean limpiar = false;

                if (!(registroHoras.getRhHoras().equals(0f)
                        && avance != null)) {
                    registroHoras = registrosHorasDelegate.registrarHoras(registroHoras);
                    if (registroHoras != null) {
                        JSFUtils.agregarMsg(REGISTRO_FORM_MSG, "info_registroshoras_guardado", null);
                        limpiar = true;
                    }
                }
                Entregables ent = null;
                if (avance != null && avance.getValue() != null && registroHoras != null) {
                    try {
                        ent = entregablesDelegate.actualizarAvance(registroHoras.getRhProyectoFk().getProyPk(), registroHoras.getRhEntregableFk().getEntPk(), (Integer) avance.getValue(), inicioMB.getUsuario());
                        if (ent != null) {
                            JSFUtils.agregarMsg(REGISTRO_FORM_MSG, "info_registroshoras_avance_guardado", null);
                        }
                    } catch (BusinessException be) {
                        logger.log(Level.SEVERE, be.getMessage(), be);
                        JSFUtils.agregarMsgs(REGISTRO_FORM_MSG, be.getErrores());
                    }
                }
//                if (ent != null) {
//                    registroHoras.setRhEntregableFk(ent);
//                }
                if (limpiar) {
                    limpiarForm();
                }

            } else if (tipoRegistro == 2) {
                //Registro de gasto
                TipoGasto tg = (TipoGasto) listaTipoGastoCombo.getSelectedObject();
                Moneda moneda = (Moneda) listaMonedaCombo.getSelectedObject();
                gasto.setGasTipoFk(tg);
                gasto.setGasMonFk(moneda);
                gasto.setGasUsuarioFk(inicioMB.getUsuario());

                gasto = gastosDelegate.registrarGasto(gasto);
                if (gasto != null) {
                    JSFUtils.agregarMsg(REGISTRO_FORM_MSG, "info_registroshoras_gasto_guardado", null);
                    limpiarForm();
                }
            }
        } catch (BusinessException ex) {
            logger.log(Level.SEVERE, ex.getMessage());
            JSFUtils.agregarMsgs(REGISTRO_FORM_MSG, ex.getErrores());
        }
        buscarConFiltro();
        inicializarRegistroHoras();

        return null;
    }

    private void inicializarFiltro() {
        filtroFechaDesde = null;
        filtroFechaHasta = null;
        inicializarFiltroProyectos();

        listaTipoGasto = tipoGastoDelegate.obtenerTipoGastoPorOrg(inicioMB.getOrganismo().getOrgPk());
        if (listaTipoGasto != null) {
            listaFiltroTipoGastoCombo = new SofisCombo((List) listaTipoGasto, "tipogasNombre");
            listaFiltroTipoGastoCombo.addEmptyItem(Labels.getValue("comboTodos"));
        }
    }

    private void inicializarFiltroProyectos() {
        listaProyectosFiltro = new LinkedList<>();
        listaProyectosFiltro.addAll(listaProyectos);
        listaProyectosFiltro.add(0, new Proyectos(0, Labels.getValue("comboTodos")));
        cargarEntregablesProyectoFiltro(0);
    }

    private void cargarEntregablesProyectoFiltro(Integer proyId) {
        listaEntregablesFiltro = new LinkedList<>();
        if (proyId != null && proyId.intValue() > 0) {
            Proyectos proy = proyectoDelegate.obtenerProyPorId(proyId);
            if (proy != null && proy.getProyCroFk() != null && proy.getProyCroFk().getEntregablesSet() != null) {
                listaEntregablesFiltro.addAll(proy.getProyCroFk().getEntregablesSet());
            }
        }

        listaEntregablesFiltro = EntregablesUtils.textoComboPorId(listaEntregablesFiltro);
        if (listaEntregablesFiltro != null) {
            listaEntregablesCombo = new SofisCombo((List) listaEntregablesFiltro, "entNombre");
            listaEntregablesCombo.addEmptyItem(Labels.getValue("comboTodos"));
        }

        listaAprobItems = new ArrayList<>();
        listaAprobItems.add(new SelectItem(1, Labels.getValue("revisionHoras_aprobado")));
        listaAprobItems.add(new SelectItem(0, Labels.getValue("revisionHoras_pendiente")));
        listaAprobCombo = new SofisCombo((List) listaAprobItems, "label");
        listaAprobCombo.addEmptyItem(Labels.getValue("comboTodos"));
    }

    public void cambiarProyectoFiltro(ValueChangeEvent event) {
        Integer proyId = (Integer) event.getNewValue();
        cargarEntregablesProyectoFiltro(proyId);
    }

    public String buscarConFiltro() {
        if (tipoRegistro == null || tipoRegistro == 1) {
            SsUsuario usuario = inicioMB.getUsuario();
            SelectItem aprob = (SelectItem) listaAprobCombo.getSelectedObject();
            Entregables entregable = (Entregables) listaEntregablesCombo.getSelectedObject();

            registroHorasListado = registrosHorasDelegate.obtenerRegistrosHoras(usuario.getUsuId(),
                    (filtroProyPk != null && filtroProyPk.intValue() > 0 ? filtroProyPk : null),
                    (entregable != null ? entregable.getEntPk() : null),
                    filtroFechaDesde, filtroFechaHasta, null, null,
                    (aprob != null ? (Integer) aprob.getValue() : null));
            RegistroHorasUtils.sortByFecha(registroHorasListado);

        } else if (tipoRegistro == 2) {
            SsUsuario usuario = inicioMB.getUsuario();
            TipoGasto tipoGasto = (TipoGasto) listaFiltroTipoGastoCombo.getSelectedObject();
            registroGastosListado = gastosDelegate.obtenerRegistrosGastos(usuario.getUsuId(),
                    (filtroProyPk != null && filtroProyPk.intValue() > 0 ? filtroProyPk : null),
                    filtroFechaDesde, filtroFechaHasta, tipoGasto, null, null, null);
            GastosUtils.sortByFecha(registroGastosListado);
        }

        return null;
    }

    public String buscarSinFiltro() {
        filtroProyPk = null;
        filtroFechaDesde = null;
        filtroFechaHasta = null;
        listaFiltroTipoGastoCombo.setSelected(-1);
        return buscarConFiltro();
    }

    public void limpiarForm() {
        registroHoras.setRhFecha(new Date());
        registroHoras.setRhUsuarioFk(inicioMB.getUsuario());
        registroHoras.setRhProyectoFk(new Proyectos(0));
        registroHoras.setRhEntregableFk(new Entregables(0));

        gasto = new Gastos();
        gasto.setGasProyFk(new Proyectos());
        gasto.setGasFecha(new Date());
    }

    public void limpiarFiltro() {
        //Atributos
        registroHorasListado = null;
        registroGastosListado = null;
        filtroProyPk = null;
        filtroFechaDesde = null;
        filtroFechaHasta = null;
//        listaProyectosFiltro.
        listaEntregablesCombo.setSelected(-1);
        listaAprobCombo.setSelected(-1);
//        listaProyectosFiltro.
        listaFiltroTipoGastoCombo.setSelected(-1);
    }

    public String changeTipoRegistro() {
        System.out.println("tipoRegistro1:" + tipoRegistro);
        if (tipoRegistro.equals(2) || tipoRegistro == null) {
            tipoRegistro = 1;
        } else {
            tipoRegistro = 2;
        }
        System.out.println("tipoRegistro2:" + tipoRegistro);
        return null;
    }
}